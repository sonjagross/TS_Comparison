
EtherCAT lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000625c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000625c  0000625c  0001625c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000214  20000000  00006264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00020214  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00020214  2**0
                  CONTENTS
  5 .bss          000009f4  20000220  00006490  00020220  2**4
                  ALLOC
  6 .stack        00010004  20000c14  00006e84  00020220  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003de48  00000000  00000000  0002029b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004cf0  00000000  00000000  0005e0e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00016632  00000000  00000000  00062dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001298  00000000  00000000  00079405  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001348  00000000  00000000  0007a69d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003892a  00000000  00000000  0007b9e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001b87e  00000000  00000000  000b430f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00126433  00000000  00000000  000cfb8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000338c  00000000  00000000  001f5fc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 0c 01 20 a9 0e 00 00 a5 0e 00 00 a5 0e 00 00     ... ............
      10:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 00 00 00 00     ................
	...
      2c:	a5 0e 00 00 a5 0e 00 00 00 00 00 00 a5 0e 00 00     ................
      3c:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
      4c:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
      5c:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
      6c:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
      7c:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
      8c:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
      9c:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
      ac:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
      bc:	2d 2c 00 00 39 2c 00 00 45 2c 00 00 51 2c 00 00     -,..9,..E,..Q,..
      cc:	5d 2c 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ],..............
      dc:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 00 00 00 00     ................
	...
      f4:	7d 2d 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     }-..............
     104:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     114:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     124:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     134:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     144:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     154:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     164:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     174:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     184:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     194:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     1a4:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     1b4:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     1c4:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     1d4:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     1e4:	a5 0e 00 00 a5 0e 00 00 59 41 00 00 a5 0e 00 00     ........YA......
     1f4:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     204:	a5 0e 00 00 c9 15 00 00 a5 0e 00 00 a5 0e 00 00     ................
     214:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 99 28 00 00     .............(..
     224:	ad 28 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     .(..............
     234:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     244:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................
     254:	a5 0e 00 00 a5 0e 00 00 a5 0e 00 00 a5 0e 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000220 	.word	0x20000220
     280:	00000000 	.word	0x00000000
     284:	00006264 	.word	0x00006264

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00006264 	.word	0x00006264
     2c4:	20000224 	.word	0x20000224
     2c8:	00006264 	.word	0x00006264
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	000013c5 	.word	0x000013c5

000002dc <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
     2dc:	b150      	cbz	r0, 2f4 <null_ptr_check+0x18>
     2de:	6842      	ldr	r2, [r0, #4]
     2e0:	b15a      	cbz	r2, 2fa <null_ptr_check+0x1e>
     2e2:	6882      	ldr	r2, [r0, #8]
     2e4:	b162      	cbz	r2, 300 <null_ptr_check+0x24>
     2e6:	68c3      	ldr	r3, [r0, #12]
     2e8:	b10b      	cbz	r3, 2ee <null_ptr_check+0x12>
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
    }
    else
    {
        rslt = BMP280_OK;
     2ea:	2000      	movs	r0, #0
    }

    return rslt;
}
     2ec:	4770      	bx	lr
        rslt = BMP280_E_NULL_PTR;
     2ee:	f04f 30ff 	mov.w	r0, #4294967295
     2f2:	4770      	bx	lr
     2f4:	f04f 30ff 	mov.w	r0, #4294967295
     2f8:	4770      	bx	lr
     2fa:	f04f 30ff 	mov.w	r0, #4294967295
     2fe:	4770      	bx	lr
     300:	f04f 30ff 	mov.w	r0, #4294967295
     304:	4770      	bx	lr

00000306 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
     306:	b470      	push	{r4, r5, r6}
    uint8_t index;

    for (index = 1; index < len; index++)
     308:	2401      	movs	r4, #1
     30a:	e008      	b.n	31e <interleave_data+0x18>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
     30c:	0065      	lsls	r5, r4, #1
     30e:	3d01      	subs	r5, #1
     310:	5d06      	ldrb	r6, [r0, r4]
     312:	554e      	strb	r6, [r1, r5]
        temp_buff[index * 2] = reg_data[index];
     314:	5d15      	ldrb	r5, [r2, r4]
     316:	f801 5014 	strb.w	r5, [r1, r4, lsl #1]
    for (index = 1; index < len; index++)
     31a:	3401      	adds	r4, #1
     31c:	b2e4      	uxtb	r4, r4
     31e:	429c      	cmp	r4, r3
     320:	d3f4      	bcc.n	30c <interleave_data+0x6>
    }
}
     322:	bc70      	pop	{r4, r5, r6}
     324:	4770      	bx	lr
	...

00000328 <st_check_boundaries>:
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
    int8_t rslt = 0;

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
     328:	3801      	subs	r0, #1
     32a:	4b0b      	ldr	r3, [pc, #44]	; (358 <st_check_boundaries+0x30>)
     32c:	4298      	cmp	r0, r3
     32e:	d902      	bls.n	336 <st_check_boundaries+0xe>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
     330:	1e4a      	subs	r2, r1, #1
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
     332:	429a      	cmp	r2, r3
     334:	d80a      	bhi.n	34c <st_check_boundaries+0x24>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
     336:	4b08      	ldr	r3, [pc, #32]	; (358 <st_check_boundaries+0x30>)
     338:	4298      	cmp	r0, r3
     33a:	d80a      	bhi.n	352 <st_check_boundaries+0x2a>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
     33c:	3901      	subs	r1, #1
     33e:	4299      	cmp	r1, r3
     340:	d801      	bhi.n	346 <st_check_boundaries+0x1e>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
    }
    else
    {
        rslt = BMP280_OK;
     342:	2000      	movs	r0, #0
    }

    return rslt;
}
     344:	4770      	bx	lr
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
     346:	f06f 000a 	mvn.w	r0, #10
     34a:	4770      	bx	lr
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
     34c:	f06f 000b 	mvn.w	r0, #11
     350:	4770      	bx	lr
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
     352:	f06f 0009 	mvn.w	r0, #9
     356:	4770      	bx	lr
     358:	000fffee 	.word	0x000fffee

0000035c <bmp280_get_regs>:
{
     35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     360:	4606      	mov	r6, r0
     362:	460d      	mov	r5, r1
     364:	4690      	mov	r8, r2
     366:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
     368:	4618      	mov	r0, r3
     36a:	4b0e      	ldr	r3, [pc, #56]	; (3a4 <bmp280_get_regs+0x48>)
     36c:	4798      	blx	r3
    if ((rslt == BMP280_OK) && (reg_data != NULL))
     36e:	b978      	cbnz	r0, 390 <bmp280_get_regs+0x34>
     370:	b18d      	cbz	r5, 396 <bmp280_get_regs+0x3a>
        if (dev->intf == BMP280_SPI_INTF)
     372:	78a3      	ldrb	r3, [r4, #2]
     374:	b90b      	cbnz	r3, 37a <bmp280_get_regs+0x1e>
            reg_addr = reg_addr | 0x80;
     376:	f046 0680 	orr.w	r6, r6, #128	; 0x80
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
     37a:	6867      	ldr	r7, [r4, #4]
     37c:	4643      	mov	r3, r8
     37e:	462a      	mov	r2, r5
     380:	4631      	mov	r1, r6
     382:	7860      	ldrb	r0, [r4, #1]
     384:	47b8      	blx	r7
        if (rslt != BMP280_OK)
     386:	4603      	mov	r3, r0
     388:	b940      	cbnz	r0, 39c <bmp280_get_regs+0x40>
}
     38a:	4618      	mov	r0, r3
     38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rslt = BMP280_E_NULL_PTR;
     390:	f04f 33ff 	mov.w	r3, #4294967295
     394:	e7f9      	b.n	38a <bmp280_get_regs+0x2e>
     396:	f04f 33ff 	mov.w	r3, #4294967295
     39a:	e7f6      	b.n	38a <bmp280_get_regs+0x2e>
            rslt = BMP280_E_COMM_FAIL;
     39c:	f06f 0303 	mvn.w	r3, #3
     3a0:	e7f3      	b.n	38a <bmp280_get_regs+0x2e>
     3a2:	bf00      	nop
     3a4:	000002dd 	.word	0x000002dd

000003a8 <get_calib_param>:
{
     3a8:	b530      	push	{r4, r5, lr}
     3aa:	b087      	sub	sp, #28
     3ac:	4604      	mov	r4, r0
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
     3ae:	2300      	movs	r3, #0
     3b0:	9300      	str	r3, [sp, #0]
     3b2:	9301      	str	r3, [sp, #4]
     3b4:	9302      	str	r3, [sp, #8]
     3b6:	9303      	str	r3, [sp, #12]
     3b8:	9304      	str	r3, [sp, #16]
     3ba:	9305      	str	r3, [sp, #20]
    rslt = null_ptr_check(dev);
     3bc:	4b32      	ldr	r3, [pc, #200]	; (488 <get_calib_param+0xe0>)
     3be:	4798      	blx	r3
    if (rslt == BMP280_OK)
     3c0:	4603      	mov	r3, r0
     3c2:	b110      	cbz	r0, 3ca <get_calib_param+0x22>
}
     3c4:	4618      	mov	r0, r3
     3c6:	b007      	add	sp, #28
     3c8:	bd30      	pop	{r4, r5, pc}
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
     3ca:	4623      	mov	r3, r4
     3cc:	2218      	movs	r2, #24
     3ce:	4669      	mov	r1, sp
     3d0:	2088      	movs	r0, #136	; 0x88
     3d2:	4d2e      	ldr	r5, [pc, #184]	; (48c <get_calib_param+0xe4>)
     3d4:	47a8      	blx	r5
        if (rslt == BMP280_OK)
     3d6:	4603      	mov	r3, r0
     3d8:	2800      	cmp	r0, #0
     3da:	d1f3      	bne.n	3c4 <get_calib_param+0x1c>
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
     3dc:	f89d 1001 	ldrb.w	r1, [sp, #1]
     3e0:	f89d 2000 	ldrb.w	r2, [sp]
     3e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            dev->calib_param.dig_t1 =
     3e8:	8222      	strh	r2, [r4, #16]
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
     3ea:	f89d 1003 	ldrb.w	r1, [sp, #3]
     3ee:	f89d 2002 	ldrb.w	r2, [sp, #2]
     3f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            dev->calib_param.dig_t2 =
     3f6:	8262      	strh	r2, [r4, #18]
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
     3f8:	f89d 1005 	ldrb.w	r1, [sp, #5]
     3fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
     400:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            dev->calib_param.dig_t3 =
     404:	82a2      	strh	r2, [r4, #20]
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
     406:	f89d 1007 	ldrb.w	r1, [sp, #7]
     40a:	f89d 2006 	ldrb.w	r2, [sp, #6]
     40e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            dev->calib_param.dig_p1 =
     412:	82e2      	strh	r2, [r4, #22]
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
     414:	f89d 1009 	ldrb.w	r1, [sp, #9]
     418:	f89d 2008 	ldrb.w	r2, [sp, #8]
     41c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            dev->calib_param.dig_p2 =
     420:	8322      	strh	r2, [r4, #24]
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
     422:	f89d 100b 	ldrb.w	r1, [sp, #11]
     426:	f89d 200a 	ldrb.w	r2, [sp, #10]
     42a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            dev->calib_param.dig_p3 =
     42e:	8362      	strh	r2, [r4, #26]
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
     430:	f89d 100d 	ldrb.w	r1, [sp, #13]
     434:	f89d 200c 	ldrb.w	r2, [sp, #12]
     438:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            dev->calib_param.dig_p4 =
     43c:	83a2      	strh	r2, [r4, #28]
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
     43e:	f89d 100f 	ldrb.w	r1, [sp, #15]
     442:	f89d 200e 	ldrb.w	r2, [sp, #14]
     446:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            dev->calib_param.dig_p5 =
     44a:	83e2      	strh	r2, [r4, #30]
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
     44c:	f89d 1011 	ldrb.w	r1, [sp, #17]
     450:	f89d 2010 	ldrb.w	r2, [sp, #16]
     454:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            dev->calib_param.dig_p6 =
     458:	8422      	strh	r2, [r4, #32]
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
     45a:	f89d 1013 	ldrb.w	r1, [sp, #19]
     45e:	f89d 2012 	ldrb.w	r2, [sp, #18]
     462:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            dev->calib_param.dig_p7 =
     466:	8462      	strh	r2, [r4, #34]	; 0x22
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
     468:	f89d 1015 	ldrb.w	r1, [sp, #21]
     46c:	f89d 2014 	ldrb.w	r2, [sp, #20]
     470:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            dev->calib_param.dig_p8 =
     474:	84a2      	strh	r2, [r4, #36]	; 0x24
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
     476:	f89d 1017 	ldrb.w	r1, [sp, #23]
     47a:	f89d 2016 	ldrb.w	r2, [sp, #22]
     47e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            dev->calib_param.dig_p9 =
     482:	84e2      	strh	r2, [r4, #38]	; 0x26
     484:	e79e      	b.n	3c4 <get_calib_param+0x1c>
     486:	bf00      	nop
     488:	000002dd 	.word	0x000002dd
     48c:	0000035d 	.word	0x0000035d

00000490 <bmp280_set_regs>:
{
     490:	b5f0      	push	{r4, r5, r6, r7, lr}
     492:	b083      	sub	sp, #12
     494:	4605      	mov	r5, r0
     496:	460f      	mov	r7, r1
     498:	4614      	mov	r4, r2
     49a:	461e      	mov	r6, r3
    if (len > 4)
     49c:	2a04      	cmp	r2, #4
     49e:	d900      	bls.n	4a2 <bmp280_set_regs+0x12>
        len = 4;
     4a0:	2404      	movs	r4, #4
    rslt = null_ptr_check(dev);
     4a2:	4630      	mov	r0, r6
     4a4:	4b1d      	ldr	r3, [pc, #116]	; (51c <bmp280_set_regs+0x8c>)
     4a6:	4798      	blx	r3
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
     4a8:	bb48      	cbnz	r0, 4fe <bmp280_set_regs+0x6e>
     4aa:	b35d      	cbz	r5, 504 <bmp280_set_regs+0x74>
     4ac:	b36f      	cbz	r7, 50a <bmp280_set_regs+0x7a>
        if (len != 0)
     4ae:	b37c      	cbz	r4, 510 <bmp280_set_regs+0x80>
            temp_buff[0] = reg_data[0];
     4b0:	783b      	ldrb	r3, [r7, #0]
     4b2:	f88d 3000 	strb.w	r3, [sp]
            if (dev->intf == BMP280_SPI_INTF)
     4b6:	78b3      	ldrb	r3, [r6, #2]
     4b8:	b1eb      	cbz	r3, 4f6 <bmp280_set_regs+0x66>
            if (len > 1)
     4ba:	2c01      	cmp	r4, #1
     4bc:	d91d      	bls.n	4fa <bmp280_set_regs+0x6a>
                interleave_data(reg_addr, temp_buff, reg_data, len);
     4be:	4623      	mov	r3, r4
     4c0:	463a      	mov	r2, r7
     4c2:	4669      	mov	r1, sp
     4c4:	4628      	mov	r0, r5
     4c6:	4f16      	ldr	r7, [pc, #88]	; (520 <bmp280_set_regs+0x90>)
     4c8:	47b8      	blx	r7
                temp_len = ((len * 2) - 1);
     4ca:	0064      	lsls	r4, r4, #1
     4cc:	3c01      	subs	r4, #1
     4ce:	b2a3      	uxth	r3, r4
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
     4d0:	68b4      	ldr	r4, [r6, #8]
     4d2:	466a      	mov	r2, sp
     4d4:	7829      	ldrb	r1, [r5, #0]
     4d6:	7870      	ldrb	r0, [r6, #1]
     4d8:	47a0      	blx	r4
            if (rslt != BMP280_OK)
     4da:	4603      	mov	r3, r0
     4dc:	b9d8      	cbnz	r0, 516 <bmp280_set_regs+0x86>
}
     4de:	4618      	mov	r0, r3
     4e0:	b003      	add	sp, #12
     4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
     4e4:	5ca9      	ldrb	r1, [r5, r2]
     4e6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
     4ea:	54a9      	strb	r1, [r5, r2]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
     4ec:	3201      	adds	r2, #1
     4ee:	b2d2      	uxtb	r2, r2
     4f0:	4294      	cmp	r4, r2
     4f2:	d8f7      	bhi.n	4e4 <bmp280_set_regs+0x54>
     4f4:	e7e1      	b.n	4ba <bmp280_set_regs+0x2a>
     4f6:	2200      	movs	r2, #0
     4f8:	e7fa      	b.n	4f0 <bmp280_set_regs+0x60>
                temp_len = len;
     4fa:	b2a3      	uxth	r3, r4
     4fc:	e7e8      	b.n	4d0 <bmp280_set_regs+0x40>
        rslt = BMP280_E_NULL_PTR;
     4fe:	f04f 33ff 	mov.w	r3, #4294967295
     502:	e7ec      	b.n	4de <bmp280_set_regs+0x4e>
     504:	f04f 33ff 	mov.w	r3, #4294967295
     508:	e7e9      	b.n	4de <bmp280_set_regs+0x4e>
     50a:	f04f 33ff 	mov.w	r3, #4294967295
     50e:	e7e6      	b.n	4de <bmp280_set_regs+0x4e>
            rslt = BMP280_E_INVALID_LEN;
     510:	f06f 0302 	mvn.w	r3, #2
     514:	e7e3      	b.n	4de <bmp280_set_regs+0x4e>
                rslt = BMP280_E_COMM_FAIL;
     516:	f06f 0303 	mvn.w	r3, #3
     51a:	e7e0      	b.n	4de <bmp280_set_regs+0x4e>
     51c:	000002dd 	.word	0x000002dd
     520:	00000307 	.word	0x00000307

00000524 <bmp280_soft_reset>:
{
     524:	b530      	push	{r4, r5, lr}
     526:	b083      	sub	sp, #12
     528:	4605      	mov	r5, r0
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
     52a:	23e0      	movs	r3, #224	; 0xe0
     52c:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
     530:	23b6      	movs	r3, #182	; 0xb6
     532:	f88d 3006 	strb.w	r3, [sp, #6]
    rslt = null_ptr_check(dev);
     536:	4b0a      	ldr	r3, [pc, #40]	; (560 <bmp280_soft_reset+0x3c>)
     538:	4798      	blx	r3
    if (rslt == BMP280_OK)
     53a:	4604      	mov	r4, r0
     53c:	b110      	cbz	r0, 544 <bmp280_soft_reset+0x20>
}
     53e:	4620      	mov	r0, r4
     540:	b003      	add	sp, #12
     542:	bd30      	pop	{r4, r5, pc}
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
     544:	462b      	mov	r3, r5
     546:	2201      	movs	r2, #1
     548:	f10d 0106 	add.w	r1, sp, #6
     54c:	f10d 0007 	add.w	r0, sp, #7
     550:	4c04      	ldr	r4, [pc, #16]	; (564 <bmp280_soft_reset+0x40>)
     552:	47a0      	blx	r4
     554:	4604      	mov	r4, r0
        dev->delay_ms(2);
     556:	68eb      	ldr	r3, [r5, #12]
     558:	2002      	movs	r0, #2
     55a:	4798      	blx	r3
     55c:	e7ef      	b.n	53e <bmp280_soft_reset+0x1a>
     55e:	bf00      	nop
     560:	000002dd 	.word	0x000002dd
     564:	00000491 	.word	0x00000491

00000568 <conf_sensor>:
{
     568:	b5f0      	push	{r4, r5, r6, r7, lr}
     56a:	b083      	sub	sp, #12
     56c:	4606      	mov	r6, r0
     56e:	460d      	mov	r5, r1
     570:	4614      	mov	r4, r2
    uint8_t temp[2] = { 0, 0 };
     572:	2300      	movs	r3, #0
     574:	f88d 3004 	strb.w	r3, [sp, #4]
     578:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
     57c:	4b35      	ldr	r3, [pc, #212]	; (654 <conf_sensor+0xec>)
     57e:	881b      	ldrh	r3, [r3, #0]
     580:	f8ad 3000 	strh.w	r3, [sp]
    rslt = null_ptr_check(dev);
     584:	4610      	mov	r0, r2
     586:	4b34      	ldr	r3, [pc, #208]	; (658 <conf_sensor+0xf0>)
     588:	4798      	blx	r3
    if ((rslt == BMP280_OK) && (conf != NULL))
     58a:	2800      	cmp	r0, #0
     58c:	d15b      	bne.n	646 <conf_sensor+0xde>
     58e:	2d00      	cmp	r5, #0
     590:	d05c      	beq.n	64c <conf_sensor+0xe4>
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
     592:	4623      	mov	r3, r4
     594:	2202      	movs	r2, #2
     596:	a901      	add	r1, sp, #4
     598:	20f4      	movs	r0, #244	; 0xf4
     59a:	4f30      	ldr	r7, [pc, #192]	; (65c <conf_sensor+0xf4>)
     59c:	47b8      	blx	r7
        if (rslt == BMP280_OK)
     59e:	4603      	mov	r3, r0
     5a0:	b110      	cbz	r0, 5a8 <conf_sensor+0x40>
}
     5a2:	4618      	mov	r0, r3
     5a4:	b003      	add	sp, #12
     5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rslt = bmp280_soft_reset(dev);
     5a8:	4620      	mov	r0, r4
     5aa:	4b2d      	ldr	r3, [pc, #180]	; (660 <conf_sensor+0xf8>)
     5ac:	4798      	blx	r3
            if (rslt == BMP280_OK)
     5ae:	4603      	mov	r3, r0
     5b0:	2800      	cmp	r0, #0
     5b2:	d1f6      	bne.n	5a2 <conf_sensor+0x3a>
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
     5b4:	f99d 3004 	ldrsb.w	r3, [sp, #4]
     5b8:	f003 031f 	and.w	r3, r3, #31
     5bc:	782a      	ldrb	r2, [r5, #0]
     5be:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
     5c2:	b25b      	sxtb	r3, r3
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
     5c4:	f023 031c 	bic.w	r3, r3, #28
     5c8:	786a      	ldrb	r2, [r5, #1]
     5ca:	0092      	lsls	r2, r2, #2
     5cc:	f002 021c 	and.w	r2, r2, #28
     5d0:	4313      	orrs	r3, r2
     5d2:	f88d 3004 	strb.w	r3, [sp, #4]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
     5d6:	f99d 3005 	ldrsb.w	r3, [sp, #5]
     5da:	f003 031f 	and.w	r3, r3, #31
     5de:	78aa      	ldrb	r2, [r5, #2]
     5e0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
     5e4:	b25b      	sxtb	r3, r3
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
     5e6:	f023 031c 	bic.w	r3, r3, #28
     5ea:	78ea      	ldrb	r2, [r5, #3]
     5ec:	0092      	lsls	r2, r2, #2
     5ee:	f002 021c 	and.w	r2, r2, #28
     5f2:	4313      	orrs	r3, r2
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
     5f4:	f023 0301 	bic.w	r3, r3, #1
     5f8:	f995 2004 	ldrsb.w	r2, [r5, #4]
     5fc:	f002 0201 	and.w	r2, r2, #1
     600:	4313      	orrs	r3, r2
     602:	f88d 3005 	strb.w	r3, [sp, #5]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
     606:	4623      	mov	r3, r4
     608:	2202      	movs	r2, #2
     60a:	a901      	add	r1, sp, #4
     60c:	4668      	mov	r0, sp
     60e:	4f15      	ldr	r7, [pc, #84]	; (664 <conf_sensor+0xfc>)
     610:	47b8      	blx	r7
                if (rslt == BMP280_OK)
     612:	4603      	mov	r3, r0
     614:	2800      	cmp	r0, #0
     616:	d1c4      	bne.n	5a2 <conf_sensor+0x3a>
                    dev->conf = *conf;
     618:	6828      	ldr	r0, [r5, #0]
     61a:	62e0      	str	r0, [r4, #44]	; 0x2c
     61c:	792a      	ldrb	r2, [r5, #4]
     61e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
                    if (mode != BMP280_SLEEP_MODE)
     622:	2e00      	cmp	r6, #0
     624:	d0bd      	beq.n	5a2 <conf_sensor+0x3a>
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
     626:	f99d 3004 	ldrsb.w	r3, [sp, #4]
     62a:	f023 0303 	bic.w	r3, r3, #3
     62e:	f006 0603 	and.w	r6, r6, #3
     632:	431e      	orrs	r6, r3
     634:	a902      	add	r1, sp, #8
     636:	f801 6d04 	strb.w	r6, [r1, #-4]!
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
     63a:	4623      	mov	r3, r4
     63c:	2201      	movs	r2, #1
     63e:	4668      	mov	r0, sp
     640:	47b8      	blx	r7
     642:	4603      	mov	r3, r0
     644:	e7ad      	b.n	5a2 <conf_sensor+0x3a>
        rslt = BMP280_E_NULL_PTR;
     646:	f04f 33ff 	mov.w	r3, #4294967295
     64a:	e7aa      	b.n	5a2 <conf_sensor+0x3a>
     64c:	f04f 33ff 	mov.w	r3, #4294967295
     650:	e7a7      	b.n	5a2 <conf_sensor+0x3a>
     652:	bf00      	nop
     654:	00005f10 	.word	0x00005f10
     658:	000002dd 	.word	0x000002dd
     65c:	0000035d 	.word	0x0000035d
     660:	00000525 	.word	0x00000525
     664:	00000491 	.word	0x00000491

00000668 <bmp280_init>:
{
     668:	b570      	push	{r4, r5, r6, lr}
     66a:	4606      	mov	r6, r0
    rslt = null_ptr_check(dev);
     66c:	4b1a      	ldr	r3, [pc, #104]	; (6d8 <bmp280_init+0x70>)
     66e:	4798      	blx	r3
    if (rslt == BMP280_OK)
     670:	4605      	mov	r5, r0
     672:	bb78      	cbnz	r0, 6d4 <bmp280_init+0x6c>
     674:	2405      	movs	r4, #5
     676:	e009      	b.n	68c <bmp280_init+0x24>
                    rslt = get_calib_param(dev);
     678:	4630      	mov	r0, r6
     67a:	4b18      	ldr	r3, [pc, #96]	; (6dc <bmp280_init+0x74>)
     67c:	4798      	blx	r3
     67e:	4605      	mov	r5, r0
     680:	e019      	b.n	6b6 <bmp280_init+0x4e>
            dev->delay_ms(10);
     682:	68f3      	ldr	r3, [r6, #12]
     684:	200a      	movs	r0, #10
     686:	4798      	blx	r3
            --try_count;
     688:	3c01      	subs	r4, #1
     68a:	b2e4      	uxtb	r4, r4
        while (try_count)
     68c:	b19c      	cbz	r4, 6b6 <bmp280_init+0x4e>
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
     68e:	4633      	mov	r3, r6
     690:	2201      	movs	r2, #1
     692:	4631      	mov	r1, r6
     694:	20d0      	movs	r0, #208	; 0xd0
     696:	4d12      	ldr	r5, [pc, #72]	; (6e0 <bmp280_init+0x78>)
     698:	47a8      	blx	r5
			a = dev->chip_id;
     69a:	7833      	ldrb	r3, [r6, #0]
            if ((rslt == BMP280_OK) &&
     69c:	4605      	mov	r5, r0
     69e:	2800      	cmp	r0, #0
     6a0:	d1ef      	bne.n	682 <bmp280_init+0x1a>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
     6a2:	3b56      	subs	r3, #86	; 0x56
     6a4:	b2db      	uxtb	r3, r3
            if ((rslt == BMP280_OK) &&
     6a6:	2b02      	cmp	r3, #2
     6a8:	d8eb      	bhi.n	682 <bmp280_init+0x1a>
                rslt = bmp280_soft_reset(dev);
     6aa:	4630      	mov	r0, r6
     6ac:	4b0d      	ldr	r3, [pc, #52]	; (6e4 <bmp280_init+0x7c>)
     6ae:	4798      	blx	r3
                if (rslt == BMP280_OK)
     6b0:	4605      	mov	r5, r0
     6b2:	2800      	cmp	r0, #0
     6b4:	d0e0      	beq.n	678 <bmp280_init+0x10>
        if (!try_count)
     6b6:	b90c      	cbnz	r4, 6bc <bmp280_init+0x54>
            rslt = BMP280_E_DEV_NOT_FOUND;
     6b8:	f06f 0501 	mvn.w	r5, #1
        if (rslt == BMP280_OK)
     6bc:	b955      	cbnz	r5, 6d4 <bmp280_init+0x6c>
            dev->conf.filter = BMP280_FILTER_OFF;
     6be:	2300      	movs	r3, #0
     6c0:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
     6c4:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
     6c8:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
     6cc:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
     6d0:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
     6d4:	4628      	mov	r0, r5
     6d6:	bd70      	pop	{r4, r5, r6, pc}
     6d8:	000002dd 	.word	0x000002dd
     6dc:	000003a9 	.word	0x000003a9
     6e0:	0000035d 	.word	0x0000035d
     6e4:	00000525 	.word	0x00000525

000006e8 <bmp280_get_config>:
{
     6e8:	b570      	push	{r4, r5, r6, lr}
     6ea:	b082      	sub	sp, #8
     6ec:	4604      	mov	r4, r0
     6ee:	460d      	mov	r5, r1
    uint8_t temp[2] = { 0, 0 };
     6f0:	2300      	movs	r3, #0
     6f2:	f88d 3004 	strb.w	r3, [sp, #4]
     6f6:	f88d 3005 	strb.w	r3, [sp, #5]
    rslt = null_ptr_check(dev);
     6fa:	4608      	mov	r0, r1
     6fc:	4b15      	ldr	r3, [pc, #84]	; (754 <bmp280_get_config+0x6c>)
     6fe:	4798      	blx	r3
    if ((rslt == BMP280_OK) && (conf != NULL))
     700:	bb08      	cbnz	r0, 746 <bmp280_get_config+0x5e>
     702:	b31c      	cbz	r4, 74c <bmp280_get_config+0x64>
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
     704:	462b      	mov	r3, r5
     706:	2202      	movs	r2, #2
     708:	a901      	add	r1, sp, #4
     70a:	20f4      	movs	r0, #244	; 0xf4
     70c:	4e12      	ldr	r6, [pc, #72]	; (758 <bmp280_get_config+0x70>)
     70e:	47b0      	blx	r6
        if (rslt == BMP280_OK)
     710:	4602      	mov	r2, r0
     712:	b9a8      	cbnz	r0, 740 <bmp280_get_config+0x58>
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
     714:	f89d 3004 	ldrb.w	r3, [sp, #4]
     718:	0959      	lsrs	r1, r3, #5
     71a:	7021      	strb	r1, [r4, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
     71c:	f3c3 0382 	ubfx	r3, r3, #2, #3
     720:	7063      	strb	r3, [r4, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
     722:	f89d 3005 	ldrb.w	r3, [sp, #5]
     726:	0959      	lsrs	r1, r3, #5
     728:	70a1      	strb	r1, [r4, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
     72a:	f3c3 0182 	ubfx	r1, r3, #2, #3
     72e:	70e1      	strb	r1, [r4, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
     730:	f003 0301 	and.w	r3, r3, #1
     734:	7123      	strb	r3, [r4, #4]
            dev->conf = *conf;
     736:	6820      	ldr	r0, [r4, #0]
     738:	62e8      	str	r0, [r5, #44]	; 0x2c
     73a:	7923      	ldrb	r3, [r4, #4]
     73c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
     740:	4610      	mov	r0, r2
     742:	b002      	add	sp, #8
     744:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BMP280_E_NULL_PTR;
     746:	f04f 32ff 	mov.w	r2, #4294967295
     74a:	e7f9      	b.n	740 <bmp280_get_config+0x58>
     74c:	f04f 32ff 	mov.w	r2, #4294967295
     750:	e7f6      	b.n	740 <bmp280_get_config+0x58>
     752:	bf00      	nop
     754:	000002dd 	.word	0x000002dd
     758:	0000035d 	.word	0x0000035d

0000075c <bmp280_set_power_mode>:
{
     75c:	b538      	push	{r3, r4, r5, lr}
     75e:	4605      	mov	r5, r0
     760:	460c      	mov	r4, r1
    rslt = null_ptr_check(dev);
     762:	4608      	mov	r0, r1
     764:	4b06      	ldr	r3, [pc, #24]	; (780 <bmp280_set_power_mode+0x24>)
     766:	4798      	blx	r3
    if (rslt == BMP280_OK)
     768:	4603      	mov	r3, r0
     76a:	b108      	cbz	r0, 770 <bmp280_set_power_mode+0x14>
}
     76c:	4618      	mov	r0, r3
     76e:	bd38      	pop	{r3, r4, r5, pc}
        rslt = conf_sensor(mode, &dev->conf, dev);
     770:	4622      	mov	r2, r4
     772:	f104 012c 	add.w	r1, r4, #44	; 0x2c
     776:	4628      	mov	r0, r5
     778:	4b02      	ldr	r3, [pc, #8]	; (784 <bmp280_set_power_mode+0x28>)
     77a:	4798      	blx	r3
     77c:	4603      	mov	r3, r0
     77e:	e7f5      	b.n	76c <bmp280_set_power_mode+0x10>
     780:	000002dd 	.word	0x000002dd
     784:	00000569 	.word	0x00000569

00000788 <bmp280_get_uncomp_data>:
{
     788:	b530      	push	{r4, r5, lr}
     78a:	b083      	sub	sp, #12
     78c:	4604      	mov	r4, r0
     78e:	460d      	mov	r5, r1
    uint8_t temp[6] = { 0 };
     790:	2300      	movs	r3, #0
     792:	9300      	str	r3, [sp, #0]
     794:	f8ad 3004 	strh.w	r3, [sp, #4]
    rslt = null_ptr_check(dev);
     798:	4608      	mov	r0, r1
     79a:	4b18      	ldr	r3, [pc, #96]	; (7fc <bmp280_get_uncomp_data+0x74>)
     79c:	4798      	blx	r3
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
     79e:	bb18      	cbnz	r0, 7e8 <bmp280_get_uncomp_data+0x60>
     7a0:	b32c      	cbz	r4, 7ee <bmp280_get_uncomp_data+0x66>
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
     7a2:	462b      	mov	r3, r5
     7a4:	2206      	movs	r2, #6
     7a6:	4669      	mov	r1, sp
     7a8:	20f7      	movs	r0, #247	; 0xf7
     7aa:	4d15      	ldr	r5, [pc, #84]	; (800 <bmp280_get_uncomp_data+0x78>)
     7ac:	47a8      	blx	r5
        if (rslt == BMP280_OK)
     7ae:	bb08      	cbnz	r0, 7f4 <bmp280_get_uncomp_data+0x6c>
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
     7b0:	f89d 3000 	ldrb.w	r3, [sp]
     7b4:	f89d 1001 	ldrb.w	r1, [sp, #1]
     7b8:	0109      	lsls	r1, r1, #4
     7ba:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
     7be:	f89d 3002 	ldrb.w	r3, [sp, #2]
     7c2:	ea41 1113 	orr.w	r1, r1, r3, lsr #4
            uncomp_data->uncomp_press =
     7c6:	6061      	str	r1, [r4, #4]
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
     7c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
     7cc:	f89d 0004 	ldrb.w	r0, [sp, #4]
     7d0:	0100      	lsls	r0, r0, #4
     7d2:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
     7d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
     7da:	ea40 1013 	orr.w	r0, r0, r3, lsr #4
            uncomp_data->uncomp_temp =
     7de:	6020      	str	r0, [r4, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
     7e0:	4b08      	ldr	r3, [pc, #32]	; (804 <bmp280_get_uncomp_data+0x7c>)
     7e2:	4798      	blx	r3
}
     7e4:	b003      	add	sp, #12
     7e6:	bd30      	pop	{r4, r5, pc}
        rslt = BMP280_E_NULL_PTR;
     7e8:	f04f 30ff 	mov.w	r0, #4294967295
     7ec:	e7fa      	b.n	7e4 <bmp280_get_uncomp_data+0x5c>
     7ee:	f04f 30ff 	mov.w	r0, #4294967295
     7f2:	e7f7      	b.n	7e4 <bmp280_get_uncomp_data+0x5c>
            rslt = BMP280_E_UNCOMP_DATA_CALC;
     7f4:	f06f 000c 	mvn.w	r0, #12
     7f8:	e7f4      	b.n	7e4 <bmp280_get_uncomp_data+0x5c>
     7fa:	bf00      	nop
     7fc:	000002dd 	.word	0x000002dd
     800:	0000035d 	.word	0x0000035d
     804:	00000329 	.word	0x00000329

00000808 <bmp280_get_comp_temp_32bit>:
{
     808:	b570      	push	{r4, r5, r6, lr}
     80a:	4604      	mov	r4, r0
     80c:	460e      	mov	r6, r1
     80e:	4615      	mov	r5, r2
    rslt = null_ptr_check(dev);
     810:	4610      	mov	r0, r2
     812:	4b21      	ldr	r3, [pc, #132]	; (898 <bmp280_get_comp_temp_32bit+0x90>)
     814:	4798      	blx	r3
    if (rslt == BMP280_OK)
     816:	bbd0      	cbnz	r0, 88e <bmp280_get_comp_temp_32bit+0x86>
     818:	4601      	mov	r1, r0
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
     81a:	4630      	mov	r0, r6
     81c:	2e00      	cmp	r6, #0
     81e:	db25      	blt.n	86c <bmp280_get_comp_temp_32bit+0x64>
     820:	8a2a      	ldrh	r2, [r5, #16]
     822:	0053      	lsls	r3, r2, #1
     824:	ebc3 00e0 	rsb	r0, r3, r0, asr #3
     828:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
     82c:	fb03 f300 	mul.w	r3, r3, r0
        var1 =
     830:	2b00      	cmp	r3, #0
     832:	db1d      	blt.n	870 <bmp280_get_comp_temp_32bit+0x68>
     834:	12db      	asrs	r3, r3, #11
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
     836:	4630      	mov	r0, r6
     838:	2e00      	cmp	r6, #0
     83a:	db1c      	blt.n	876 <bmp280_get_comp_temp_32bit+0x6e>
     83c:	ebc2 1220 	rsb	r2, r2, r0, asr #4
     840:	fb02 f202 	mul.w	r2, r2, r2
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
     844:	2a00      	cmp	r2, #0
     846:	db19      	blt.n	87c <bmp280_get_comp_temp_32bit+0x74>
     848:	1312      	asrs	r2, r2, #12
             ((int32_t) dev->calib_param.dig_t3)) /
     84a:	f9b5 0014 	ldrsh.w	r0, [r5, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
     84e:	fb00 f202 	mul.w	r2, r0, r2
        var2 =
     852:	2a00      	cmp	r2, #0
     854:	db15      	blt.n	882 <bmp280_get_comp_temp_32bit+0x7a>
        dev->calib_param.t_fine = var1 + var2;
     856:	eb03 33a2 	add.w	r3, r3, r2, asr #14
     85a:	62ab      	str	r3, [r5, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
     85c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     860:	3380      	adds	r3, #128	; 0x80
     862:	d412      	bmi.n	88a <bmp280_get_comp_temp_32bit+0x82>
     864:	121b      	asrs	r3, r3, #8
     866:	6023      	str	r3, [r4, #0]
}
     868:	4608      	mov	r0, r1
     86a:	bd70      	pop	{r4, r5, r6, pc}
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
     86c:	1df0      	adds	r0, r6, #7
     86e:	e7d7      	b.n	820 <bmp280_get_comp_temp_32bit+0x18>
        var1 =
     870:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
     874:	e7de      	b.n	834 <bmp280_get_comp_temp_32bit+0x2c>
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
     876:	f106 000f 	add.w	r0, r6, #15
     87a:	e7df      	b.n	83c <bmp280_get_comp_temp_32bit+0x34>
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
     87c:	f602 72ff 	addw	r2, r2, #4095	; 0xfff
     880:	e7e2      	b.n	848 <bmp280_get_comp_temp_32bit+0x40>
        var2 =
     882:	f502 527f 	add.w	r2, r2, #16320	; 0x3fc0
     886:	323f      	adds	r2, #63	; 0x3f
     888:	e7e5      	b.n	856 <bmp280_get_comp_temp_32bit+0x4e>
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
     88a:	33ff      	adds	r3, #255	; 0xff
     88c:	e7ea      	b.n	864 <bmp280_get_comp_temp_32bit+0x5c>
        *comp_temp = 0;
     88e:	2300      	movs	r3, #0
     890:	6023      	str	r3, [r4, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
     892:	f06f 010d 	mvn.w	r1, #13
     896:	e7e7      	b.n	868 <bmp280_get_comp_temp_32bit+0x60>
     898:	000002dd 	.word	0x000002dd

0000089c <bmp280_get_comp_pres_32bit>:
{
     89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     89e:	4604      	mov	r4, r0
     8a0:	460f      	mov	r7, r1
     8a2:	4615      	mov	r5, r2
    rslt = null_ptr_check(dev);
     8a4:	4610      	mov	r0, r2
     8a6:	4b52      	ldr	r3, [pc, #328]	; (9f0 <bmp280_get_comp_pres_32bit+0x154>)
     8a8:	4798      	blx	r3
    if (rslt == BMP280_OK)
     8aa:	4606      	mov	r6, r0
     8ac:	2800      	cmp	r0, #0
     8ae:	d170      	bne.n	992 <bmp280_get_comp_pres_32bit+0xf6>
        var1 = (((int32_t) dev->calib_param.t_fine) / 2) - (int32_t) 64000;
     8b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
     8b2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
     8b6:	105b      	asrs	r3, r3, #1
     8b8:	f5a3 427a 	sub.w	r2, r3, #64000	; 0xfa00
        var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t) dev->calib_param.dig_p6);
     8bc:	4611      	mov	r1, r2
     8be:	2a00      	cmp	r2, #0
     8c0:	db69      	blt.n	996 <bmp280_get_comp_pres_32bit+0xfa>
     8c2:	1089      	asrs	r1, r1, #2
     8c4:	fb01 f101 	mul.w	r1, r1, r1
     8c8:	4608      	mov	r0, r1
     8ca:	2900      	cmp	r1, #0
     8cc:	db65      	blt.n	99a <bmp280_get_comp_pres_32bit+0xfe>
     8ce:	12c0      	asrs	r0, r0, #11
     8d0:	f9b5 e020 	ldrsh.w	lr, [r5, #32]
        var2 = var2 + ((var1 * ((int32_t) dev->calib_param.dig_p5)) * 2);
     8d4:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
     8d8:	fb03 f302 	mul.w	r3, r3, r2
     8dc:	005b      	lsls	r3, r3, #1
     8de:	fb0e 3300 	mla	r3, lr, r0, r3
        var2 = (var2 / 4) + (((int32_t) dev->calib_param.dig_p4) * 65536);
     8e2:	2b00      	cmp	r3, #0
     8e4:	db5c      	blt.n	9a0 <bmp280_get_comp_pres_32bit+0x104>
     8e6:	f9b5 001c 	ldrsh.w	r0, [r5, #28]
     8ea:	0400      	lsls	r0, r0, #16
     8ec:	eb00 00a3 	add.w	r0, r0, r3, asr #2
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
     8f0:	f9b5 c01a 	ldrsh.w	ip, [r5, #26]
     8f4:	468e      	mov	lr, r1
     8f6:	2900      	cmp	r1, #0
     8f8:	db54      	blt.n	9a4 <bmp280_get_comp_pres_32bit+0x108>
     8fa:	ea4f 336e 	mov.w	r3, lr, asr #13
     8fe:	fb03 f10c 	mul.w	r1, r3, ip
     902:	2900      	cmp	r1, #0
     904:	db53      	blt.n	9ae <bmp280_get_comp_pres_32bit+0x112>
             ((((int32_t) dev->calib_param.dig_p2) * var1) / 2)) / 262144;
     906:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
     90a:	fb03 f302 	mul.w	r3, r3, r2
     90e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
     912:	105b      	asrs	r3, r3, #1
        var1 =
     914:	eb13 03e1 	adds.w	r3, r3, r1, asr #3
     918:	d44b      	bmi.n	9b2 <bmp280_get_comp_pres_32bit+0x116>
     91a:	149b      	asrs	r3, r3, #18
        var1 = ((((32768 + var1)) * ((int32_t) dev->calib_param.dig_p1)) / 32768);
     91c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
     920:	8aea      	ldrh	r2, [r5, #22]
     922:	fb02 f303 	mul.w	r3, r2, r3
     926:	2b00      	cmp	r3, #0
     928:	db48      	blt.n	9bc <bmp280_get_comp_pres_32bit+0x120>
     92a:	13db      	asrs	r3, r3, #15
        *comp_pres = (uint32_t)(((int32_t)(1048576 - uncomp_pres) - (var2 / 4096)) * 3125);
     92c:	4602      	mov	r2, r0
     92e:	2800      	cmp	r0, #0
     930:	db48      	blt.n	9c4 <bmp280_get_comp_pres_32bit+0x128>
     932:	1312      	asrs	r2, r2, #12
     934:	4252      	negs	r2, r2
     936:	1bd2      	subs	r2, r2, r7
     938:	f640 4735 	movw	r7, #3125	; 0xc35
     93c:	fb07 f702 	mul.w	r7, r7, r2
     940:	f107 4743 	add.w	r7, r7, #3271557120	; 0xc3000000
     944:	f507 07a0 	add.w	r7, r7, #5242880	; 0x500000
     948:	6027      	str	r7, [r4, #0]
        if (var1 != 0)
     94a:	2b00      	cmp	r3, #0
     94c:	d04b      	beq.n	9e6 <bmp280_get_comp_pres_32bit+0x14a>
            if (*comp_pres < 0x80000000)
     94e:	2f00      	cmp	r7, #0
     950:	db3b      	blt.n	9ca <bmp280_get_comp_pres_32bit+0x12e>
                *comp_pres = (*comp_pres << 1) / ((uint32_t) var1);
     952:	007f      	lsls	r7, r7, #1
     954:	fbb7 f7f3 	udiv	r7, r7, r3
     958:	6027      	str	r7, [r4, #0]
            var1 = (((int32_t) dev->calib_param.dig_p9) * ((int32_t) (((*comp_pres / 8) * (*comp_pres / 8)) / 8192))) /
     95a:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
     95e:	6821      	ldr	r1, [r4, #0]
     960:	08ca      	lsrs	r2, r1, #3
     962:	fb02 f202 	mul.w	r2, r2, r2
     966:	0b52      	lsrs	r2, r2, #13
     968:	fb02 f303 	mul.w	r3, r2, r3
     96c:	2b00      	cmp	r3, #0
     96e:	db31      	blt.n	9d4 <bmp280_get_comp_pres_32bit+0x138>
     970:	131b      	asrs	r3, r3, #12
            var2 = (((int32_t) (*comp_pres / 4)) * ((int32_t) dev->calib_param.dig_p8)) / 8192;
     972:	088a      	lsrs	r2, r1, #2
     974:	f9b5 0024 	ldrsh.w	r0, [r5, #36]	; 0x24
     978:	fb00 f202 	mul.w	r2, r0, r2
     97c:	2a00      	cmp	r2, #0
     97e:	db2c      	blt.n	9da <bmp280_get_comp_pres_32bit+0x13e>
            *comp_pres = (uint32_t) ((int32_t) *comp_pres + ((var1 + var2 + dev->calib_param.dig_p7) / 16));
     980:	eb03 3362 	add.w	r3, r3, r2, asr #13
     984:	f9b5 2022 	ldrsh.w	r2, [r5, #34]	; 0x22
     988:	189b      	adds	r3, r3, r2
     98a:	d42a      	bmi.n	9e2 <bmp280_get_comp_pres_32bit+0x146>
     98c:	eb01 1323 	add.w	r3, r1, r3, asr #4
     990:	6023      	str	r3, [r4, #0]
}
     992:	4630      	mov	r0, r6
     994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t) dev->calib_param.dig_p6);
     996:	1cd1      	adds	r1, r2, #3
     998:	e793      	b.n	8c2 <bmp280_get_comp_pres_32bit+0x26>
     99a:	f201 70ff 	addw	r0, r1, #2047	; 0x7ff
     99e:	e796      	b.n	8ce <bmp280_get_comp_pres_32bit+0x32>
        var2 = (var2 / 4) + (((int32_t) dev->calib_param.dig_p4) * 65536);
     9a0:	3303      	adds	r3, #3
     9a2:	e7a0      	b.n	8e6 <bmp280_get_comp_pres_32bit+0x4a>
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
     9a4:	f501 5eff 	add.w	lr, r1, #8160	; 0x1fe0
     9a8:	f10e 0e1f 	add.w	lr, lr, #31
     9ac:	e7a5      	b.n	8fa <bmp280_get_comp_pres_32bit+0x5e>
     9ae:	3107      	adds	r1, #7
     9b0:	e7a9      	b.n	906 <bmp280_get_comp_pres_32bit+0x6a>
        var1 =
     9b2:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
     9b6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
     9ba:	e7ae      	b.n	91a <bmp280_get_comp_pres_32bit+0x7e>
        var1 = ((((32768 + var1)) * ((int32_t) dev->calib_param.dig_p1)) / 32768);
     9bc:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
     9c0:	337f      	adds	r3, #127	; 0x7f
     9c2:	e7b2      	b.n	92a <bmp280_get_comp_pres_32bit+0x8e>
        *comp_pres = (uint32_t)(((int32_t)(1048576 - uncomp_pres) - (var2 / 4096)) * 3125);
     9c4:	f600 72ff 	addw	r2, r0, #4095	; 0xfff
     9c8:	e7b3      	b.n	932 <bmp280_get_comp_pres_32bit+0x96>
                *comp_pres = (*comp_pres / (uint32_t) var1) * 2;
     9ca:	fbb7 f7f3 	udiv	r7, r7, r3
     9ce:	007f      	lsls	r7, r7, #1
     9d0:	6027      	str	r7, [r4, #0]
     9d2:	e7c2      	b.n	95a <bmp280_get_comp_pres_32bit+0xbe>
            var1 = (((int32_t) dev->calib_param.dig_p9) * ((int32_t) (((*comp_pres / 8) * (*comp_pres / 8)) / 8192))) /
     9d4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
     9d8:	e7ca      	b.n	970 <bmp280_get_comp_pres_32bit+0xd4>
            var2 = (((int32_t) (*comp_pres / 4)) * ((int32_t) dev->calib_param.dig_p8)) / 8192;
     9da:	f502 52ff 	add.w	r2, r2, #8160	; 0x1fe0
     9de:	321f      	adds	r2, #31
     9e0:	e7ce      	b.n	980 <bmp280_get_comp_pres_32bit+0xe4>
            *comp_pres = (uint32_t) ((int32_t) *comp_pres + ((var1 + var2 + dev->calib_param.dig_p7) / 16));
     9e2:	330f      	adds	r3, #15
     9e4:	e7d2      	b.n	98c <bmp280_get_comp_pres_32bit+0xf0>
            *comp_pres = 0;
     9e6:	2300      	movs	r3, #0
     9e8:	6023      	str	r3, [r4, #0]
            rslt = BMP280_E_32BIT_COMP_PRESS;
     9ea:	f06f 060e 	mvn.w	r6, #14
     9ee:	e7d0      	b.n	992 <bmp280_get_comp_pres_32bit+0xf6>
     9f0:	000002dd 	.word	0x000002dd

000009f4 <bmp280_get_comp_pres_64bit>:
{
     9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9f8:	b083      	sub	sp, #12
     9fa:	4605      	mov	r5, r0
     9fc:	9101      	str	r1, [sp, #4]
     9fe:	4614      	mov	r4, r2
    rslt = null_ptr_check(dev);
     a00:	4610      	mov	r0, r2
     a02:	4b8f      	ldr	r3, [pc, #572]	; (c40 <bmp280_get_comp_pres_64bit+0x24c>)
     a04:	4798      	blx	r3
    if (rslt == BMP280_OK)
     a06:	9000      	str	r0, [sp, #0]
     a08:	2800      	cmp	r0, #0
     a0a:	f040 80eb 	bne.w	be4 <bmp280_get_comp_pres_64bit+0x1f0>
        var1 = ((int64_t) (dev->calib_param.t_fine)) - 128000;
     a0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     a10:	17d3      	asrs	r3, r2, #31
     a12:	f5b2 32fa 	subs.w	r2, r2, #128000	; 0x1f400
     a16:	f143 33ff 	adc.w	r3, r3, #4294967295
        var2 = var1 * var1 * (int64_t) dev->calib_param.dig_p6;
     a1a:	fb02 f103 	mul.w	r1, r2, r3
     a1e:	fba2 6702 	umull	r6, r7, r2, r2
     a22:	eb07 0741 	add.w	r7, r7, r1, lsl #1
     a26:	f9b4 a020 	ldrsh.w	sl, [r4, #32]
     a2a:	ea4f 7bea 	mov.w	fp, sl, asr #31
     a2e:	fb06 f10b 	mul.w	r1, r6, fp
     a32:	fb0a 1107 	mla	r1, sl, r7, r1
     a36:	fba6 ab0a 	umull	sl, fp, r6, sl
     a3a:	448b      	add	fp, r1
        var2 = var2 + ((var1 * (int64_t) dev->calib_param.dig_p5) * 131072);
     a3c:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
     a40:	17c1      	asrs	r1, r0, #31
     a42:	fb02 fe01 	mul.w	lr, r2, r1
     a46:	fb00 ee03 	mla	lr, r0, r3, lr
     a4a:	fba2 0100 	umull	r0, r1, r2, r0
     a4e:	4471      	add	r1, lr
     a50:	ea4f 4941 	mov.w	r9, r1, lsl #17
     a54:	ea49 39d0 	orr.w	r9, r9, r0, lsr #15
     a58:	ea4f 4840 	mov.w	r8, r0, lsl #17
     a5c:	eb1a 0a08 	adds.w	sl, sl, r8
     a60:	eb4b 0b09 	adc.w	fp, fp, r9
        var2 = var2 + (((int64_t) dev->calib_param.dig_p4) * 34359738368);
     a64:	f9b4 001c 	ldrsh.w	r0, [r4, #28]
     a68:	f04f 0800 	mov.w	r8, #0
     a6c:	ea4f 09c0 	mov.w	r9, r0, lsl #3
     a70:	eb18 080a 	adds.w	r8, r8, sl
     a74:	eb49 090b 	adc.w	r9, r9, fp
        var1 = ((var1 * var1 * (int64_t) dev->calib_param.dig_p3) / 256) +
     a78:	f9b4 001a 	ldrsh.w	r0, [r4, #26]
     a7c:	17c1      	asrs	r1, r0, #31
     a7e:	fb06 f101 	mul.w	r1, r6, r1
     a82:	fb00 1107 	mla	r1, r0, r7, r1
     a86:	fba6 6700 	umull	r6, r7, r6, r0
     a8a:	440f      	add	r7, r1
     a8c:	46b2      	mov	sl, r6
     a8e:	46bb      	mov	fp, r7
     a90:	2e00      	cmp	r6, #0
     a92:	f177 0100 	sbcs.w	r1, r7, #0
     a96:	f2c0 80a9 	blt.w	bec <bmp280_get_comp_pres_64bit+0x1f8>
     a9a:	ea4f 261a 	mov.w	r6, sl, lsr #8
     a9e:	ea46 600b 	orr.w	r0, r6, fp, lsl #24
     aa2:	ea4f 212b 	mov.w	r1, fp, asr #8
               ((var1 * (int64_t) dev->calib_param.dig_p2) * 4096);
     aa6:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
     aaa:	17f7      	asrs	r7, r6, #31
     aac:	fb02 f707 	mul.w	r7, r2, r7
     ab0:	fb06 7703 	mla	r7, r6, r3, r7
     ab4:	fba2 2306 	umull	r2, r3, r2, r6
     ab8:	443b      	add	r3, r7
     aba:	031f      	lsls	r7, r3, #12
     abc:	ea47 5712 	orr.w	r7, r7, r2, lsr #20
     ac0:	0316      	lsls	r6, r2, #12
        var1 = ((var1 * var1 * (int64_t) dev->calib_param.dig_p3) / 256) +
     ac2:	1980      	adds	r0, r0, r6
     ac4:	4179      	adcs	r1, r7
        var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)dev->calib_param.dig_p1)) / 8589934592;
     ac6:	3000      	adds	r0, #0
     ac8:	f541 4100 	adc.w	r1, r1, #32768	; 0x8000
     acc:	8ae6      	ldrh	r6, [r4, #22]
     ace:	fba0 2306 	umull	r2, r3, r0, r6
     ad2:	fb06 3301 	mla	r3, r6, r1, r3
     ad6:	4619      	mov	r1, r3
     ad8:	2a00      	cmp	r2, #0
     ada:	f173 0600 	sbcs.w	r6, r3, #0
     ade:	f2c0 808a 	blt.w	bf6 <bmp280_get_comp_pres_64bit+0x202>
     ae2:	104a      	asrs	r2, r1, #1
     ae4:	17cb      	asrs	r3, r1, #31
        if (var1 != 0)
     ae6:	ea52 0103 	orrs.w	r1, r2, r3
     aea:	f000 80a2 	beq.w	c32 <bmp280_get_comp_pres_64bit+0x23e>
            p = 1048576 - uncomp_pres;
     aee:	9901      	ldr	r1, [sp, #4]
     af0:	f5c1 1180 	rsb	r1, r1, #1048576	; 0x100000
            p = (((((p * 2147483648U)) - var2) * 3125) / var1);
     af4:	ea4f 0b51 	mov.w	fp, r1, lsr #1
     af8:	ea4f 7ac1 	mov.w	sl, r1, lsl #31
     afc:	ebba 0808 	subs.w	r8, sl, r8
     b00:	eb6b 0909 	sbc.w	r9, fp, r9
     b04:	eb18 0608 	adds.w	r6, r8, r8
     b08:	eb49 0709 	adc.w	r7, r9, r9
     b0c:	eb16 0608 	adds.w	r6, r6, r8
     b10:	eb47 0709 	adc.w	r7, r7, r9
     b14:	01b9      	lsls	r1, r7, #6
     b16:	ea41 6196 	orr.w	r1, r1, r6, lsr #26
     b1a:	01b0      	lsls	r0, r6, #6
     b1c:	1980      	adds	r0, r0, r6
     b1e:	4179      	adcs	r1, r7
     b20:	008e      	lsls	r6, r1, #2
     b22:	ea46 7690 	orr.w	r6, r6, r0, lsr #30
     b26:	0087      	lsls	r7, r0, #2
     b28:	eb17 0008 	adds.w	r0, r7, r8
     b2c:	eb46 0109 	adc.w	r1, r6, r9
     b30:	008e      	lsls	r6, r1, #2
     b32:	ea46 7690 	orr.w	r6, r6, r0, lsr #30
     b36:	0087      	lsls	r7, r0, #2
     b38:	eb17 0008 	adds.w	r0, r7, r8
     b3c:	eb46 0109 	adc.w	r1, r6, r9
     b40:	4e40      	ldr	r6, [pc, #256]	; (c44 <bmp280_get_comp_pres_64bit+0x250>)
     b42:	47b0      	blx	r6
            var1 = (((int64_t) dev->calib_param.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
     b44:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
     b48:	17d3      	asrs	r3, r2, #31
     b4a:	4680      	mov	r8, r0
     b4c:	4689      	mov	r9, r1
     b4e:	2800      	cmp	r0, #0
     b50:	f171 0600 	sbcs.w	r6, r1, #0
     b54:	db54      	blt.n	c00 <bmp280_get_comp_pres_64bit+0x20c>
     b56:	ea4f 3658 	mov.w	r6, r8, lsr #13
     b5a:	ea46 46c9 	orr.w	r6, r6, r9, lsl #19
     b5e:	ea4f 3769 	mov.w	r7, r9, asr #13
     b62:	fb02 fe07 	mul.w	lr, r2, r7
     b66:	fb06 ee03 	mla	lr, r6, r3, lr
     b6a:	fba2 2306 	umull	r2, r3, r2, r6
     b6e:	4473      	add	r3, lr
     b70:	fb06 f303 	mul.w	r3, r6, r3
     b74:	fb07 3302 	mla	r3, r7, r2, r3
     b78:	fba6 6702 	umull	r6, r7, r6, r2
     b7c:	441f      	add	r7, r3
     b7e:	4632      	mov	r2, r6
     b80:	463b      	mov	r3, r7
     b82:	2e00      	cmp	r6, #0
     b84:	f177 0e00 	sbcs.w	lr, r7, #0
     b88:	db43      	blt.n	c12 <bmp280_get_comp_pres_64bit+0x21e>
     b8a:	0e52      	lsrs	r2, r2, #25
     b8c:	ea42 18c3 	orr.w	r8, r2, r3, lsl #7
     b90:	ea4f 6963 	mov.w	r9, r3, asr #25
            var2 = (((int64_t) dev->calib_param.dig_p8) * p) / 524288;
     b94:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
     b98:	17d3      	asrs	r3, r2, #31
     b9a:	fb00 f603 	mul.w	r6, r0, r3
     b9e:	fb02 6601 	mla	r6, r2, r1, r6
     ba2:	fba0 2302 	umull	r2, r3, r0, r2
     ba6:	4433      	add	r3, r6
     ba8:	4616      	mov	r6, r2
     baa:	461f      	mov	r7, r3
     bac:	2a00      	cmp	r2, #0
     bae:	f173 0e00 	sbcs.w	lr, r3, #0
     bb2:	db34      	blt.n	c1e <bmp280_get_comp_pres_64bit+0x22a>
     bb4:	0cf6      	lsrs	r6, r6, #19
     bb6:	ea46 3247 	orr.w	r2, r6, r7, lsl #13
     bba:	14fb      	asrs	r3, r7, #19
            p = ((p + var1 + var2) / 256) + (((int64_t)dev->calib_param.dig_p7) * 16);
     bbc:	eb10 0008 	adds.w	r0, r0, r8
     bc0:	eb41 0109 	adc.w	r1, r1, r9
     bc4:	1880      	adds	r0, r0, r2
     bc6:	4159      	adcs	r1, r3
     bc8:	4606      	mov	r6, r0
     bca:	460f      	mov	r7, r1
     bcc:	2800      	cmp	r0, #0
     bce:	f171 0300 	sbcs.w	r3, r1, #0
     bd2:	db29      	blt.n	c28 <bmp280_get_comp_pres_64bit+0x234>
     bd4:	0a31      	lsrs	r1, r6, #8
     bd6:	ea41 6207 	orr.w	r2, r1, r7, lsl #24
     bda:	f9b4 6022 	ldrsh.w	r6, [r4, #34]	; 0x22
     bde:	0130      	lsls	r0, r6, #4
     be0:	1812      	adds	r2, r2, r0
            *pressure = (uint32_t)p;
     be2:	602a      	str	r2, [r5, #0]
}
     be4:	9800      	ldr	r0, [sp, #0]
     be6:	b003      	add	sp, #12
     be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        var1 = ((var1 * var1 * (int64_t) dev->calib_param.dig_p3) / 256) +
     bec:	f116 0aff 	adds.w	sl, r6, #255	; 0xff
     bf0:	f147 0b00 	adc.w	fp, r7, #0
     bf4:	e751      	b.n	a9a <bmp280_get_comp_pres_64bit+0xa6>
        var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)dev->calib_param.dig_p1)) / 8589934592;
     bf6:	f112 30ff 	adds.w	r0, r2, #4294967295
     bfa:	f143 0101 	adc.w	r1, r3, #1
     bfe:	e770      	b.n	ae2 <bmp280_get_comp_pres_64bit+0xee>
            var1 = (((int64_t) dev->calib_param.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
     c00:	f641 78ff 	movw	r8, #8191	; 0x1fff
     c04:	f04f 0900 	mov.w	r9, #0
     c08:	eb18 0800 	adds.w	r8, r8, r0
     c0c:	eb49 0901 	adc.w	r9, r9, r1
     c10:	e7a1      	b.n	b56 <bmp280_get_comp_pres_64bit+0x162>
     c12:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
     c16:	2300      	movs	r3, #0
     c18:	1992      	adds	r2, r2, r6
     c1a:	417b      	adcs	r3, r7
     c1c:	e7b5      	b.n	b8a <bmp280_get_comp_pres_64bit+0x196>
            var2 = (((int64_t) dev->calib_param.dig_p8) * p) / 524288;
     c1e:	4e0a      	ldr	r6, [pc, #40]	; (c48 <bmp280_get_comp_pres_64bit+0x254>)
     c20:	2700      	movs	r7, #0
     c22:	18b6      	adds	r6, r6, r2
     c24:	415f      	adcs	r7, r3
     c26:	e7c5      	b.n	bb4 <bmp280_get_comp_pres_64bit+0x1c0>
            p = ((p + var1 + var2) / 256) + (((int64_t)dev->calib_param.dig_p7) * 16);
     c28:	f110 06ff 	adds.w	r6, r0, #255	; 0xff
     c2c:	f141 0700 	adc.w	r7, r1, #0
     c30:	e7d0      	b.n	bd4 <bmp280_get_comp_pres_64bit+0x1e0>
            *pressure = 0;
     c32:	2300      	movs	r3, #0
     c34:	602b      	str	r3, [r5, #0]
            rslt = BMP280_E_64BIT_COMP_PRESS;
     c36:	f06f 030f 	mvn.w	r3, #15
     c3a:	9300      	str	r3, [sp, #0]
     c3c:	e7d2      	b.n	be4 <bmp280_get_comp_pres_64bit+0x1f0>
     c3e:	bf00      	nop
     c40:	000002dd 	.word	0x000002dd
     c44:	00005b49 	.word	0x00005b49
     c48:	0007ffff 	.word	0x0007ffff
     c4c:	00000000 	.word	0x00000000

00000c50 <bmp280_get_comp_pres_double>:
{
     c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c54:	b089      	sub	sp, #36	; 0x24
     c56:	4682      	mov	sl, r0
     c58:	468b      	mov	fp, r1
     c5a:	4614      	mov	r4, r2
    rslt = null_ptr_check(dev);
     c5c:	4610      	mov	r0, r2
     c5e:	4b80      	ldr	r3, [pc, #512]	; (e60 <bmp280_get_comp_pres_double+0x210>)
     c60:	4798      	blx	r3
    if (rslt == BMP280_OK)
     c62:	9003      	str	r0, [sp, #12]
     c64:	2800      	cmp	r0, #0
     c66:	f040 80eb 	bne.w	e40 <bmp280_get_comp_pres_double+0x1f0>
        var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
     c6a:	4f7e      	ldr	r7, [pc, #504]	; (e64 <bmp280_get_comp_pres_double+0x214>)
     c6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     c6e:	47b8      	blx	r7
     c70:	4d7d      	ldr	r5, [pc, #500]	; (e68 <bmp280_get_comp_pres_double+0x218>)
     c72:	2200      	movs	r2, #0
     c74:	4b7d      	ldr	r3, [pc, #500]	; (e6c <bmp280_get_comp_pres_double+0x21c>)
     c76:	47a8      	blx	r5
     c78:	f8df 9224 	ldr.w	r9, [pc, #548]	; ea0 <bmp280_get_comp_pres_double+0x250>
     c7c:	2200      	movs	r2, #0
     c7e:	4b7c      	ldr	r3, [pc, #496]	; (e70 <bmp280_get_comp_pres_double+0x220>)
     c80:	47c8      	blx	r9
     c82:	4602      	mov	r2, r0
     c84:	460b      	mov	r3, r1
        var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
     c86:	e9cd 2300 	strd	r2, r3, [sp]
     c8a:	47a8      	blx	r5
     c8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
     c90:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
     c94:	47b8      	blx	r7
     c96:	4602      	mov	r2, r0
     c98:	460b      	mov	r3, r1
     c9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     c9e:	47a8      	blx	r5
     ca0:	2200      	movs	r2, #0
     ca2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
     ca6:	47a8      	blx	r5
     ca8:	e9cd 0104 	strd	r0, r1, [sp, #16]
        var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
     cac:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
     cb0:	47b8      	blx	r7
     cb2:	4602      	mov	r2, r0
     cb4:	460b      	mov	r3, r1
     cb6:	e9dd 0100 	ldrd	r0, r1, [sp]
     cba:	47a8      	blx	r5
     cbc:	4e6d      	ldr	r6, [pc, #436]	; (e74 <bmp280_get_comp_pres_double+0x224>)
     cbe:	4602      	mov	r2, r0
     cc0:	460b      	mov	r3, r1
     cc2:	47b0      	blx	r6
     cc4:	4602      	mov	r2, r0
     cc6:	460b      	mov	r3, r1
     cc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     ccc:	47b0      	blx	r6
        var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
     cce:	2200      	movs	r2, #0
     cd0:	4b69      	ldr	r3, [pc, #420]	; (e78 <bmp280_get_comp_pres_double+0x228>)
     cd2:	47a8      	blx	r5
     cd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
     cd8:	f9b4 001c 	ldrsh.w	r0, [r4, #28]
     cdc:	47b8      	blx	r7
     cde:	2200      	movs	r2, #0
     ce0:	4b66      	ldr	r3, [pc, #408]	; (e7c <bmp280_get_comp_pres_double+0x22c>)
     ce2:	47a8      	blx	r5
     ce4:	4602      	mov	r2, r0
     ce6:	460b      	mov	r3, r1
     ce8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     cec:	47b0      	blx	r6
     cee:	e9cd 0106 	strd	r0, r1, [sp, #24]
        var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
     cf2:	f9b4 001a 	ldrsh.w	r0, [r4, #26]
     cf6:	47b8      	blx	r7
     cf8:	4602      	mov	r2, r0
     cfa:	460b      	mov	r3, r1
     cfc:	e9dd 0100 	ldrd	r0, r1, [sp]
     d00:	47a8      	blx	r5
     d02:	4602      	mov	r2, r0
     d04:	460b      	mov	r3, r1
     d06:	e9dd 0100 	ldrd	r0, r1, [sp]
     d0a:	47a8      	blx	r5
     d0c:	2200      	movs	r2, #0
     d0e:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
     d12:	47a8      	blx	r5
     d14:	e9cd 0104 	strd	r0, r1, [sp, #16]
     d18:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
     d1c:	47b8      	blx	r7
     d1e:	4602      	mov	r2, r0
     d20:	460b      	mov	r3, r1
     d22:	e9dd 0100 	ldrd	r0, r1, [sp]
     d26:	47a8      	blx	r5
     d28:	4602      	mov	r2, r0
     d2a:	460b      	mov	r3, r1
     d2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     d30:	47b0      	blx	r6
     d32:	2200      	movs	r2, #0
     d34:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
     d38:	47a8      	blx	r5
        var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
     d3a:	2200      	movs	r2, #0
     d3c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
     d40:	47a8      	blx	r5
     d42:	2200      	movs	r2, #0
     d44:	4b4e      	ldr	r3, [pc, #312]	; (e80 <bmp280_get_comp_pres_double+0x230>)
     d46:	47b0      	blx	r6
     d48:	4607      	mov	r7, r0
     d4a:	4688      	mov	r8, r1
     d4c:	4e4d      	ldr	r6, [pc, #308]	; (e84 <bmp280_get_comp_pres_double+0x234>)
     d4e:	8ae0      	ldrh	r0, [r4, #22]
     d50:	47b0      	blx	r6
     d52:	4602      	mov	r2, r0
     d54:	460b      	mov	r3, r1
     d56:	4638      	mov	r0, r7
     d58:	4641      	mov	r1, r8
     d5a:	47a8      	blx	r5
     d5c:	e9cd 0100 	strd	r0, r1, [sp]
        *pressure = 1048576.0 - (double)uncomp_pres;
     d60:	4658      	mov	r0, fp
     d62:	47b0      	blx	r6
     d64:	4602      	mov	r2, r0
     d66:	460b      	mov	r3, r1
     d68:	2000      	movs	r0, #0
     d6a:	4947      	ldr	r1, [pc, #284]	; (e88 <bmp280_get_comp_pres_double+0x238>)
     d6c:	47c8      	blx	r9
     d6e:	4680      	mov	r8, r0
     d70:	4689      	mov	r9, r1
     d72:	e9ca 8900 	strd	r8, r9, [sl]
        if (var1 < 0 || var1 > 0)
     d76:	2200      	movs	r2, #0
     d78:	2300      	movs	r3, #0
     d7a:	e9dd 6700 	ldrd	r6, r7, [sp]
     d7e:	4630      	mov	r0, r6
     d80:	4639      	mov	r1, r7
     d82:	4d42      	ldr	r5, [pc, #264]	; (e8c <bmp280_get_comp_pres_double+0x23c>)
     d84:	47a8      	blx	r5
     d86:	2800      	cmp	r0, #0
     d88:	d15e      	bne.n	e48 <bmp280_get_comp_pres_double+0x1f8>
     d8a:	2200      	movs	r2, #0
     d8c:	2300      	movs	r3, #0
     d8e:	4630      	mov	r0, r6
     d90:	4639      	mov	r1, r7
     d92:	4d3f      	ldr	r5, [pc, #252]	; (e90 <bmp280_get_comp_pres_double+0x240>)
     d94:	47a8      	blx	r5
     d96:	2800      	cmp	r0, #0
     d98:	d156      	bne.n	e48 <bmp280_get_comp_pres_double+0x1f8>
            *pressure = (*pressure - (var2 / 4096.0)) * 6250.0 / var1;
     d9a:	4d33      	ldr	r5, [pc, #204]	; (e68 <bmp280_get_comp_pres_double+0x218>)
     d9c:	2200      	movs	r2, #0
     d9e:	4b3d      	ldr	r3, [pc, #244]	; (e94 <bmp280_get_comp_pres_double+0x244>)
     da0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
     da4:	47a8      	blx	r5
     da6:	4602      	mov	r2, r0
     da8:	460b      	mov	r3, r1
     daa:	4640      	mov	r0, r8
     dac:	4649      	mov	r1, r9
     dae:	f8df 80f0 	ldr.w	r8, [pc, #240]	; ea0 <bmp280_get_comp_pres_double+0x250>
     db2:	47c0      	blx	r8
     db4:	a328      	add	r3, pc, #160	; (adr r3, e58 <bmp280_get_comp_pres_double+0x208>)
     db6:	e9d3 2300 	ldrd	r2, r3, [r3]
     dba:	47a8      	blx	r5
     dbc:	4632      	mov	r2, r6
     dbe:	463b      	mov	r3, r7
     dc0:	4e35      	ldr	r6, [pc, #212]	; (e98 <bmp280_get_comp_pres_double+0x248>)
     dc2:	47b0      	blx	r6
     dc4:	4680      	mov	r8, r0
     dc6:	4689      	mov	r9, r1
     dc8:	e9ca 8900 	strd	r8, r9, [sl]
            var1 = ((double)dev->calib_param.dig_p9) * (*pressure) * (*pressure) / 2147483648.0;
     dcc:	4f25      	ldr	r7, [pc, #148]	; (e64 <bmp280_get_comp_pres_double+0x214>)
     dce:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
     dd2:	47b8      	blx	r7
     dd4:	4602      	mov	r2, r0
     dd6:	460b      	mov	r3, r1
     dd8:	4640      	mov	r0, r8
     dda:	4649      	mov	r1, r9
     ddc:	47a8      	blx	r5
     dde:	4602      	mov	r2, r0
     de0:	460b      	mov	r3, r1
     de2:	4640      	mov	r0, r8
     de4:	4649      	mov	r1, r9
     de6:	47a8      	blx	r5
     de8:	2200      	movs	r2, #0
     dea:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
     dee:	47a8      	blx	r5
     df0:	e9cd 0100 	strd	r0, r1, [sp]
            var2 = (*pressure) * ((double)dev->calib_param.dig_p8) / 32768.0;
     df4:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
     df8:	47b8      	blx	r7
     dfa:	4602      	mov	r2, r0
     dfc:	460b      	mov	r3, r1
     dfe:	4640      	mov	r0, r8
     e00:	4649      	mov	r1, r9
     e02:	47a8      	blx	r5
     e04:	2200      	movs	r2, #0
     e06:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
     e0a:	47a8      	blx	r5
            *pressure = *pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
     e0c:	4e19      	ldr	r6, [pc, #100]	; (e74 <bmp280_get_comp_pres_double+0x224>)
     e0e:	4602      	mov	r2, r0
     e10:	460b      	mov	r3, r1
     e12:	e9dd 0100 	ldrd	r0, r1, [sp]
     e16:	47b0      	blx	r6
     e18:	e9cd 0100 	strd	r0, r1, [sp]
     e1c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
     e20:	47b8      	blx	r7
     e22:	4602      	mov	r2, r0
     e24:	460b      	mov	r3, r1
     e26:	e9dd 0100 	ldrd	r0, r1, [sp]
     e2a:	47b0      	blx	r6
     e2c:	2200      	movs	r2, #0
     e2e:	4b1b      	ldr	r3, [pc, #108]	; (e9c <bmp280_get_comp_pres_double+0x24c>)
     e30:	47a8      	blx	r5
     e32:	4602      	mov	r2, r0
     e34:	460b      	mov	r3, r1
     e36:	4640      	mov	r0, r8
     e38:	4649      	mov	r1, r9
     e3a:	47b0      	blx	r6
     e3c:	e9ca 0100 	strd	r0, r1, [sl]
}
     e40:	9803      	ldr	r0, [sp, #12]
     e42:	b009      	add	sp, #36	; 0x24
     e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            *pressure = 0;
     e48:	2200      	movs	r2, #0
     e4a:	2300      	movs	r3, #0
     e4c:	e9ca 2300 	strd	r2, r3, [sl]
            rslt = BMP280_E_DOUBLE_COMP_PRESS;
     e50:	f06f 0311 	mvn.w	r3, #17
     e54:	9303      	str	r3, [sp, #12]
     e56:	e7f3      	b.n	e40 <bmp280_get_comp_pres_double+0x1f0>
     e58:	00000000 	.word	0x00000000
     e5c:	40b86a00 	.word	0x40b86a00
     e60:	000002dd 	.word	0x000002dd
     e64:	0000551d 	.word	0x0000551d
     e68:	000055e9 	.word	0x000055e9
     e6c:	3fe00000 	.word	0x3fe00000
     e70:	40ef4000 	.word	0x40ef4000
     e74:	00005285 	.word	0x00005285
     e78:	3fd00000 	.word	0x3fd00000
     e7c:	40f00000 	.word	0x40f00000
     e80:	3ff00000 	.word	0x3ff00000
     e84:	000054fd 	.word	0x000054fd
     e88:	41300000 	.word	0x41300000
     e8c:	00005b1d 	.word	0x00005b1d
     e90:	00005ab9 	.word	0x00005ab9
     e94:	3f300000 	.word	0x3f300000
     e98:	0000583d 	.word	0x0000583d
     e9c:	3fb00000 	.word	0x3fb00000
     ea0:	00005281 	.word	0x00005281

00000ea4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     ea4:	e7fe      	b.n	ea4 <Dummy_Handler>
	...

00000ea8 <Reset_Handler>:
{
     ea8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     eaa:	4b15      	ldr	r3, [pc, #84]	; (f00 <Reset_Handler+0x58>)
     eac:	4a15      	ldr	r2, [pc, #84]	; (f04 <Reset_Handler+0x5c>)
     eae:	429a      	cmp	r2, r3
     eb0:	d009      	beq.n	ec6 <Reset_Handler+0x1e>
     eb2:	4b13      	ldr	r3, [pc, #76]	; (f00 <Reset_Handler+0x58>)
     eb4:	4a13      	ldr	r2, [pc, #76]	; (f04 <Reset_Handler+0x5c>)
     eb6:	e003      	b.n	ec0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     eb8:	6811      	ldr	r1, [r2, #0]
     eba:	6019      	str	r1, [r3, #0]
     ebc:	3304      	adds	r3, #4
     ebe:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     ec0:	4911      	ldr	r1, [pc, #68]	; (f08 <Reset_Handler+0x60>)
     ec2:	428b      	cmp	r3, r1
     ec4:	d3f8      	bcc.n	eb8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     ec6:	4b11      	ldr	r3, [pc, #68]	; (f0c <Reset_Handler+0x64>)
     ec8:	e002      	b.n	ed0 <Reset_Handler+0x28>
                *pDest++ = 0;
     eca:	2200      	movs	r2, #0
     ecc:	601a      	str	r2, [r3, #0]
     ece:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     ed0:	4a0f      	ldr	r2, [pc, #60]	; (f10 <Reset_Handler+0x68>)
     ed2:	4293      	cmp	r3, r2
     ed4:	d3f9      	bcc.n	eca <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     ed6:	4b0f      	ldr	r3, [pc, #60]	; (f14 <Reset_Handler+0x6c>)
     ed8:	4a0f      	ldr	r2, [pc, #60]	; (f18 <Reset_Handler+0x70>)
     eda:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     ede:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     ee0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     ee4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     eec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ef0:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     ef4:	4b09      	ldr	r3, [pc, #36]	; (f1c <Reset_Handler+0x74>)
     ef6:	4798      	blx	r3
        main();
     ef8:	4b09      	ldr	r3, [pc, #36]	; (f20 <Reset_Handler+0x78>)
     efa:	4798      	blx	r3
     efc:	e7fe      	b.n	efc <Reset_Handler+0x54>
     efe:	bf00      	nop
     f00:	20000000 	.word	0x20000000
     f04:	00006264 	.word	0x00006264
     f08:	20000214 	.word	0x20000214
     f0c:	20000220 	.word	0x20000220
     f10:	20000c14 	.word	0x20000c14
     f14:	e000ed00 	.word	0xe000ed00
     f18:	00000000 	.word	0x00000000
     f1c:	00005ec9 	.word	0x00005ec9
     f20:	000043e5 	.word	0x000043e5

00000f24 <TIMER_1_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_1_init(void)
{
     f24:	b508      	push	{r3, lr}
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     f26:	4a08      	ldr	r2, [pc, #32]	; (f48 <TIMER_1_init+0x24>)
     f28:	6953      	ldr	r3, [r2, #20]
     f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     f2e:	6153      	str	r3, [r2, #20]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     f30:	2240      	movs	r2, #64	; 0x40
     f32:	4b06      	ldr	r3, [pc, #24]	; (f4c <TIMER_1_init+0x28>)
     f34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&TIMER_1, TC0, _tc_get_timer());
     f38:	4b05      	ldr	r3, [pc, #20]	; (f50 <TIMER_1_init+0x2c>)
     f3a:	4798      	blx	r3
     f3c:	4602      	mov	r2, r0
     f3e:	4905      	ldr	r1, [pc, #20]	; (f54 <TIMER_1_init+0x30>)
     f40:	4805      	ldr	r0, [pc, #20]	; (f58 <TIMER_1_init+0x34>)
     f42:	4b06      	ldr	r3, [pc, #24]	; (f5c <TIMER_1_init+0x38>)
     f44:	4798      	blx	r3
     f46:	bd08      	pop	{r3, pc}
     f48:	40000800 	.word	0x40000800
     f4c:	40001c00 	.word	0x40001c00
     f50:	00004113 	.word	0x00004113
     f54:	40003800 	.word	0x40003800
     f58:	20000564 	.word	0x20000564
     f5c:	000020b5 	.word	0x000020b5

00000f60 <ADC_0_init>:
{
     f60:	b5f0      	push	{r4, r5, r6, r7, lr}
     f62:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     f64:	4a29      	ldr	r2, [pc, #164]	; (100c <ADC_0_init+0xac>)
     f66:	6a13      	ldr	r3, [r2, #32]
     f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     f6c:	6213      	str	r3, [r2, #32]
     f6e:	2240      	movs	r2, #64	; 0x40
     f70:	4b27      	ldr	r3, [pc, #156]	; (1010 <ADC_0_init+0xb0>)
     f72:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	adc_async_init(&ADC_0, ADC1, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     f76:	4e27      	ldr	r6, [pc, #156]	; (1014 <ADC_0_init+0xb4>)
     f78:	4d27      	ldr	r5, [pc, #156]	; (1018 <ADC_0_init+0xb8>)
     f7a:	2400      	movs	r4, #0
     f7c:	9402      	str	r4, [sp, #8]
     f7e:	4b27      	ldr	r3, [pc, #156]	; (101c <ADC_0_init+0xbc>)
     f80:	9301      	str	r3, [sp, #4]
     f82:	2301      	movs	r3, #1
     f84:	9300      	str	r3, [sp, #0]
     f86:	4623      	mov	r3, r4
     f88:	4632      	mov	r2, r6
     f8a:	4925      	ldr	r1, [pc, #148]	; (1020 <ADC_0_init+0xc0>)
     f8c:	4628      	mov	r0, r5
     f8e:	4f25      	ldr	r7, [pc, #148]	; (1024 <ADC_0_init+0xc4>)
     f90:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     f92:	2310      	movs	r3, #16
     f94:	1d32      	adds	r2, r6, #4
     f96:	4621      	mov	r1, r4
     f98:	4628      	mov	r0, r5
     f9a:	4c23      	ldr	r4, [pc, #140]	; (1028 <ADC_0_init+0xc8>)
     f9c:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f9e:	4b23      	ldr	r3, [pc, #140]	; (102c <ADC_0_init+0xcc>)
     fa0:	2210      	movs	r2, #16
     fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fa6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     faa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     fae:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     fb2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fb6:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
	tmp &= ~PORT_PINCFG_PMUXEN;
     fba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     fbe:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fc2:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     fc6:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     fca:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     fce:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     fd2:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     fd6:	2220      	movs	r2, #32
     fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fdc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     fe0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     fe4:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fe8:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
	tmp &= ~PORT_PINCFG_PMUXEN;
     fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ff0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff4:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ff8:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ffc:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1000:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1004:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
}
    1008:	b005      	add	sp, #20
    100a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    100c:	40000800 	.word	0x40000800
    1010:	40001c00 	.word	0x40001c00
    1014:	2000023c 	.word	0x2000023c
    1018:	20000520 	.word	0x20000520
    101c:	2000054c 	.word	0x2000054c
    1020:	43002000 	.word	0x43002000
    1024:	000018a5 	.word	0x000018a5
    1028:	0000194d 	.word	0x0000194d
    102c:	41008000 	.word	0x41008000

00001030 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1030:	4b10      	ldr	r3, [pc, #64]	; (1074 <USART_0_PORT_init+0x44>)
    1032:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
    1036:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    103a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    103e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1042:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1046:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    104a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    104e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1052:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
    1056:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    105a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    105e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1062:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1066:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    106a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    106e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    1072:	4770      	bx	lr
    1074:	41008000 	.word	0x41008000

00001078 <USART_0_CLOCK_init>:
    1078:	4b06      	ldr	r3, [pc, #24]	; (1094 <USART_0_CLOCK_init+0x1c>)
    107a:	2240      	movs	r2, #64	; 0x40
    107c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    1080:	2243      	movs	r2, #67	; 0x43
    1082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    1086:	4a04      	ldr	r2, [pc, #16]	; (1098 <USART_0_CLOCK_init+0x20>)
    1088:	6993      	ldr	r3, [r2, #24]
    108a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    108e:	6193      	str	r3, [r2, #24]
    1090:	4770      	bx	lr
    1092:	bf00      	nop
    1094:	40001c00 	.word	0x40001c00
    1098:	40000800 	.word	0x40000800

0000109c <USART_0_init>:
{
    109c:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
    109e:	4b05      	ldr	r3, [pc, #20]	; (10b4 <USART_0_init+0x18>)
    10a0:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM2, (void *)NULL);
    10a2:	2200      	movs	r2, #0
    10a4:	4904      	ldr	r1, [pc, #16]	; (10b8 <USART_0_init+0x1c>)
    10a6:	4805      	ldr	r0, [pc, #20]	; (10bc <USART_0_init+0x20>)
    10a8:	4b05      	ldr	r3, [pc, #20]	; (10c0 <USART_0_init+0x24>)
    10aa:	4798      	blx	r3
	USART_0_PORT_init();
    10ac:	4b05      	ldr	r3, [pc, #20]	; (10c4 <USART_0_init+0x28>)
    10ae:	4798      	blx	r3
    10b0:	bd08      	pop	{r3, pc}
    10b2:	bf00      	nop
    10b4:	00001079 	.word	0x00001079
    10b8:	41012000 	.word	0x41012000
    10bc:	200005b0 	.word	0x200005b0
    10c0:	000022a9 	.word	0x000022a9
    10c4:	00001031 	.word	0x00001031

000010c8 <I2C_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    10c8:	4b16      	ldr	r3, [pc, #88]	; (1124 <I2C_0_PORT_init+0x5c>)
    10ca:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
    10ce:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    10d2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10d6:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
    10da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10e2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    10e6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    10ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    10ee:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    10f2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    10f6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
    10fa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    10fe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1102:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    1106:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    110a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    110e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1112:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1116:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    111a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    111e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    1122:	4770      	bx	lr
    1124:	41008000 	.word	0x41008000

00001128 <I2C_0_CLOCK_init>:
    1128:	4b06      	ldr	r3, [pc, #24]	; (1144 <I2C_0_CLOCK_init+0x1c>)
    112a:	2240      	movs	r2, #64	; 0x40
    112c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    1130:	2242      	movs	r2, #66	; 0x42
    1132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    1136:	4a04      	ldr	r2, [pc, #16]	; (1148 <I2C_0_CLOCK_init+0x20>)
    1138:	6993      	ldr	r3, [r2, #24]
    113a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    113e:	6193      	str	r3, [r2, #24]
    1140:	4770      	bx	lr
    1142:	bf00      	nop
    1144:	40001c00 	.word	0x40001c00
    1148:	40000800 	.word	0x40000800

0000114c <I2C_0_init>:
{
    114c:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
    114e:	4b04      	ldr	r3, [pc, #16]	; (1160 <I2C_0_init+0x14>)
    1150:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM3);
    1152:	4904      	ldr	r1, [pc, #16]	; (1164 <I2C_0_init+0x18>)
    1154:	4804      	ldr	r0, [pc, #16]	; (1168 <I2C_0_init+0x1c>)
    1156:	4b05      	ldr	r3, [pc, #20]	; (116c <I2C_0_init+0x20>)
    1158:	4798      	blx	r3
	I2C_0_PORT_init();
    115a:	4b05      	ldr	r3, [pc, #20]	; (1170 <I2C_0_init+0x24>)
    115c:	4798      	blx	r3
    115e:	bd08      	pop	{r3, pc}
    1160:	00001129 	.word	0x00001129
    1164:	41014000 	.word	0x41014000
    1168:	200005bc 	.word	0x200005bc
    116c:	00001c71 	.word	0x00001c71
    1170:	000010c9 	.word	0x000010c9

00001174 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1174:	4b2c      	ldr	r3, [pc, #176]	; (1228 <SPI_0_PORT_init+0xb4>)
    1176:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    117a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    117e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1182:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1186:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    118a:	4a28      	ldr	r2, [pc, #160]	; (122c <SPI_0_PORT_init+0xb8>)
    118c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1190:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    1194:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1198:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    119c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11a0:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    11a4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    11a8:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    11b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    11b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    11b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11bc:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    11c0:	4a1b      	ldr	r2, [pc, #108]	; (1230 <SPI_0_PORT_init+0xbc>)
    11c2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11c6:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
    11ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    11ce:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11d2:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11d6:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    11da:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    11de:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11e2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    11e6:	2202      	movs	r2, #2
    11e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11ec:	4a11      	ldr	r2, [pc, #68]	; (1234 <SPI_0_PORT_init+0xc0>)
    11ee:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    11f2:	4a11      	ldr	r2, [pc, #68]	; (1238 <SPI_0_PORT_init+0xc4>)
    11f4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    11f8:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
    11fc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1200:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1204:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
    1208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    120c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1210:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1214:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1218:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    121c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1220:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    1224:	4770      	bx	lr
    1226:	bf00      	nop
    1228:	41008000 	.word	0x41008000
    122c:	c0000001 	.word	0xc0000001
    1230:	c0000002 	.word	0xc0000002
    1234:	40020002 	.word	0x40020002
    1238:	c0020000 	.word	0xc0020000

0000123c <SPI_0_CLOCK_init>:
    123c:	4b06      	ldr	r3, [pc, #24]	; (1258 <SPI_0_CLOCK_init+0x1c>)
    123e:	2240      	movs	r2, #64	; 0x40
    1240:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    1244:	2243      	movs	r2, #67	; 0x43
    1246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    124a:	4a04      	ldr	r2, [pc, #16]	; (125c <SPI_0_CLOCK_init+0x20>)
    124c:	6a13      	ldr	r3, [r2, #32]
    124e:	f043 0302 	orr.w	r3, r3, #2
    1252:	6213      	str	r3, [r2, #32]
    1254:	4770      	bx	lr
    1256:	bf00      	nop
    1258:	40001c00 	.word	0x40001c00
    125c:	40000800 	.word	0x40000800

00001260 <SPI_0_init>:
{
    1260:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
    1262:	4b04      	ldr	r3, [pc, #16]	; (1274 <SPI_0_init+0x14>)
    1264:	4798      	blx	r3
	spi_m_dma_init(&SPI_0, SERCOM5);
    1266:	4904      	ldr	r1, [pc, #16]	; (1278 <SPI_0_init+0x18>)
    1268:	4804      	ldr	r0, [pc, #16]	; (127c <SPI_0_init+0x1c>)
    126a:	4b05      	ldr	r3, [pc, #20]	; (1280 <SPI_0_init+0x20>)
    126c:	4798      	blx	r3
	SPI_0_PORT_init();
    126e:	4b05      	ldr	r3, [pc, #20]	; (1284 <SPI_0_init+0x24>)
    1270:	4798      	blx	r3
    1272:	bd08      	pop	{r3, pc}
    1274:	0000123d 	.word	0x0000123d
    1278:	43000400 	.word	0x43000400
    127c:	20000580 	.word	0x20000580
    1280:	00001df5 	.word	0x00001df5
    1284:	00001175 	.word	0x00001175

00001288 <SPI_1_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1288:	4b2d      	ldr	r3, [pc, #180]	; (1340 <SPI_1_PORT_init+0xb8>)
    128a:	2210      	movs	r2, #16
    128c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1290:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1294:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1298:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    129c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    12a0:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12a4:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
	tmp &= ~PORT_PINCFG_PMUXEN;
    12a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    12ac:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12b0:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12b4:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    12b8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    12bc:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12c0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    12c4:	2220      	movs	r2, #32
    12c6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12ca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    12d2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    12d6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12da:	f893 2145 	ldrb.w	r2, [r3, #325]	; 0x145
	tmp &= ~PORT_PINCFG_PMUXEN;
    12de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    12e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12e6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12ea:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    12ee:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    12f2:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12f6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    12fa:	2280      	movs	r2, #128	; 0x80
    12fc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1300:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1304:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    1308:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    130c:	4a0d      	ldr	r2, [pc, #52]	; (1344 <SPI_1_PORT_init+0xbc>)
    130e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1312:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
    1316:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    131a:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    131e:	f893 2147 	ldrb.w	r2, [r3, #327]	; 0x147
	tmp &= ~PORT_PINCFG_PMUXEN;
    1322:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1326:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    132a:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    132e:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1332:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1336:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    133a:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
    133e:	4770      	bx	lr
    1340:	41008000 	.word	0x41008000
    1344:	c0020000 	.word	0xc0020000

00001348 <SPI_1_CLOCK_init>:
    1348:	4b06      	ldr	r3, [pc, #24]	; (1364 <SPI_1_CLOCK_init+0x1c>)
    134a:	2240      	movs	r2, #64	; 0x40
    134c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    1350:	2243      	movs	r2, #67	; 0x43
    1352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    1356:	4a04      	ldr	r2, [pc, #16]	; (1368 <SPI_1_CLOCK_init+0x20>)
    1358:	6a13      	ldr	r3, [r2, #32]
    135a:	f043 0304 	orr.w	r3, r3, #4
    135e:	6213      	str	r3, [r2, #32]
    1360:	4770      	bx	lr
    1362:	bf00      	nop
    1364:	40001c00 	.word	0x40001c00
    1368:	40000800 	.word	0x40000800

0000136c <SPI_1_init>:
{
    136c:	b508      	push	{r3, lr}
	SPI_1_CLOCK_init();
    136e:	4b04      	ldr	r3, [pc, #16]	; (1380 <SPI_1_init+0x14>)
    1370:	4798      	blx	r3
	spi_m_sync_init(&SPI_1, SERCOM6);
    1372:	4904      	ldr	r1, [pc, #16]	; (1384 <SPI_1_init+0x18>)
    1374:	4804      	ldr	r0, [pc, #16]	; (1388 <SPI_1_init+0x1c>)
    1376:	4b05      	ldr	r3, [pc, #20]	; (138c <SPI_1_init+0x20>)
    1378:	4798      	blx	r3
	SPI_1_PORT_init();
    137a:	4b05      	ldr	r3, [pc, #20]	; (1390 <SPI_1_init+0x24>)
    137c:	4798      	blx	r3
    137e:	bd08      	pop	{r3, pc}
    1380:	00001349 	.word	0x00001349
    1384:	43000800 	.word	0x43000800
    1388:	20000508 	.word	0x20000508
    138c:	00001e99 	.word	0x00001e99
    1390:	00001289 	.word	0x00001289

00001394 <delay_driver_init>:
{
    1394:	b508      	push	{r3, lr}
	delay_init(SysTick);
    1396:	4802      	ldr	r0, [pc, #8]	; (13a0 <delay_driver_init+0xc>)
    1398:	4b02      	ldr	r3, [pc, #8]	; (13a4 <delay_driver_init+0x10>)
    139a:	4798      	blx	r3
    139c:	bd08      	pop	{r3, pc}
    139e:	bf00      	nop
    13a0:	e000e010 	.word	0xe000e010
    13a4:	00001bdd 	.word	0x00001bdd

000013a8 <TIMER_0_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    13a8:	4a04      	ldr	r2, [pc, #16]	; (13bc <TIMER_0_CLOCK_init+0x14>)
    13aa:	6a13      	ldr	r3, [r2, #32]
    13ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    13b0:	6213      	str	r3, [r2, #32]
    13b2:	2240      	movs	r2, #64	; 0x40
    13b4:	4b02      	ldr	r3, [pc, #8]	; (13c0 <TIMER_0_CLOCK_init+0x18>)
    13b6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    13ba:	4770      	bx	lr
    13bc:	40000800 	.word	0x40000800
    13c0:	40001c00 	.word	0x40001c00

000013c4 <system_init>:
	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void system_init(void)
{
    13c4:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    13c6:	4b1d      	ldr	r3, [pc, #116]	; (143c <system_init+0x78>)
    13c8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    13ca:	4b1d      	ldr	r3, [pc, #116]	; (1440 <system_init+0x7c>)
    13cc:	2201      	movs	r2, #1
    13ce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    13d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    13da:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    13de:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    13e2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13e6:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    13ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    13ee:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    13f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    13f6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    13fa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13fe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    1402:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    1406:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    140a:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
    140e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1412:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	// Set pin direction to output
	gpio_set_pin_direction(TS_SPI_SS_1, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(TS_SPI_SS_1, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
    1416:	4b0b      	ldr	r3, [pc, #44]	; (1444 <system_init+0x80>)
    1418:	4798      	blx	r3

	USART_0_init();
    141a:	4b0b      	ldr	r3, [pc, #44]	; (1448 <system_init+0x84>)
    141c:	4798      	blx	r3

	I2C_0_init();
    141e:	4b0b      	ldr	r3, [pc, #44]	; (144c <system_init+0x88>)
    1420:	4798      	blx	r3

	SPI_0_init();
    1422:	4b0b      	ldr	r3, [pc, #44]	; (1450 <system_init+0x8c>)
    1424:	4798      	blx	r3

	SPI_1_init();
    1426:	4b0b      	ldr	r3, [pc, #44]	; (1454 <system_init+0x90>)
    1428:	4798      	blx	r3

	delay_driver_init();
    142a:	4b0b      	ldr	r3, [pc, #44]	; (1458 <system_init+0x94>)
    142c:	4798      	blx	r3

	TIMER_1_init();
    142e:	4b0b      	ldr	r3, [pc, #44]	; (145c <system_init+0x98>)
    1430:	4798      	blx	r3
	TIMER_0_CLOCK_init();
    1432:	4b0b      	ldr	r3, [pc, #44]	; (1460 <system_init+0x9c>)
    1434:	4798      	blx	r3

	TIMER_0_init();
    1436:	4b0b      	ldr	r3, [pc, #44]	; (1464 <system_init+0xa0>)
    1438:	4798      	blx	r3
    143a:	bd08      	pop	{r3, pc}
    143c:	000028ed 	.word	0x000028ed
    1440:	41008000 	.word	0x41008000
    1444:	00000f61 	.word	0x00000f61
    1448:	0000109d 	.word	0x0000109d
    144c:	0000114d 	.word	0x0000114d
    1450:	00001261 	.word	0x00001261
    1454:	0000136d 	.word	0x0000136d
    1458:	00001395 	.word	0x00001395
    145c:	00000f25 	.word	0x00000f25
    1460:	000013a9 	.word	0x000013a9
    1464:	0000416d 	.word	0x0000416d

00001468 <LAN9252_rx_susp>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1468:	2201      	movs	r2, #1
    146a:	4b10      	ldr	r3, [pc, #64]	; (14ac <LAN9252_rx_susp+0x44>)
    146c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
static void LAN9252_rx_susp(struct _dma_resource *resource)
{
	gpio_set_pin_level(ECAT_SPI_CS_PIN, true);
	
	//volatile uint32_t *pointer = ((DMAC->WRBADDR.reg)+0x10*resource->channel_id+12);
	volatile uint32_t *pointer = ((DMAC->WRBADDR.reg)+12);
    1470:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    1474:	6b9b      	ldr	r3, [r3, #56]	; 0x38

	if (*pointer != &spi_rx_write_fifo_dma_descriptor){
    1476:	68da      	ldr	r2, [r3, #12]
    1478:	4b0d      	ldr	r3, [pc, #52]	; (14b0 <LAN9252_rx_susp+0x48>)
    147a:	429a      	cmp	r2, r3
    147c:	d00d      	beq.n	149a <LAN9252_rx_susp+0x32>
		DMAC->Channel[0].CHCTRLB.reg = 0x2; // Resume
    147e:	4b0d      	ldr	r3, [pc, #52]	; (14b4 <LAN9252_rx_susp+0x4c>)
    1480:	2202      	movs	r2, #2
    1482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1486:	2001      	movs	r0, #1
    1488:	4908      	ldr	r1, [pc, #32]	; (14ac <LAN9252_rx_susp+0x44>)
    148a:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
		gpio_set_pin_level(ECAT_SPI_CS_PIN, false);
		DMAC->Channel[1].CHCTRLB.reg = 0x2; // Resume
    148e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		tx_ethercat_done = false;
    1492:	2200      	movs	r2, #0
    1494:	4b08      	ldr	r3, [pc, #32]	; (14b8 <LAN9252_rx_susp+0x50>)
    1496:	701a      	strb	r2, [r3, #0]
    1498:	4770      	bx	lr
	}
	else{
		tx_ethercat_done = true;
    149a:	2201      	movs	r2, #1
    149c:	4b06      	ldr	r3, [pc, #24]	; (14b8 <LAN9252_rx_susp+0x50>)
    149e:	701a      	strb	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    14a4:	4b05      	ldr	r3, [pc, #20]	; (14bc <LAN9252_rx_susp+0x54>)
    14a6:	60da      	str	r2, [r3, #12]
    14a8:	4770      	bx	lr
    14aa:	bf00      	nop
    14ac:	41008000 	.word	0x41008000
    14b0:	20000768 	.word	0x20000768
    14b4:	4100a000 	.word	0x4100a000
    14b8:	20000778 	.word	0x20000778
    14bc:	e000e100 	.word	0xe000e100

000014c0 <setup_transfer_descriptor>:
	
}

static void setup_transfer_descriptor(enum dma_transfer_descriptor_type type, DmacDescriptor *descriptor, const uint32_t start, 
										const uint32_t lenght, const uint32_t next_descriptor, uint16_t block_action)
{
    14c0:	b430      	push	{r4, r5}
}

static inline void hri_dmacdescriptor_set_BTCTRL_VALID_bit(const void *const hw)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    14c2:	880c      	ldrh	r4, [r1, #0]
    14c4:	b2a4      	uxth	r4, r4
    14c6:	f044 0401 	orr.w	r4, r4, #1
    14ca:	800c      	strh	r4, [r1, #0]

static inline void hri_dmacdescriptor_write_BTCTRL_EVOSEL_bf(const void *const hw, hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    14cc:	880c      	ldrh	r4, [r1, #0]
    14ce:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_EVOSEL_Msk;
	tmp |= DMAC_BTCTRL_EVOSEL(data);
    14d0:	f044 0406 	orr.w	r4, r4, #6
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    14d4:	800c      	strh	r4, [r1, #0]
static inline void hri_dmacdescriptor_write_BTCTRL_BLOCKACT_bf(const void *const               hw,
                                                               hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    14d6:	880c      	ldrh	r4, [r1, #0]
    14d8:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_BLOCKACT_Msk;
    14da:	f024 0418 	bic.w	r4, r4, #24
	tmp |= DMAC_BTCTRL_BLOCKACT(data);
    14de:	f8bd 500c 	ldrh.w	r5, [sp, #12]
    14e2:	00ed      	lsls	r5, r5, #3
    14e4:	f005 0518 	and.w	r5, r5, #24
    14e8:	432c      	orrs	r4, r5
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    14ea:	800c      	strh	r4, [r1, #0]
static inline void hri_dmacdescriptor_write_BTCTRL_BEATSIZE_bf(const void *const               hw,
                                                               hri_dmacdescriptor_btctrl_reg_t data)
{
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    14ec:	880c      	ldrh	r4, [r1, #0]
    14ee:	b2a4      	uxth	r4, r4
	tmp &= ~DMAC_BTCTRL_BEATSIZE_Msk;
    14f0:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    14f4:	b2a4      	uxth	r4, r4
	tmp |= DMAC_BTCTRL_BEATSIZE(data);
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    14f6:	800c      	strh	r4, [r1, #0]
	hri_dmacdescriptor_set_BTCTRL_VALID_bit(descriptor);										// 1.Validate the Descriptor
	hri_dmacdescriptor_write_BTCTRL_EVOSEL_bf(descriptor, DMAC_BTCTRL_EVOSEL_BURST_Val);		// 2. Define mentions 0x3 as Burst, but 0x3 = BEAT (Event strobe when beat transfer complete)
	hri_dmacdescriptor_write_BTCTRL_BLOCKACT_bf(descriptor, block_action);						// 3. block_action
	hri_dmacdescriptor_write_BTCTRL_BEATSIZE_bf(descriptor, DMAC_BTCTRL_BEATSIZE_BYTE_Val);		// 4. beat_size
		
	switch (type){
    14f8:	2803      	cmp	r0, #3
    14fa:	d814      	bhi.n	1526 <setup_transfer_descriptor+0x66>
    14fc:	e8df f000 	tbb	[pc, r0]
    1500:	4b253902 	.word	0x4b253902
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1504:	8808      	ldrh	r0, [r1, #0]
    1506:	b280      	uxth	r0, r0
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    1508:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    150c:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    150e:	8808      	ldrh	r0, [r1, #0]
    1510:	b280      	uxth	r0, r0
	tmp &= ~DMAC_BTCTRL_DSTINC;
    1512:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    1516:	b280      	uxth	r0, r0
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    1518:	8008      	strh	r0, [r1, #0]
		case DMA_TRANSFER_DESCRIPTOR_TX:
			hri_dmacdescriptor_write_BTCTRL_SRCINC_bit(descriptor, true);						// 5. src_increment_enable = true
			hri_dmacdescriptor_write_BTCTRL_DSTINC_bit(descriptor, false);						// 6. dst_increment_enable = false
			hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(descriptor, start+lenght);				// 10. source_address
    151a:	441a      	add	r2, r3
static inline void hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(const void *const                hw,
                                                               hri_dmacdescriptor_srcaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
    151c:	6848      	ldr	r0, [r1, #4]
	tmp &= ~DMAC_SRCADDR_SRCADDR_Msk;
	tmp |= DMAC_SRCADDR_SRCADDR(data);
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
    151e:	604a      	str	r2, [r1, #4]
static inline void hri_dmacdescriptor_write_DSTADDR_DSTADDR_bf(const void *const                hw,
                                                               hri_dmacdescriptor_dstaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
    1520:	688a      	ldr	r2, [r1, #8]
	tmp &= ~DMAC_DSTADDR_DSTADDR_Msk;
	tmp |= DMAC_DSTADDR_DSTADDR(data);
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
    1522:	4a26      	ldr	r2, [pc, #152]	; (15bc <setup_transfer_descriptor+0xfc>)
    1524:	608a      	str	r2, [r1, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1526:	880a      	ldrh	r2, [r1, #0]
    1528:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_STEPSEL;
    152a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    152e:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    1530:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1532:	880a      	ldrh	r2, [r1, #0]
	tmp &= ~DMAC_BTCTRL_STEPSIZE_Msk;
    1534:	f3c2 020c 	ubfx	r2, r2, #0, #13
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    1538:	800a      	strh	r2, [r1, #0]
		break;		
	}
	
	hri_dmacdescriptor_write_BTCTRL_STEPSEL_bit(descriptor, false);								// 7. step_selection = DMA_STEPSEL_DST
	hri_dmacdescriptor_write_BTCTRL_STEPSIZE_bf(descriptor, DMAC_BTCTRL_STEPSIZE_X1_Val);		// 8. step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1
	hri_dmacdescriptor_write_BTCNT_BTCNT_bf(descriptor, lenght);								// 9. block_transfer_count;
    153a:	b29b      	uxth	r3, r3
	tmp = ((DmacDescriptor *)hw)->BTCNT.reg;
    153c:	884a      	ldrh	r2, [r1, #2]
	((DmacDescriptor *)hw)->BTCNT.reg = tmp;
    153e:	804b      	strh	r3, [r1, #2]
static inline void hri_dmacdescriptor_write_DESCADDR_DESCADDR_bf(const void *const                 hw,
                                                                 hri_dmacdescriptor_descaddr_reg_t data)
{
	uint32_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->DESCADDR.reg;
    1540:	68cb      	ldr	r3, [r1, #12]
	tmp &= ~DMAC_DESCADDR_DESCADDR_Msk;
	tmp |= DMAC_DESCADDR_DESCADDR(data);
	((DmacDescriptor *)hw)->DESCADDR.reg = tmp;
    1542:	9b02      	ldr	r3, [sp, #8]
    1544:	60cb      	str	r3, [r1, #12]
	hri_dmacdescriptor_write_DESCADDR_DESCADDR_bf(descriptor, next_descriptor);					// 12. next_descriptor_address = 0;
    1546:	bc30      	pop	{r4, r5}
    1548:	4770      	bx	lr
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    154a:	880a      	ldrh	r2, [r1, #0]
    154c:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_SRCINC;
    154e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    1552:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    1554:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1556:	880a      	ldrh	r2, [r1, #0]
    1558:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_DSTINC;
    155a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    155e:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    1560:	800a      	strh	r2, [r1, #0]
			hri_dmacdescriptor_write_SRCADDR_SRCADDR_bf(descriptor, dummy_register);			// 10. source_address
    1562:	4a17      	ldr	r2, [pc, #92]	; (15c0 <setup_transfer_descriptor+0x100>)
    1564:	6812      	ldr	r2, [r2, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
    1566:	6848      	ldr	r0, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
    1568:	604a      	str	r2, [r1, #4]
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
    156a:	688a      	ldr	r2, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
    156c:	4a13      	ldr	r2, [pc, #76]	; (15bc <setup_transfer_descriptor+0xfc>)
    156e:	608a      	str	r2, [r1, #8]
    1570:	e7d9      	b.n	1526 <setup_transfer_descriptor+0x66>
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1572:	8808      	ldrh	r0, [r1, #0]
    1574:	b280      	uxth	r0, r0
	tmp &= ~DMAC_BTCTRL_SRCINC;
    1576:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    157a:	b280      	uxth	r0, r0
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    157c:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    157e:	8808      	ldrh	r0, [r1, #0]
    1580:	b280      	uxth	r0, r0
	tmp |= value << DMAC_BTCTRL_DSTINC_Pos;
    1582:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    1586:	8008      	strh	r0, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
    1588:	6848      	ldr	r0, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
    158a:	480c      	ldr	r0, [pc, #48]	; (15bc <setup_transfer_descriptor+0xfc>)
    158c:	6048      	str	r0, [r1, #4]
			hri_dmacdescriptor_write_DSTADDR_DSTADDR_bf(descriptor, start+lenght);				// 11. destination_address
    158e:	441a      	add	r2, r3
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
    1590:	6888      	ldr	r0, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
    1592:	608a      	str	r2, [r1, #8]
    1594:	e7c7      	b.n	1526 <setup_transfer_descriptor+0x66>
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1596:	880a      	ldrh	r2, [r1, #0]
    1598:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_SRCINC;
    159a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    159e:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    15a0:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    15a2:	880a      	ldrh	r2, [r1, #0]
    15a4:	b292      	uxth	r2, r2
	tmp &= ~DMAC_BTCTRL_DSTINC;
    15a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    15aa:	b292      	uxth	r2, r2
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    15ac:	800a      	strh	r2, [r1, #0]
	tmp = ((DmacDescriptor *)hw)->SRCADDR.reg;
    15ae:	684a      	ldr	r2, [r1, #4]
	((DmacDescriptor *)hw)->SRCADDR.reg = tmp;
    15b0:	4a02      	ldr	r2, [pc, #8]	; (15bc <setup_transfer_descriptor+0xfc>)
    15b2:	604a      	str	r2, [r1, #4]
	tmp = ((DmacDescriptor *)hw)->DSTADDR.reg;
    15b4:	688a      	ldr	r2, [r1, #8]
	((DmacDescriptor *)hw)->DSTADDR.reg = tmp;
    15b6:	4a03      	ldr	r2, [pc, #12]	; (15c4 <setup_transfer_descriptor+0x104>)
    15b8:	608a      	str	r2, [r1, #8]
    15ba:	e7b4      	b.n	1526 <setup_transfer_descriptor+0x66>
    15bc:	43000428 	.word	0x43000428
    15c0:	00005f14 	.word	0x00005f14
    15c4:	20000630 	.word	0x20000630

000015c8 <TC7_Handler>:
void TC7_Handler(void){
    15c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ca:	b083      	sub	sp, #12
	TC7->COUNT16.INTFLAG.bit.OVF =1;
    15cc:	4a16      	ldr	r2, [pc, #88]	; (1628 <TC7_Handler+0x60>)
    15ce:	7a93      	ldrb	r3, [r2, #10]
    15d0:	f043 0301 	orr.w	r3, r3, #1
    15d4:	7293      	strb	r3, [r2, #10]
		tx_ethercat = true;
    15d6:	2201      	movs	r2, #1
    15d8:	4b14      	ldr	r3, [pc, #80]	; (162c <TC7_Handler+0x64>)
    15da:	701a      	strb	r2, [r3, #0]
	if(tx_ethercat_done){
    15dc:	4b14      	ldr	r3, [pc, #80]	; (1630 <TC7_Handler+0x68>)
    15de:	781b      	ldrb	r3, [r3, #0]
    15e0:	b183      	cbz	r3, 1604 <TC7_Handler+0x3c>
		volatile int i=0;
    15e2:	2300      	movs	r3, #0
    15e4:	9301      	str	r3, [sp, #4]
    15e6:	4611      	mov	r1, r2
    15e8:	4a12      	ldr	r2, [pc, #72]	; (1634 <TC7_Handler+0x6c>)
    15ea:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
		DMAC->Channel[0].CHCTRLB.reg = 0x2; // Resume		
    15ee:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    15f2:	2102      	movs	r1, #2
    15f4:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
		DMAC->Channel[1].CHCTRLB.reg = 0x2; // Resume
    15f8:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
		tx_ethercat_done = false;
    15fc:	4a0c      	ldr	r2, [pc, #48]	; (1630 <TC7_Handler+0x68>)
    15fe:	7013      	strb	r3, [r2, #0]
	};
    1600:	b003      	add	sp, #12
    1602:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1604:	4b0b      	ldr	r3, [pc, #44]	; (1634 <TC7_Handler+0x6c>)
    1606:	2501      	movs	r5, #1
    1608:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
		tx_ethercat_done = false;
    160c:	4e08      	ldr	r6, [pc, #32]	; (1630 <TC7_Handler+0x68>)
    160e:	2400      	movs	r4, #0
    1610:	7034      	strb	r4, [r6, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1612:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
		_dma_enable_transaction(0,false);
    1616:	4621      	mov	r1, r4
    1618:	4620      	mov	r0, r4
    161a:	4f07      	ldr	r7, [pc, #28]	; (1638 <TC7_Handler+0x70>)
    161c:	47b8      	blx	r7
		_dma_enable_transaction(1,false);
    161e:	4621      	mov	r1, r4
    1620:	4628      	mov	r0, r5
    1622:	47b8      	blx	r7
		tx_ethercat_done = false;
    1624:	7034      	strb	r4, [r6, #0]
	};
    1626:	e7eb      	b.n	1600 <TC7_Handler+0x38>
    1628:	43001800 	.word	0x43001800
    162c:	20000730 	.word	0x20000730
    1630:	20000778 	.word	0x20000778
    1634:	41008000 	.word	0x41008000
    1638:	00002be1 	.word	0x00002be1

0000163c <configure_ethercat_dma_descriptors>:
{
    163c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1640:	b083      	sub	sp, #12
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX, &spi_abort_fifo_dma_descriptor, abort_fifo_start, abort_fifo_length, &spi_clear_rd_fifo_dma_descriptor, DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);			//DMA_BLOCK_ACTION_SUSPEND
    1642:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 17fc <configure_ethercat_dma_descriptors+0x1c0>
    1646:	4f61      	ldr	r7, [pc, #388]	; (17cc <configure_ethercat_dma_descriptors+0x190>)
    1648:	2602      	movs	r6, #2
    164a:	9601      	str	r6, [sp, #4]
    164c:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 1800 <configure_ethercat_dma_descriptors+0x1c4>
    1650:	f8cd 9000 	str.w	r9, [sp]
    1654:	2313      	movs	r3, #19
    1656:	f8d8 2004 	ldr.w	r2, [r8, #4]
    165a:	4639      	mov	r1, r7
    165c:	2000      	movs	r0, #0
    165e:	4d5c      	ldr	r5, [pc, #368]	; (17d0 <configure_ethercat_dma_descriptors+0x194>)
    1660:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_clear_rd_fifo_dma_descriptor,wr_pdram_start,wr_pdram_lenght+2*write_var_num,&spi_write_cl_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);	//DMA_BLOCK_ACTION_SUSPEND
    1662:	f8d8 b008 	ldr.w	fp, [r8, #8]
    1666:	9601      	str	r6, [sp, #4]
    1668:	4c5a      	ldr	r4, [pc, #360]	; (17d4 <configure_ethercat_dma_descriptors+0x198>)
    166a:	9400      	str	r4, [sp, #0]
    166c:	2323      	movs	r3, #35	; 0x23
    166e:	465a      	mov	r2, fp
    1670:	4649      	mov	r1, r9
    1672:	2000      	movs	r0, #0
    1674:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write_cl_fifo_dma_descriptor,cl_pdram_start,cl_pdram_lenght,&spi_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
    1676:	4b58      	ldr	r3, [pc, #352]	; (17d8 <configure_ethercat_dma_descriptors+0x19c>)
    1678:	681a      	ldr	r2, [r3, #0]
    167a:	f8df 9188 	ldr.w	r9, [pc, #392]	; 1804 <configure_ethercat_dma_descriptors+0x1c8>
    167e:	9601      	str	r6, [sp, #4]
    1680:	f8cd 9000 	str.w	r9, [sp]
    1684:	230b      	movs	r3, #11
    1686:	4621      	mov	r1, r4
    1688:	2000      	movs	r0, #0
    168a:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write_fifo_dma_descriptor,wr_pdram_start,wr_pdram_lenght,&spi_write2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);							//DMA_BLOCK_ACTION_NOACT
    168c:	2400      	movs	r4, #0
    168e:	9401      	str	r4, [sp, #4]
    1690:	f8df a174 	ldr.w	sl, [pc, #372]	; 1808 <configure_ethercat_dma_descriptors+0x1cc>
    1694:	f8cd a000 	str.w	sl, [sp]
    1698:	2303      	movs	r3, #3
    169a:	465a      	mov	r2, fp
    169c:	4649      	mov	r1, r9
    169e:	4620      	mov	r0, r4
    16a0:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_write2ram_dma_descriptor,&ram_buffer[ram_real_wr_start],2*write_var_num,&spi_config_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);		//DMA_BLOCK_ACTION_SUSPEND
    16a2:	9601      	str	r6, [sp, #4]
    16a4:	f8df b164 	ldr.w	fp, [pc, #356]	; 180c <configure_ethercat_dma_descriptors+0x1d0>
    16a8:	f8cd b000 	str.w	fp, [sp]
    16ac:	2320      	movs	r3, #32
    16ae:	4a4b      	ldr	r2, [pc, #300]	; (17dc <configure_ethercat_dma_descriptors+0x1a0>)
    16b0:	4651      	mov	r1, sl
    16b2:	4620      	mov	r0, r4
    16b4:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_config_fifo_dma_descriptor,cf_pdram_start,cf_pdram_lenght,&spi_read_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND		
    16b6:	9601      	str	r6, [sp, #4]
    16b8:	f8df a154 	ldr.w	sl, [pc, #340]	; 1810 <configure_ethercat_dma_descriptors+0x1d4>
    16bc:	f8cd a000 	str.w	sl, [sp]
    16c0:	2313      	movs	r3, #19
    16c2:	f8d8 200c 	ldr.w	r2, [r8, #12]
    16c6:	4659      	mov	r1, fp
    16c8:	4620      	mov	r0, r4
    16ca:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX,&spi_read_fifo_dma_descriptor,rd_pdram_start,rd_pdram_lenght,&spi_read2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);								//DMA_BLOCK_ACTION_NOACT
    16cc:	f8d8 2010 	ldr.w	r2, [r8, #16]
    16d0:	9401      	str	r4, [sp, #4]
    16d2:	f8df 8140 	ldr.w	r8, [pc, #320]	; 1814 <configure_ethercat_dma_descriptors+0x1d8>
    16d6:	f8cd 8000 	str.w	r8, [sp]
    16da:	2303      	movs	r3, #3
    16dc:	4651      	mov	r1, sl
    16de:	4620      	mov	r0, r4
    16e0:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_TX_DUMMY,&spi_read2ram_dma_descriptor,0,2*read_var_num,&spi_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);									//DMA_BLOCK_ACTION_SUSPEND
    16e2:	9601      	str	r6, [sp, #4]
    16e4:	f8cd 9000 	str.w	r9, [sp]
    16e8:	2320      	movs	r3, #32
    16ea:	4622      	mov	r2, r4
    16ec:	4641      	mov	r1, r8
    16ee:	4630      	mov	r0, r6
    16f0:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_abort_fifo_dma_descriptor,0,cf_pdram_lenght,&spi_rx_clear_rd_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
    16f2:	f8df 8124 	ldr.w	r8, [pc, #292]	; 1818 <configure_ethercat_dma_descriptors+0x1dc>
    16f6:	9601      	str	r6, [sp, #4]
    16f8:	f8df 9120 	ldr.w	r9, [pc, #288]	; 181c <configure_ethercat_dma_descriptors+0x1e0>
    16fc:	f8cd 9000 	str.w	r9, [sp]
    1700:	2313      	movs	r3, #19
    1702:	4622      	mov	r2, r4
    1704:	4641      	mov	r1, r8
    1706:	2003      	movs	r0, #3
    1708:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_clear_rd_fifo_dma_descriptor,0,wr_pdram_lenght+2*write_var_num,&spi_rx_write_cl_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);	//DMA_BLOCK_ACTION_SUSPEND
    170a:	9601      	str	r6, [sp, #4]
    170c:	f8df a110 	ldr.w	sl, [pc, #272]	; 1820 <configure_ethercat_dma_descriptors+0x1e4>
    1710:	f8cd a000 	str.w	sl, [sp]
    1714:	2323      	movs	r3, #35	; 0x23
    1716:	4622      	mov	r2, r4
    1718:	4649      	mov	r1, r9
    171a:	2003      	movs	r0, #3
    171c:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_write_cl_fifo_dma_descriptor,0,cl_pdram_lenght,&spi_rx_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);						//DMA_BLOCK_ACTION_SUSPEND
    171e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 1824 <configure_ethercat_dma_descriptors+0x1e8>
    1722:	9601      	str	r6, [sp, #4]
    1724:	f8cd 9000 	str.w	r9, [sp]
    1728:	230b      	movs	r3, #11
    172a:	4622      	mov	r2, r4
    172c:	4651      	mov	r1, sl
    172e:	2003      	movs	r0, #3
    1730:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_write_fifo_dma_descriptor,0,spi_head+2*write_var_num,&spi_rx_config_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);				//DMA_BLOCK_ACTION_SUSPEND
    1732:	9601      	str	r6, [sp, #4]
    1734:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1828 <configure_ethercat_dma_descriptors+0x1ec>
    1738:	f8cd a000 	str.w	sl, [sp]
    173c:	2323      	movs	r3, #35	; 0x23
    173e:	4622      	mov	r2, r4
    1740:	4649      	mov	r1, r9
    1742:	2003      	movs	r0, #3
    1744:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_config_fifo_dma_descriptor,0,cf_pdram_lenght,&spi_rx_read_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);							//DMA_BLOCK_ACTION_SUSPEND
    1746:	9601      	str	r6, [sp, #4]
    1748:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 182c <configure_ethercat_dma_descriptors+0x1f0>
    174c:	f8cd b000 	str.w	fp, [sp]
    1750:	2313      	movs	r3, #19
    1752:	4622      	mov	r2, r4
    1754:	4651      	mov	r1, sl
    1756:	2003      	movs	r0, #3
    1758:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX_DUMMY,&spi_rx_read_fifo_dma_descriptor,0,spi_head,&spi_rx_read2ram_dma_descriptor,DMAC_BTCTRL_BLOCKACT_NOACT_Val);										//DMA_BLOCK_ACTION_NOACT
    175a:	9401      	str	r4, [sp, #4]
    175c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1830 <configure_ethercat_dma_descriptors+0x1f4>
    1760:	f8cd a000 	str.w	sl, [sp]
    1764:	2303      	movs	r3, #3
    1766:	4622      	mov	r2, r4
    1768:	4659      	mov	r1, fp
    176a:	4618      	mov	r0, r3
    176c:	47a8      	blx	r5
	setup_transfer_descriptor(DMA_TRANSFER_DESCRIPTOR_RX,&spi_rx_read2ram_dma_descriptor,&ram_buffer[ram_rd_start],2*read_var_num,&spi_rx_write_fifo_dma_descriptor,DMAC_BTCTRL_BLOCKACT_SUSPEND_Val);			//DMA_BLOCK_ACTION_SUSPEND
    176e:	9601      	str	r6, [sp, #4]
    1770:	f8cd 9000 	str.w	r9, [sp]
    1774:	2320      	movs	r3, #32
    1776:	4a19      	ldr	r2, [pc, #100]	; (17dc <configure_ethercat_dma_descriptors+0x1a0>)
    1778:	3240      	adds	r2, #64	; 0x40
    177a:	4651      	mov	r1, sl
    177c:	2001      	movs	r0, #1
    177e:	47a8      	blx	r5
	spi_m_dma_register_callback(&SPI_0, SPI_DEV_CB_DMA_SUSPEND, LAN9252_rx_susp);
    1780:	4d17      	ldr	r5, [pc, #92]	; (17e0 <configure_ethercat_dma_descriptors+0x1a4>)
    1782:	4a18      	ldr	r2, [pc, #96]	; (17e4 <configure_ethercat_dma_descriptors+0x1a8>)
    1784:	4631      	mov	r1, r6
    1786:	4628      	mov	r0, r5
    1788:	4b17      	ldr	r3, [pc, #92]	; (17e8 <configure_ethercat_dma_descriptors+0x1ac>)
    178a:	4798      	blx	r3
	_dma_set_descriptor(0, spi_rx_abort_fifo_dma_descriptor);
    178c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    1790:	9300      	str	r3, [sp, #0]
    1792:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
    1796:	4620      	mov	r0, r4
    1798:	4e14      	ldr	r6, [pc, #80]	; (17ec <configure_ethercat_dma_descriptors+0x1b0>)
    179a:	47b0      	blx	r6
	_dma_set_descriptor(1, spi_abort_fifo_dma_descriptor);
    179c:	68fb      	ldr	r3, [r7, #12]
    179e:	9300      	str	r3, [sp, #0]
    17a0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
    17a4:	2001      	movs	r0, #1
    17a6:	47b0      	blx	r6
	spi_m_dma_enable(&SPI_0);
    17a8:	4628      	mov	r0, r5
    17aa:	4b11      	ldr	r3, [pc, #68]	; (17f0 <configure_ethercat_dma_descriptors+0x1b4>)
    17ac:	4798      	blx	r3
    17ae:	2601      	movs	r6, #1
    17b0:	4b10      	ldr	r3, [pc, #64]	; (17f4 <configure_ethercat_dma_descriptors+0x1b8>)
    17b2:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
	_dma_enable_transaction(0,false);
    17b6:	4621      	mov	r1, r4
    17b8:	4620      	mov	r0, r4
    17ba:	4d0f      	ldr	r5, [pc, #60]	; (17f8 <configure_ethercat_dma_descriptors+0x1bc>)
    17bc:	47a8      	blx	r5
	_dma_enable_transaction(1,false);
    17be:	4621      	mov	r1, r4
    17c0:	4630      	mov	r0, r6
    17c2:	47a8      	blx	r5
}
    17c4:	b003      	add	sp, #12
    17c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17ca:	bf00      	nop
    17cc:	20000720 	.word	0x20000720
    17d0:	000014c1 	.word	0x000014c1
    17d4:	20000748 	.word	0x20000748
    17d8:	20000000 	.word	0x20000000
    17dc:	20000670 	.word	0x20000670
    17e0:	20000580 	.word	0x20000580
    17e4:	00001469 	.word	0x00001469
    17e8:	00001e69 	.word	0x00001e69
    17ec:	00002c69 	.word	0x00002c69
    17f0:	00001e41 	.word	0x00001e41
    17f4:	41008000 	.word	0x41008000
    17f8:	00002be1 	.word	0x00002be1
    17fc:	00005f14 	.word	0x00005f14
    1800:	20000650 	.word	0x20000650
    1804:	20000600 	.word	0x20000600
    1808:	20000620 	.word	0x20000620
    180c:	20000710 	.word	0x20000710
    1810:	20000758 	.word	0x20000758
    1814:	20000610 	.word	0x20000610
    1818:	20000660 	.word	0x20000660
    181c:	200006f0 	.word	0x200006f0
    1820:	20000700 	.word	0x20000700
    1824:	20000768 	.word	0x20000768
    1828:	200005e0 	.word	0x200005e0
    182c:	200005f0 	.word	0x200005f0
    1830:	20000738 	.word	0x20000738

00001834 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    1834:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    1836:	6983      	ldr	r3, [r0, #24]
    1838:	b103      	cbz	r3, 183c <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    183a:	4798      	blx	r3
    183c:	bd08      	pop	{r3, pc}

0000183e <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    183e:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    1840:	69c3      	ldr	r3, [r0, #28]
    1842:	b103      	cbz	r3, 1846 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    1844:	4798      	blx	r3
    1846:	bd08      	pop	{r3, pc}

00001848 <adc_async_channel_conversion_done>:
{
    1848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    184c:	4605      	mov	r5, r0
    184e:	4688      	mov	r8, r1
    1850:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    1852:	6a03      	ldr	r3, [r0, #32]
    1854:	5c5b      	ldrb	r3, [r3, r1]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    1856:	6a87      	ldr	r7, [r0, #40]	; 0x28
    1858:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    185c:	00de      	lsls	r6, r3, #3
    185e:	19bc      	adds	r4, r7, r6
	ringbuffer_put(&descr_ch->convert, data);
    1860:	f104 0a04 	add.w	sl, r4, #4
    1864:	b2d1      	uxtb	r1, r2
    1866:	4650      	mov	r0, sl
    1868:	4b0c      	ldr	r3, [pc, #48]	; (189c <adc_async_channel_conversion_done+0x54>)
    186a:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    186c:	4628      	mov	r0, r5
    186e:	4b0c      	ldr	r3, [pc, #48]	; (18a0 <adc_async_channel_conversion_done+0x58>)
    1870:	4798      	blx	r3
    1872:	2801      	cmp	r0, #1
    1874:	d907      	bls.n	1886 <adc_async_channel_conversion_done+0x3e>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    1876:	ea4f 2119 	mov.w	r1, r9, lsr #8
    187a:	4650      	mov	r0, sl
    187c:	4b07      	ldr	r3, [pc, #28]	; (189c <adc_async_channel_conversion_done+0x54>)
    187e:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    1880:	8aa3      	ldrh	r3, [r4, #20]
    1882:	3301      	adds	r3, #1
    1884:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
    1886:	8aa3      	ldrh	r3, [r4, #20]
    1888:	3301      	adds	r3, #1
    188a:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    188c:	59bb      	ldr	r3, [r7, r6]
    188e:	b113      	cbz	r3, 1896 <adc_async_channel_conversion_done+0x4e>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    1890:	4641      	mov	r1, r8
    1892:	4628      	mov	r0, r5
    1894:	4798      	blx	r3
    1896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    189a:	bf00      	nop
    189c:	00002439 	.word	0x00002439
    18a0:	0000282b 	.word	0x0000282b

000018a4 <adc_async_init>:
{
    18a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18a8:	4689      	mov	r9, r1
    18aa:	4616      	mov	r6, r2
    18ac:	461c      	mov	r4, r3
    18ae:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    18b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    18b4:	4607      	mov	r7, r0
    18b6:	b148      	cbz	r0, 18cc <adc_async_init+0x28>
    18b8:	b151      	cbz	r1, 18d0 <adc_async_init+0x2c>
    18ba:	b15a      	cbz	r2, 18d4 <adc_async_init+0x30>
    18bc:	f1b8 0f00 	cmp.w	r8, #0
    18c0:	d00a      	beq.n	18d8 <adc_async_init+0x34>
    18c2:	b10d      	cbz	r5, 18c8 <adc_async_init+0x24>
    18c4:	2001      	movs	r0, #1
    18c6:	e008      	b.n	18da <adc_async_init+0x36>
    18c8:	2000      	movs	r0, #0
    18ca:	e006      	b.n	18da <adc_async_init+0x36>
    18cc:	2000      	movs	r0, #0
    18ce:	e004      	b.n	18da <adc_async_init+0x36>
    18d0:	2000      	movs	r0, #0
    18d2:	e002      	b.n	18da <adc_async_init+0x36>
    18d4:	2000      	movs	r0, #0
    18d6:	e000      	b.n	18da <adc_async_init+0x36>
    18d8:	2000      	movs	r0, #0
    18da:	f8df b068 	ldr.w	fp, [pc, #104]	; 1944 <adc_async_init+0xa0>
    18de:	223f      	movs	r2, #63	; 0x3f
    18e0:	4659      	mov	r1, fp
    18e2:	f8df a064 	ldr.w	sl, [pc, #100]	; 1948 <adc_async_init+0xa4>
    18e6:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    18e8:	1c60      	adds	r0, r4, #1
    18ea:	2240      	movs	r2, #64	; 0x40
    18ec:	4659      	mov	r1, fp
    18ee:	4580      	cmp	r8, r0
    18f0:	bfcc      	ite	gt
    18f2:	2000      	movgt	r0, #0
    18f4:	2001      	movle	r0, #1
    18f6:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
    18f8:	2300      	movs	r3, #0
    18fa:	e003      	b.n	1904 <adc_async_init+0x60>
		channel_map[i] = 0xFF;
    18fc:	22ff      	movs	r2, #255	; 0xff
    18fe:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
    1900:	3301      	adds	r3, #1
    1902:	b2db      	uxtb	r3, r3
    1904:	42a3      	cmp	r3, r4
    1906:	d9f9      	bls.n	18fc <adc_async_init+0x58>
	descr->channel_map    = channel_map;
    1908:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    190a:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    190e:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    1912:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    1914:	4649      	mov	r1, r9
    1916:	4638      	mov	r0, r7
    1918:	4b06      	ldr	r3, [pc, #24]	; (1934 <adc_async_init+0x90>)
    191a:	4798      	blx	r3
	if (init_status) {
    191c:	4603      	mov	r3, r0
    191e:	b928      	cbnz	r0, 192c <adc_async_init+0x88>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    1920:	4a05      	ldr	r2, [pc, #20]	; (1938 <adc_async_init+0x94>)
    1922:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    1924:	4a05      	ldr	r2, [pc, #20]	; (193c <adc_async_init+0x98>)
    1926:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    1928:	4a05      	ldr	r2, [pc, #20]	; (1940 <adc_async_init+0x9c>)
    192a:	607a      	str	r2, [r7, #4]
}
    192c:	4618      	mov	r0, r3
    192e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1932:	bf00      	nop
    1934:	00002701 	.word	0x00002701
    1938:	00001849 	.word	0x00001849
    193c:	00001835 	.word	0x00001835
    1940:	0000183f 	.word	0x0000183f
    1944:	00005f28 	.word	0x00005f28
    1948:	0000234d 	.word	0x0000234d

0000194c <adc_async_register_channel_buffer>:
{
    194c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1950:	460e      	mov	r6, r1
    1952:	4617      	mov	r7, r2
    1954:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    1956:	4605      	mov	r5, r0
    1958:	b1c0      	cbz	r0, 198c <adc_async_register_channel_buffer+0x40>
    195a:	b1ca      	cbz	r2, 1990 <adc_async_register_channel_buffer+0x44>
    195c:	b9d3      	cbnz	r3, 1994 <adc_async_register_channel_buffer+0x48>
    195e:	2000      	movs	r0, #0
    1960:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1a00 <adc_async_register_channel_buffer+0xb4>
    1964:	2266      	movs	r2, #102	; 0x66
    1966:	4649      	mov	r1, r9
    1968:	4c23      	ldr	r4, [pc, #140]	; (19f8 <adc_async_register_channel_buffer+0xac>)
    196a:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    196c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    1970:	2267      	movs	r2, #103	; 0x67
    1972:	4649      	mov	r1, r9
    1974:	42b0      	cmp	r0, r6
    1976:	bf34      	ite	cc
    1978:	2000      	movcc	r0, #0
    197a:	2001      	movcs	r0, #1
    197c:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    197e:	6a29      	ldr	r1, [r5, #32]
    1980:	5d8b      	ldrb	r3, [r1, r6]
    1982:	2bff      	cmp	r3, #255	; 0xff
    1984:	d12f      	bne.n	19e6 <adc_async_register_channel_buffer+0x9a>
    1986:	2400      	movs	r4, #0
    1988:	4623      	mov	r3, r4
    198a:	e007      	b.n	199c <adc_async_register_channel_buffer+0x50>
	ASSERT(descr && convert_buffer && convert_buffer_length);
    198c:	2000      	movs	r0, #0
    198e:	e7e7      	b.n	1960 <adc_async_register_channel_buffer+0x14>
    1990:	2000      	movs	r0, #0
    1992:	e7e5      	b.n	1960 <adc_async_register_channel_buffer+0x14>
    1994:	2001      	movs	r0, #1
    1996:	e7e3      	b.n	1960 <adc_async_register_channel_buffer+0x14>
	for (i = 0; i <= descr->channel_max; i++) {
    1998:	3301      	adds	r3, #1
    199a:	b2db      	uxtb	r3, r3
    199c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
    19a0:	4293      	cmp	r3, r2
    19a2:	d805      	bhi.n	19b0 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
    19a4:	5cca      	ldrb	r2, [r1, r3]
    19a6:	2aff      	cmp	r2, #255	; 0xff
    19a8:	d0f6      	beq.n	1998 <adc_async_register_channel_buffer+0x4c>
			index++;
    19aa:	3401      	adds	r4, #1
    19ac:	b2e4      	uxtb	r4, r4
    19ae:	e7f3      	b.n	1998 <adc_async_register_channel_buffer+0x4c>
	if (index > descr->channel_amount) {
    19b0:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    19b4:	429c      	cmp	r4, r3
    19b6:	d819      	bhi.n	19ec <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    19b8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    19ba:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    19be:	ea4f 09c3 	mov.w	r9, r3, lsl #3
    19c2:	4448      	add	r0, r9
    19c4:	4642      	mov	r2, r8
    19c6:	4639      	mov	r1, r7
    19c8:	3004      	adds	r0, #4
    19ca:	4b0c      	ldr	r3, [pc, #48]	; (19fc <adc_async_register_channel_buffer+0xb0>)
    19cc:	4798      	blx	r3
    19ce:	4602      	mov	r2, r0
    19d0:	b978      	cbnz	r0, 19f2 <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    19d2:	6a2b      	ldr	r3, [r5, #32]
    19d4:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    19d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    19d8:	4499      	add	r9, r3
    19da:	2300      	movs	r3, #0
    19dc:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    19e0:	4610      	mov	r0, r2
    19e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
    19e6:	f06f 020c 	mvn.w	r2, #12
    19ea:	e7f9      	b.n	19e0 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
    19ec:	f06f 021b 	mvn.w	r2, #27
    19f0:	e7f6      	b.n	19e0 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
    19f2:	f06f 020c 	mvn.w	r2, #12
    19f6:	e7f3      	b.n	19e0 <adc_async_register_channel_buffer+0x94>
    19f8:	0000234d 	.word	0x0000234d
    19fc:	000023ad 	.word	0x000023ad
    1a00:	00005f28 	.word	0x00005f28

00001a04 <adc_async_enable_channel>:
{
    1a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a06:	460d      	mov	r5, r1
	ASSERT(descr);
    1a08:	4f0b      	ldr	r7, [pc, #44]	; (1a38 <adc_async_enable_channel+0x34>)
    1a0a:	4604      	mov	r4, r0
    1a0c:	2283      	movs	r2, #131	; 0x83
    1a0e:	4639      	mov	r1, r7
    1a10:	3000      	adds	r0, #0
    1a12:	bf18      	it	ne
    1a14:	2001      	movne	r0, #1
    1a16:	4e09      	ldr	r6, [pc, #36]	; (1a3c <adc_async_enable_channel+0x38>)
    1a18:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    1a1a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    1a1e:	2284      	movs	r2, #132	; 0x84
    1a20:	4639      	mov	r1, r7
    1a22:	42a8      	cmp	r0, r5
    1a24:	bf34      	ite	cc
    1a26:	2000      	movcc	r0, #0
    1a28:	2001      	movcs	r0, #1
    1a2a:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    1a2c:	4629      	mov	r1, r5
    1a2e:	4620      	mov	r0, r4
    1a30:	4b03      	ldr	r3, [pc, #12]	; (1a40 <adc_async_enable_channel+0x3c>)
    1a32:	4798      	blx	r3
}
    1a34:	2000      	movs	r0, #0
    1a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a38:	00005f28 	.word	0x00005f28
    1a3c:	0000234d 	.word	0x0000234d
    1a40:	00002815 	.word	0x00002815

00001a44 <adc_async_register_callback>:
{
    1a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1a48:	460e      	mov	r6, r1
    1a4a:	4615      	mov	r5, r2
    1a4c:	4699      	mov	r9, r3
	ASSERT(descr);
    1a4e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1ac4 <adc_async_register_callback+0x80>
    1a52:	4604      	mov	r4, r0
    1a54:	229c      	movs	r2, #156	; 0x9c
    1a56:	4641      	mov	r1, r8
    1a58:	3000      	adds	r0, #0
    1a5a:	bf18      	it	ne
    1a5c:	2001      	movne	r0, #1
    1a5e:	4f17      	ldr	r7, [pc, #92]	; (1abc <adc_async_register_callback+0x78>)
    1a60:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
    1a62:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    1a66:	229d      	movs	r2, #157	; 0x9d
    1a68:	4641      	mov	r1, r8
    1a6a:	42b0      	cmp	r0, r6
    1a6c:	bf34      	ite	cc
    1a6e:	2000      	movcc	r0, #0
    1a70:	2001      	movcs	r0, #1
    1a72:	47b8      	blx	r7
	uint8_t index = descr->channel_map[channel];
    1a74:	6a23      	ldr	r3, [r4, #32]
    1a76:	5d9b      	ldrb	r3, [r3, r6]
	switch (type) {
    1a78:	2d01      	cmp	r5, #1
    1a7a:	d018      	beq.n	1aae <adc_async_register_callback+0x6a>
    1a7c:	b12d      	cbz	r5, 1a8a <adc_async_register_callback+0x46>
    1a7e:	2d02      	cmp	r5, #2
    1a80:	d018      	beq.n	1ab4 <adc_async_register_callback+0x70>
		return ERR_INVALID_ARG;
    1a82:	f06f 000c 	mvn.w	r0, #12
}
    1a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    1a8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1a8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a90:	00da      	lsls	r2, r3, #3
    1a92:	f841 9002 	str.w	r9, [r1, r2]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    1a96:	f119 0300 	adds.w	r3, r9, #0
    1a9a:	bf18      	it	ne
    1a9c:	2301      	movne	r3, #1
    1a9e:	462a      	mov	r2, r5
    1aa0:	4631      	mov	r1, r6
    1aa2:	4620      	mov	r0, r4
    1aa4:	4c06      	ldr	r4, [pc, #24]	; (1ac0 <adc_async_register_callback+0x7c>)
    1aa6:	47a0      	blx	r4
	return ERR_NONE;
    1aa8:	2000      	movs	r0, #0
    1aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		descr->adc_async_cb.monitor = cb;
    1aae:	f8c4 9018 	str.w	r9, [r4, #24]
		break;
    1ab2:	e7f0      	b.n	1a96 <adc_async_register_callback+0x52>
		descr->adc_async_cb.error = cb;
    1ab4:	f8c4 901c 	str.w	r9, [r4, #28]
		break;
    1ab8:	e7ed      	b.n	1a96 <adc_async_register_callback+0x52>
    1aba:	bf00      	nop
    1abc:	0000234d 	.word	0x0000234d
    1ac0:	00002855 	.word	0x00002855
    1ac4:	00005f28 	.word	0x00005f28

00001ac8 <adc_async_read_channel>:
{
    1ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1acc:	b083      	sub	sp, #12
    1ace:	4689      	mov	r9, r1
    1ad0:	4690      	mov	r8, r2
    1ad2:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    1ad4:	4604      	mov	r4, r0
    1ad6:	2800      	cmp	r0, #0
    1ad8:	d036      	beq.n	1b48 <adc_async_read_channel+0x80>
    1ada:	2a00      	cmp	r2, #0
    1adc:	d036      	beq.n	1b4c <adc_async_read_channel+0x84>
    1ade:	2b00      	cmp	r3, #0
    1ae0:	d136      	bne.n	1b50 <adc_async_read_channel+0x88>
    1ae2:	2000      	movs	r0, #0
    1ae4:	4f25      	ldr	r7, [pc, #148]	; (1b7c <adc_async_read_channel+0xb4>)
    1ae6:	22bc      	movs	r2, #188	; 0xbc
    1ae8:	4639      	mov	r1, r7
    1aea:	4e25      	ldr	r6, [pc, #148]	; (1b80 <adc_async_read_channel+0xb8>)
    1aec:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    1aee:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    1af2:	22bd      	movs	r2, #189	; 0xbd
    1af4:	4639      	mov	r1, r7
    1af6:	4548      	cmp	r0, r9
    1af8:	bf34      	ite	cc
    1afa:	2000      	movcc	r0, #0
    1afc:	2001      	movcs	r0, #1
    1afe:	47b0      	blx	r6
	data_size = _adc_async_get_data_size(&descr->device);
    1b00:	4620      	mov	r0, r4
    1b02:	4b20      	ldr	r3, [pc, #128]	; (1b84 <adc_async_read_channel+0xbc>)
    1b04:	4798      	blx	r3
	ASSERT(!(length % data_size));
    1b06:	fb95 f3f0 	sdiv	r3, r5, r0
    1b0a:	fb00 5013 	mls	r0, r0, r3, r5
    1b0e:	22bf      	movs	r2, #191	; 0xbf
    1b10:	4639      	mov	r1, r7
    1b12:	fab0 f080 	clz	r0, r0
    1b16:	0940      	lsrs	r0, r0, #5
    1b18:	47b0      	blx	r6
	index                                         = descr->channel_map[channel];
    1b1a:	6a23      	ldr	r3, [r4, #32]
    1b1c:	f813 3009 	ldrb.w	r3, [r3, r9]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    1b20:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1b22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b26:	00da      	lsls	r2, r3, #3
    1b28:	eb01 0902 	add.w	r9, r1, r2
	CRITICAL_SECTION_ENTER()
    1b2c:	a801      	add	r0, sp, #4
    1b2e:	4b16      	ldr	r3, [pc, #88]	; (1b88 <adc_async_read_channel+0xc0>)
    1b30:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    1b32:	f109 0704 	add.w	r7, r9, #4
    1b36:	4638      	mov	r0, r7
    1b38:	4b14      	ldr	r3, [pc, #80]	; (1b8c <adc_async_read_channel+0xc4>)
    1b3a:	4798      	blx	r3
    1b3c:	4606      	mov	r6, r0
	CRITICAL_SECTION_LEAVE()
    1b3e:	a801      	add	r0, sp, #4
    1b40:	4b13      	ldr	r3, [pc, #76]	; (1b90 <adc_async_read_channel+0xc8>)
    1b42:	4798      	blx	r3
	uint16_t was_read = 0;
    1b44:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
    1b46:	e00b      	b.n	1b60 <adc_async_read_channel+0x98>
	ASSERT(descr && buffer && length);
    1b48:	2000      	movs	r0, #0
    1b4a:	e7cb      	b.n	1ae4 <adc_async_read_channel+0x1c>
    1b4c:	2000      	movs	r0, #0
    1b4e:	e7c9      	b.n	1ae4 <adc_async_read_channel+0x1c>
    1b50:	2001      	movs	r0, #1
    1b52:	e7c7      	b.n	1ae4 <adc_async_read_channel+0x1c>
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    1b54:	3401      	adds	r4, #1
    1b56:	b2a4      	uxth	r4, r4
    1b58:	4441      	add	r1, r8
    1b5a:	4638      	mov	r0, r7
    1b5c:	4b0d      	ldr	r3, [pc, #52]	; (1b94 <adc_async_read_channel+0xcc>)
    1b5e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1b60:	4621      	mov	r1, r4
    1b62:	42a6      	cmp	r6, r4
    1b64:	d901      	bls.n	1b6a <adc_async_read_channel+0xa2>
    1b66:	42ac      	cmp	r4, r5
    1b68:	d3f4      	bcc.n	1b54 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
    1b6a:	f8b9 3014 	ldrh.w	r3, [r9, #20]
    1b6e:	1b1b      	subs	r3, r3, r4
    1b70:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    1b74:	4620      	mov	r0, r4
    1b76:	b003      	add	sp, #12
    1b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1b7c:	00005f28 	.word	0x00005f28
    1b80:	0000234d 	.word	0x0000234d
    1b84:	0000282b 	.word	0x0000282b
    1b88:	00001bc1 	.word	0x00001bc1
    1b8c:	00002479 	.word	0x00002479
    1b90:	00001bcf 	.word	0x00001bcf
    1b94:	000023f1 	.word	0x000023f1

00001b98 <adc_async_start_conversion>:
{
    1b98:	b510      	push	{r4, lr}
	ASSERT(descr);
    1b9a:	4604      	mov	r4, r0
    1b9c:	22d6      	movs	r2, #214	; 0xd6
    1b9e:	4905      	ldr	r1, [pc, #20]	; (1bb4 <adc_async_start_conversion+0x1c>)
    1ba0:	3000      	adds	r0, #0
    1ba2:	bf18      	it	ne
    1ba4:	2001      	movne	r0, #1
    1ba6:	4b04      	ldr	r3, [pc, #16]	; (1bb8 <adc_async_start_conversion+0x20>)
    1ba8:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    1baa:	4620      	mov	r0, r4
    1bac:	4b03      	ldr	r3, [pc, #12]	; (1bbc <adc_async_start_conversion+0x24>)
    1bae:	4798      	blx	r3
}
    1bb0:	2000      	movs	r0, #0
    1bb2:	bd10      	pop	{r4, pc}
    1bb4:	00005f28 	.word	0x00005f28
    1bb8:	0000234d 	.word	0x0000234d
    1bbc:	0000283f 	.word	0x0000283f

00001bc0 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1bc0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1bc4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1bc6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1bc8:	f3bf 8f5f 	dmb	sy
    1bcc:	4770      	bx	lr

00001bce <atomic_leave_critical>:
    1bce:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1bd2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1bd4:	f383 8810 	msr	PRIMASK, r3
    1bd8:	4770      	bx	lr
	...

00001bdc <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1bdc:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1bde:	4b02      	ldr	r3, [pc, #8]	; (1be8 <delay_init+0xc>)
    1be0:	6018      	str	r0, [r3, #0]
    1be2:	4b02      	ldr	r3, [pc, #8]	; (1bec <delay_init+0x10>)
    1be4:	4798      	blx	r3
    1be6:	bd08      	pop	{r3, pc}
    1be8:	20000250 	.word	0x20000250
    1bec:	00003e41 	.word	0x00003e41

00001bf0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1bf0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1bf2:	4b04      	ldr	r3, [pc, #16]	; (1c04 <delay_ms+0x14>)
    1bf4:	681c      	ldr	r4, [r3, #0]
    1bf6:	4b04      	ldr	r3, [pc, #16]	; (1c08 <delay_ms+0x18>)
    1bf8:	4798      	blx	r3
    1bfa:	4601      	mov	r1, r0
    1bfc:	4620      	mov	r0, r4
    1bfe:	4b03      	ldr	r3, [pc, #12]	; (1c0c <delay_ms+0x1c>)
    1c00:	4798      	blx	r3
    1c02:	bd10      	pop	{r4, pc}
    1c04:	20000250 	.word	0x20000250
    1c08:	000028dd 	.word	0x000028dd
    1c0c:	00003e4d 	.word	0x00003e4d

00001c10 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1c10:	b510      	push	{r4, lr}
    1c12:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1c14:	8903      	ldrh	r3, [r0, #8]
    1c16:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1c1a:	4614      	mov	r4, r2
    1c1c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    1c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1c22:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    1c26:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1c28:	a901      	add	r1, sp, #4
    1c2a:	3814      	subs	r0, #20
    1c2c:	4b03      	ldr	r3, [pc, #12]	; (1c3c <i2c_m_sync_write+0x2c>)
    1c2e:	4798      	blx	r3

	if (ret) {
    1c30:	b910      	cbnz	r0, 1c38 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
    1c32:	4620      	mov	r0, r4
    1c34:	b004      	add	sp, #16
    1c36:	bd10      	pop	{r4, pc}
		return ret;
    1c38:	4604      	mov	r4, r0
    1c3a:	e7fa      	b.n	1c32 <i2c_m_sync_write+0x22>
    1c3c:	0000355d 	.word	0x0000355d

00001c40 <i2c_m_sync_read>:
{
    1c40:	b510      	push	{r4, lr}
    1c42:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
    1c44:	8903      	ldrh	r3, [r0, #8]
    1c46:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1c4a:	4614      	mov	r4, r2
    1c4c:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1c4e:	f248 0301 	movw	r3, #32769	; 0x8001
    1c52:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    1c56:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1c58:	a901      	add	r1, sp, #4
    1c5a:	3814      	subs	r0, #20
    1c5c:	4b03      	ldr	r3, [pc, #12]	; (1c6c <i2c_m_sync_read+0x2c>)
    1c5e:	4798      	blx	r3
	if (ret) {
    1c60:	b910      	cbnz	r0, 1c68 <i2c_m_sync_read+0x28>
}
    1c62:	4620      	mov	r0, r4
    1c64:	b004      	add	sp, #16
    1c66:	bd10      	pop	{r4, pc}
		return ret;
    1c68:	4604      	mov	r4, r0
    1c6a:	e7fa      	b.n	1c62 <i2c_m_sync_read+0x22>
    1c6c:	0000355d 	.word	0x0000355d

00001c70 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    1c70:	b538      	push	{r3, r4, r5, lr}
    1c72:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    1c74:	4604      	mov	r4, r0
    1c76:	225e      	movs	r2, #94	; 0x5e
    1c78:	4908      	ldr	r1, [pc, #32]	; (1c9c <i2c_m_sync_init+0x2c>)
    1c7a:	3000      	adds	r0, #0
    1c7c:	bf18      	it	ne
    1c7e:	2001      	movne	r0, #1
    1c80:	4b07      	ldr	r3, [pc, #28]	; (1ca0 <i2c_m_sync_init+0x30>)
    1c82:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    1c84:	4629      	mov	r1, r5
    1c86:	4620      	mov	r0, r4
    1c88:	4b06      	ldr	r3, [pc, #24]	; (1ca4 <i2c_m_sync_init+0x34>)
    1c8a:	4798      	blx	r3
	if (init_status) {
    1c8c:	4603      	mov	r3, r0
    1c8e:	b918      	cbnz	r0, 1c98 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    1c90:	4a05      	ldr	r2, [pc, #20]	; (1ca8 <i2c_m_sync_init+0x38>)
    1c92:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
    1c94:	4a05      	ldr	r2, [pc, #20]	; (1cac <i2c_m_sync_init+0x3c>)
    1c96:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
    1c98:	4618      	mov	r0, r3
    1c9a:	bd38      	pop	{r3, r4, r5, pc}
    1c9c:	00005f44 	.word	0x00005f44
    1ca0:	0000234d 	.word	0x0000234d
    1ca4:	000034b5 	.word	0x000034b5
    1ca8:	00001c41 	.word	0x00001c41
    1cac:	00001c11 	.word	0x00001c11

00001cb0 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    1cb0:	b508      	push	{r3, lr}
	return _i2c_m_sync_enable(&i2c->device);
    1cb2:	4b01      	ldr	r3, [pc, #4]	; (1cb8 <i2c_m_sync_enable+0x8>)
    1cb4:	4798      	blx	r3
}
    1cb6:	bd08      	pop	{r3, pc}
    1cb8:	000034e5 	.word	0x000034e5

00001cbc <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    1cbc:	f3c1 0109 	ubfx	r1, r1, #0, #10
    1cc0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
    1cc4:	430a      	orrs	r2, r1
    1cc6:	8382      	strh	r2, [r0, #28]
}
    1cc8:	4610      	mov	r0, r2
    1cca:	4770      	bx	lr

00001ccc <i2c_m_sync_cmd_read>:

/**
 * \brief Sync version of i2c read command
 */
int32_t i2c_m_sync_cmd_read(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *buffer, uint8_t length)
{
    1ccc:	b570      	push	{r4, r5, r6, lr}
    1cce:	b086      	sub	sp, #24
    1cd0:	4604      	mov	r4, r0
    1cd2:	4616      	mov	r6, r2
    1cd4:	461d      	mov	r5, r3
    1cd6:	f88d 1007 	strb.w	r1, [sp, #7]
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
    1cda:	8b83      	ldrh	r3, [r0, #28]
    1cdc:	f8ad 300c 	strh.w	r3, [sp, #12]
	msg.len    = 1;
    1ce0:	2301      	movs	r3, #1
    1ce2:	9304      	str	r3, [sp, #16]
	msg.flags  = 0;
    1ce4:	2300      	movs	r3, #0
    1ce6:	f8ad 300e 	strh.w	r3, [sp, #14]
	msg.buffer = &reg;
    1cea:	f10d 0307 	add.w	r3, sp, #7
    1cee:	9305      	str	r3, [sp, #20]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1cf0:	a903      	add	r1, sp, #12
    1cf2:	4b09      	ldr	r3, [pc, #36]	; (1d18 <i2c_m_sync_cmd_read+0x4c>)
    1cf4:	4798      	blx	r3

	if (ret != 0) {
    1cf6:	4603      	mov	r3, r0
    1cf8:	b110      	cbz	r0, 1d00 <i2c_m_sync_cmd_read+0x34>
		/* error occurred */
		return ret;
	}

	return ERR_NONE;
}
    1cfa:	4618      	mov	r0, r3
    1cfc:	b006      	add	sp, #24
    1cfe:	bd70      	pop	{r4, r5, r6, pc}
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1d00:	f248 0301 	movw	r3, #32769	; 0x8001
    1d04:	f8ad 300e 	strh.w	r3, [sp, #14]
	msg.buffer = buffer;
    1d08:	9605      	str	r6, [sp, #20]
	msg.len    = length;
    1d0a:	9504      	str	r5, [sp, #16]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1d0c:	a903      	add	r1, sp, #12
    1d0e:	4620      	mov	r0, r4
    1d10:	4b01      	ldr	r3, [pc, #4]	; (1d18 <i2c_m_sync_cmd_read+0x4c>)
    1d12:	4798      	blx	r3
    1d14:	4603      	mov	r3, r0
    1d16:	e7f0      	b.n	1cfa <i2c_m_sync_cmd_read+0x2e>
    1d18:	0000355d 	.word	0x0000355d

00001d1c <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
    1d1c:	3014      	adds	r0, #20
    1d1e:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
    1d20:	2000      	movs	r0, #0
    1d22:	4770      	bx	lr

00001d24 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1d24:	b570      	push	{r4, r5, r6, lr}
    1d26:	460d      	mov	r5, r1
    1d28:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    1d2a:	4604      	mov	r4, r0
    1d2c:	b168      	cbz	r0, 1d4a <io_write+0x26>
    1d2e:	b151      	cbz	r1, 1d46 <io_write+0x22>
    1d30:	2001      	movs	r0, #1
    1d32:	2234      	movs	r2, #52	; 0x34
    1d34:	4906      	ldr	r1, [pc, #24]	; (1d50 <io_write+0x2c>)
    1d36:	4b07      	ldr	r3, [pc, #28]	; (1d54 <io_write+0x30>)
    1d38:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1d3a:	6823      	ldr	r3, [r4, #0]
    1d3c:	4632      	mov	r2, r6
    1d3e:	4629      	mov	r1, r5
    1d40:	4620      	mov	r0, r4
    1d42:	4798      	blx	r3
}
    1d44:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    1d46:	2000      	movs	r0, #0
    1d48:	e7f3      	b.n	1d32 <io_write+0xe>
    1d4a:	2000      	movs	r0, #0
    1d4c:	e7f1      	b.n	1d32 <io_write+0xe>
    1d4e:	bf00      	nop
    1d50:	00005f60 	.word	0x00005f60
    1d54:	0000234d 	.word	0x0000234d

00001d58 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1d58:	b570      	push	{r4, r5, r6, lr}
    1d5a:	460d      	mov	r5, r1
    1d5c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    1d5e:	4604      	mov	r4, r0
    1d60:	b168      	cbz	r0, 1d7e <io_read+0x26>
    1d62:	b151      	cbz	r1, 1d7a <io_read+0x22>
    1d64:	2001      	movs	r0, #1
    1d66:	223d      	movs	r2, #61	; 0x3d
    1d68:	4906      	ldr	r1, [pc, #24]	; (1d84 <io_read+0x2c>)
    1d6a:	4b07      	ldr	r3, [pc, #28]	; (1d88 <io_read+0x30>)
    1d6c:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1d6e:	6863      	ldr	r3, [r4, #4]
    1d70:	4632      	mov	r2, r6
    1d72:	4629      	mov	r1, r5
    1d74:	4620      	mov	r0, r4
    1d76:	4798      	blx	r3
}
    1d78:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    1d7a:	2000      	movs	r0, #0
    1d7c:	e7f3      	b.n	1d66 <io_read+0xe>
    1d7e:	2000      	movs	r0, #0
    1d80:	e7f1      	b.n	1d66 <io_read+0xe>
    1d82:	bf00      	nop
    1d84:	00005f60 	.word	0x00005f60
    1d88:	0000234d 	.word	0x0000234d

00001d8c <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    1d8c:	b570      	push	{r4, r5, r6, lr}
    1d8e:	460d      	mov	r5, r1
    1d90:	4616      	mov	r6, r2
	ASSERT(io);
    1d92:	4604      	mov	r4, r0
    1d94:	2298      	movs	r2, #152	; 0x98
    1d96:	4907      	ldr	r1, [pc, #28]	; (1db4 <_spi_m_dma_io_write+0x28>)
    1d98:	3000      	adds	r0, #0
    1d9a:	bf18      	it	ne
    1d9c:	2001      	movne	r0, #1
    1d9e:	4b06      	ldr	r3, [pc, #24]	; (1db8 <_spi_m_dma_io_write+0x2c>)
    1da0:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    1da2:	4633      	mov	r3, r6
    1da4:	2200      	movs	r2, #0
    1da6:	4629      	mov	r1, r5
    1da8:	f1a4 0020 	sub.w	r0, r4, #32
    1dac:	4c03      	ldr	r4, [pc, #12]	; (1dbc <_spi_m_dma_io_write+0x30>)
    1dae:	47a0      	blx	r4
}
    1db0:	bd70      	pop	{r4, r5, r6, pc}
    1db2:	bf00      	nop
    1db4:	00005f74 	.word	0x00005f74
    1db8:	0000234d 	.word	0x0000234d
    1dbc:	00003d0d 	.word	0x00003d0d

00001dc0 <_spi_m_dma_io_read>:
{
    1dc0:	b570      	push	{r4, r5, r6, lr}
    1dc2:	460d      	mov	r5, r1
    1dc4:	4616      	mov	r6, r2
	ASSERT(io);
    1dc6:	4604      	mov	r4, r0
    1dc8:	2281      	movs	r2, #129	; 0x81
    1dca:	4907      	ldr	r1, [pc, #28]	; (1de8 <_spi_m_dma_io_read+0x28>)
    1dcc:	3000      	adds	r0, #0
    1dce:	bf18      	it	ne
    1dd0:	2001      	movne	r0, #1
    1dd2:	4b06      	ldr	r3, [pc, #24]	; (1dec <_spi_m_dma_io_read+0x2c>)
    1dd4:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    1dd6:	4633      	mov	r3, r6
    1dd8:	462a      	mov	r2, r5
    1dda:	2100      	movs	r1, #0
    1ddc:	f1a4 0020 	sub.w	r0, r4, #32
    1de0:	4c03      	ldr	r4, [pc, #12]	; (1df0 <_spi_m_dma_io_read+0x30>)
    1de2:	47a0      	blx	r4
}
    1de4:	bd70      	pop	{r4, r5, r6, pc}
    1de6:	bf00      	nop
    1de8:	00005f74 	.word	0x00005f74
    1dec:	0000234d 	.word	0x0000234d
    1df0:	00003d0d 	.word	0x00003d0d

00001df4 <spi_m_dma_init>:
{
    1df4:	b538      	push	{r3, r4, r5, lr}
    1df6:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    1df8:	4605      	mov	r5, r0
    1dfa:	b1a8      	cbz	r0, 1e28 <spi_m_dma_init+0x34>
    1dfc:	b191      	cbz	r1, 1e24 <spi_m_dma_init+0x30>
    1dfe:	2001      	movs	r0, #1
    1e00:	223b      	movs	r2, #59	; 0x3b
    1e02:	490a      	ldr	r1, [pc, #40]	; (1e2c <spi_m_dma_init+0x38>)
    1e04:	4b0a      	ldr	r3, [pc, #40]	; (1e30 <spi_m_dma_init+0x3c>)
    1e06:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1e08:	4628      	mov	r0, r5
    1e0a:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    1e0e:	4621      	mov	r1, r4
    1e10:	4b08      	ldr	r3, [pc, #32]	; (1e34 <spi_m_dma_init+0x40>)
    1e12:	4798      	blx	r3
	if (rc) {
    1e14:	4603      	mov	r3, r0
    1e16:	b918      	cbnz	r0, 1e20 <spi_m_dma_init+0x2c>
	spi->io.read  = _spi_m_dma_io_read;
    1e18:	4a07      	ldr	r2, [pc, #28]	; (1e38 <spi_m_dma_init+0x44>)
    1e1a:	62aa      	str	r2, [r5, #40]	; 0x28
	spi->io.write = _spi_m_dma_io_write;
    1e1c:	4a07      	ldr	r2, [pc, #28]	; (1e3c <spi_m_dma_init+0x48>)
    1e1e:	626a      	str	r2, [r5, #36]	; 0x24
}
    1e20:	4618      	mov	r0, r3
    1e22:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(spi && hw);
    1e24:	2000      	movs	r0, #0
    1e26:	e7eb      	b.n	1e00 <spi_m_dma_init+0xc>
    1e28:	2000      	movs	r0, #0
    1e2a:	e7e9      	b.n	1e00 <spi_m_dma_init+0xc>
    1e2c:	00005f74 	.word	0x00005f74
    1e30:	0000234d 	.word	0x0000234d
    1e34:	00003acd 	.word	0x00003acd
    1e38:	00001dc1 	.word	0x00001dc1
    1e3c:	00001d8d 	.word	0x00001d8d

00001e40 <spi_m_dma_enable>:
{
    1e40:	b510      	push	{r4, lr}
	ASSERT(spi);
    1e42:	4604      	mov	r4, r0
    1e44:	2251      	movs	r2, #81	; 0x51
    1e46:	4905      	ldr	r1, [pc, #20]	; (1e5c <spi_m_dma_enable+0x1c>)
    1e48:	3000      	adds	r0, #0
    1e4a:	bf18      	it	ne
    1e4c:	2001      	movne	r0, #1
    1e4e:	4b04      	ldr	r3, [pc, #16]	; (1e60 <spi_m_dma_enable+0x20>)
    1e50:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    1e52:	1d20      	adds	r0, r4, #4
    1e54:	4b03      	ldr	r3, [pc, #12]	; (1e64 <spi_m_dma_enable+0x24>)
    1e56:	4798      	blx	r3
    1e58:	bd10      	pop	{r4, pc}
    1e5a:	bf00      	nop
    1e5c:	00005f74 	.word	0x00005f74
    1e60:	0000234d 	.word	0x0000234d
    1e64:	00003c55 	.word	0x00003c55

00001e68 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    1e68:	b570      	push	{r4, r5, r6, lr}
    1e6a:	460d      	mov	r5, r1
    1e6c:	4616      	mov	r6, r2
	ASSERT(spi);
    1e6e:	4604      	mov	r4, r0
    1e70:	22a8      	movs	r2, #168	; 0xa8
    1e72:	4906      	ldr	r1, [pc, #24]	; (1e8c <spi_m_dma_register_callback+0x24>)
    1e74:	3000      	adds	r0, #0
    1e76:	bf18      	it	ne
    1e78:	2001      	movne	r0, #1
    1e7a:	4b05      	ldr	r3, [pc, #20]	; (1e90 <spi_m_dma_register_callback+0x28>)
    1e7c:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    1e7e:	4632      	mov	r2, r6
    1e80:	4629      	mov	r1, r5
    1e82:	1d20      	adds	r0, r4, #4
    1e84:	4b03      	ldr	r3, [pc, #12]	; (1e94 <spi_m_dma_register_callback+0x2c>)
    1e86:	4798      	blx	r3
    1e88:	bd70      	pop	{r4, r5, r6, pc}
    1e8a:	bf00      	nop
    1e8c:	00005f74 	.word	0x00005f74
    1e90:	0000234d 	.word	0x0000234d
    1e94:	00003c89 	.word	0x00003c89

00001e98 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1e98:	b538      	push	{r3, r4, r5, lr}
    1e9a:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    1e9c:	4604      	mov	r4, r0
    1e9e:	b1c0      	cbz	r0, 1ed2 <spi_m_sync_init+0x3a>
    1ea0:	b1a9      	cbz	r1, 1ece <spi_m_sync_init+0x36>
    1ea2:	2001      	movs	r0, #1
    1ea4:	2240      	movs	r2, #64	; 0x40
    1ea6:	490c      	ldr	r1, [pc, #48]	; (1ed8 <spi_m_sync_init+0x40>)
    1ea8:	4b0c      	ldr	r3, [pc, #48]	; (1edc <spi_m_sync_init+0x44>)
    1eaa:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1eac:	4620      	mov	r0, r4
    1eae:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1eb2:	4629      	mov	r1, r5
    1eb4:	4b0a      	ldr	r3, [pc, #40]	; (1ee0 <spi_m_sync_init+0x48>)
    1eb6:	4798      	blx	r3

	if (rc < 0) {
    1eb8:	2800      	cmp	r0, #0
    1eba:	db07      	blt.n	1ecc <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    1ebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1ec0:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1ec2:	4b08      	ldr	r3, [pc, #32]	; (1ee4 <spi_m_sync_init+0x4c>)
    1ec4:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    1ec6:	4b08      	ldr	r3, [pc, #32]	; (1ee8 <spi_m_sync_init+0x50>)
    1ec8:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    1eca:	2000      	movs	r0, #0
}
    1ecc:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(spi && hw);
    1ece:	2000      	movs	r0, #0
    1ed0:	e7e8      	b.n	1ea4 <spi_m_sync_init+0xc>
    1ed2:	2000      	movs	r0, #0
    1ed4:	e7e6      	b.n	1ea4 <spi_m_sync_init+0xc>
    1ed6:	bf00      	nop
    1ed8:	00005f90 	.word	0x00005f90
    1edc:	0000234d 	.word	0x0000234d
    1ee0:	0000380d 	.word	0x0000380d
    1ee4:	00001f95 	.word	0x00001f95
    1ee8:	00001f59 	.word	0x00001f59

00001eec <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1eec:	b510      	push	{r4, lr}
	ASSERT(spi);
    1eee:	4604      	mov	r4, r0
    1ef0:	2257      	movs	r2, #87	; 0x57
    1ef2:	4905      	ldr	r1, [pc, #20]	; (1f08 <spi_m_sync_enable+0x1c>)
    1ef4:	3000      	adds	r0, #0
    1ef6:	bf18      	it	ne
    1ef8:	2001      	movne	r0, #1
    1efa:	4b04      	ldr	r3, [pc, #16]	; (1f0c <spi_m_sync_enable+0x20>)
    1efc:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    1efe:	1d20      	adds	r0, r4, #4
    1f00:	4b03      	ldr	r3, [pc, #12]	; (1f10 <spi_m_sync_enable+0x24>)
    1f02:	4798      	blx	r3
    1f04:	bd10      	pop	{r4, pc}
    1f06:	bf00      	nop
    1f08:	00005f90 	.word	0x00005f90
    1f0c:	0000234d 	.word	0x0000234d
    1f10:	00003999 	.word	0x00003999

00001f14 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1f14:	b530      	push	{r4, r5, lr}
    1f16:	b085      	sub	sp, #20
    1f18:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1f1a:	4605      	mov	r5, r0
    1f1c:	b198      	cbz	r0, 1f46 <spi_m_sync_transfer+0x32>
    1f1e:	b181      	cbz	r1, 1f42 <spi_m_sync_transfer+0x2e>
    1f20:	2001      	movs	r0, #1
    1f22:	22b3      	movs	r2, #179	; 0xb3
    1f24:	4909      	ldr	r1, [pc, #36]	; (1f4c <spi_m_sync_transfer+0x38>)
    1f26:	4b0a      	ldr	r3, [pc, #40]	; (1f50 <spi_m_sync_transfer+0x3c>)
    1f28:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1f2a:	6823      	ldr	r3, [r4, #0]
    1f2c:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    1f2e:	6863      	ldr	r3, [r4, #4]
    1f30:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    1f32:	68a3      	ldr	r3, [r4, #8]
    1f34:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1f36:	a901      	add	r1, sp, #4
    1f38:	1d28      	adds	r0, r5, #4
    1f3a:	4b06      	ldr	r3, [pc, #24]	; (1f54 <spi_m_sync_transfer+0x40>)
    1f3c:	4798      	blx	r3
}
    1f3e:	b005      	add	sp, #20
    1f40:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
    1f42:	2000      	movs	r0, #0
    1f44:	e7ed      	b.n	1f22 <spi_m_sync_transfer+0xe>
    1f46:	2000      	movs	r0, #0
    1f48:	e7eb      	b.n	1f22 <spi_m_sync_transfer+0xe>
    1f4a:	bf00      	nop
    1f4c:	00005f90 	.word	0x00005f90
    1f50:	0000234d 	.word	0x0000234d
    1f54:	000039cd 	.word	0x000039cd

00001f58 <_spi_m_sync_io_write>:
{
    1f58:	b570      	push	{r4, r5, r6, lr}
    1f5a:	b084      	sub	sp, #16
    1f5c:	460e      	mov	r6, r1
    1f5e:	4615      	mov	r5, r2
	ASSERT(io);
    1f60:	4604      	mov	r4, r0
    1f62:	22a3      	movs	r2, #163	; 0xa3
    1f64:	4908      	ldr	r1, [pc, #32]	; (1f88 <_spi_m_sync_io_write+0x30>)
    1f66:	3000      	adds	r0, #0
    1f68:	bf18      	it	ne
    1f6a:	2001      	movne	r0, #1
    1f6c:	4b07      	ldr	r3, [pc, #28]	; (1f8c <_spi_m_sync_io_write+0x34>)
    1f6e:	4798      	blx	r3
	xfer.rxbuf = 0;
    1f70:	2300      	movs	r3, #0
    1f72:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1f74:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1f76:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1f78:	a901      	add	r1, sp, #4
    1f7a:	f1a4 000c 	sub.w	r0, r4, #12
    1f7e:	4b04      	ldr	r3, [pc, #16]	; (1f90 <_spi_m_sync_io_write+0x38>)
    1f80:	4798      	blx	r3
}
    1f82:	b004      	add	sp, #16
    1f84:	bd70      	pop	{r4, r5, r6, pc}
    1f86:	bf00      	nop
    1f88:	00005f90 	.word	0x00005f90
    1f8c:	0000234d 	.word	0x0000234d
    1f90:	00001f15 	.word	0x00001f15

00001f94 <_spi_m_sync_io_read>:
{
    1f94:	b570      	push	{r4, r5, r6, lr}
    1f96:	b084      	sub	sp, #16
    1f98:	460e      	mov	r6, r1
    1f9a:	4615      	mov	r5, r2
	ASSERT(io);
    1f9c:	4604      	mov	r4, r0
    1f9e:	2287      	movs	r2, #135	; 0x87
    1fa0:	4908      	ldr	r1, [pc, #32]	; (1fc4 <_spi_m_sync_io_read+0x30>)
    1fa2:	3000      	adds	r0, #0
    1fa4:	bf18      	it	ne
    1fa6:	2001      	movne	r0, #1
    1fa8:	4b07      	ldr	r3, [pc, #28]	; (1fc8 <_spi_m_sync_io_read+0x34>)
    1faa:	4798      	blx	r3
	xfer.rxbuf = buf;
    1fac:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    1fae:	2300      	movs	r3, #0
    1fb0:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    1fb2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1fb4:	a901      	add	r1, sp, #4
    1fb6:	f1a4 000c 	sub.w	r0, r4, #12
    1fba:	4b04      	ldr	r3, [pc, #16]	; (1fcc <_spi_m_sync_io_read+0x38>)
    1fbc:	4798      	blx	r3
}
    1fbe:	b004      	add	sp, #16
    1fc0:	bd70      	pop	{r4, r5, r6, pc}
    1fc2:	bf00      	nop
    1fc4:	00005f90 	.word	0x00005f90
    1fc8:	0000234d 	.word	0x0000234d
    1fcc:	00001f15 	.word	0x00001f15

00001fd0 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    1fd0:	b538      	push	{r3, r4, r5, lr}
    1fd2:	460d      	mov	r5, r1
	ASSERT(spi && io);
    1fd4:	4604      	mov	r4, r0
    1fd6:	b158      	cbz	r0, 1ff0 <spi_m_sync_get_io_descriptor+0x20>
    1fd8:	b141      	cbz	r1, 1fec <spi_m_sync_get_io_descriptor+0x1c>
    1fda:	2001      	movs	r0, #1
    1fdc:	22bd      	movs	r2, #189	; 0xbd
    1fde:	4905      	ldr	r1, [pc, #20]	; (1ff4 <spi_m_sync_get_io_descriptor+0x24>)
    1fe0:	4b05      	ldr	r3, [pc, #20]	; (1ff8 <spi_m_sync_get_io_descriptor+0x28>)
    1fe2:	4798      	blx	r3
	*io = &spi->io;
    1fe4:	340c      	adds	r4, #12
    1fe6:	602c      	str	r4, [r5, #0]
	return 0;
}
    1fe8:	2000      	movs	r0, #0
    1fea:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(spi && io);
    1fec:	2000      	movs	r0, #0
    1fee:	e7f5      	b.n	1fdc <spi_m_sync_get_io_descriptor+0xc>
    1ff0:	2000      	movs	r0, #0
    1ff2:	e7f3      	b.n	1fdc <spi_m_sync_get_io_descriptor+0xc>
    1ff4:	00005f90 	.word	0x00005f90
    1ff8:	0000234d 	.word	0x0000234d

00001ffc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1ffe:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    2000:	b117      	cbz	r7, 2008 <timer_add_timer_task+0xc>
    2002:	463c      	mov	r4, r7
    2004:	2600      	movs	r6, #0
    2006:	e00b      	b.n	2020 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
    2008:	4b0e      	ldr	r3, [pc, #56]	; (2044 <timer_add_timer_task+0x48>)
    200a:	4798      	blx	r3
		return;
    200c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    200e:	68a5      	ldr	r5, [r4, #8]
    2010:	442b      	add	r3, r5
    2012:	1a9b      	subs	r3, r3, r2
    2014:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
    2016:	688d      	ldr	r5, [r1, #8]
    2018:	42ab      	cmp	r3, r5
    201a:	d209      	bcs.n	2030 <timer_add_timer_task+0x34>
			break;
		prev = it;
    201c:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    201e:	6824      	ldr	r4, [r4, #0]
    2020:	b134      	cbz	r4, 2030 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
    2022:	6863      	ldr	r3, [r4, #4]
    2024:	4293      	cmp	r3, r2
    2026:	d8f2      	bhi.n	200e <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
    2028:	68a5      	ldr	r5, [r4, #8]
    202a:	1a9b      	subs	r3, r3, r2
    202c:	442b      	add	r3, r5
    202e:	e7f2      	b.n	2016 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
    2030:	42bc      	cmp	r4, r7
    2032:	d003      	beq.n	203c <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    2034:	4630      	mov	r0, r6
    2036:	4b04      	ldr	r3, [pc, #16]	; (2048 <timer_add_timer_task+0x4c>)
    2038:	4798      	blx	r3
    203a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    203c:	4b01      	ldr	r3, [pc, #4]	; (2044 <timer_add_timer_task+0x48>)
    203e:	4798      	blx	r3
    2040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2042:	bf00      	nop
    2044:	00002369 	.word	0x00002369
    2048:	00002395 	.word	0x00002395

0000204c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    204e:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    2050:	6906      	ldr	r6, [r0, #16]
    2052:	3601      	adds	r6, #1
    2054:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2056:	7e03      	ldrb	r3, [r0, #24]
    2058:	f013 0f01 	tst.w	r3, #1
    205c:	d105      	bne.n	206a <timer_process_counted+0x1e>
    205e:	7e03      	ldrb	r3, [r0, #24]
    2060:	f013 0f02 	tst.w	r3, #2
    2064:	d101      	bne.n	206a <timer_process_counted+0x1e>
    2066:	4605      	mov	r5, r0
    2068:	e009      	b.n	207e <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    206a:	7e03      	ldrb	r3, [r0, #24]
    206c:	f043 0302 	orr.w	r3, r3, #2
    2070:	7603      	strb	r3, [r0, #24]
		return;
    2072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2074:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    2076:	68e3      	ldr	r3, [r4, #12]
    2078:	4620      	mov	r0, r4
    207a:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    207c:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    207e:	b19c      	cbz	r4, 20a8 <timer_process_counted+0x5c>
    2080:	6863      	ldr	r3, [r4, #4]
    2082:	1af3      	subs	r3, r6, r3
    2084:	68a2      	ldr	r2, [r4, #8]
    2086:	4293      	cmp	r3, r2
    2088:	d30e      	bcc.n	20a8 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
    208a:	f105 0714 	add.w	r7, r5, #20
    208e:	4638      	mov	r0, r7
    2090:	4b06      	ldr	r3, [pc, #24]	; (20ac <timer_process_counted+0x60>)
    2092:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2094:	7c23      	ldrb	r3, [r4, #16]
    2096:	2b01      	cmp	r3, #1
    2098:	d1ec      	bne.n	2074 <timer_process_counted+0x28>
			tmp->time_label = time;
    209a:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    209c:	4632      	mov	r2, r6
    209e:	4621      	mov	r1, r4
    20a0:	4638      	mov	r0, r7
    20a2:	4b03      	ldr	r3, [pc, #12]	; (20b0 <timer_process_counted+0x64>)
    20a4:	4798      	blx	r3
    20a6:	e7e5      	b.n	2074 <timer_process_counted+0x28>
    20a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20aa:	bf00      	nop
    20ac:	0000239d 	.word	0x0000239d
    20b0:	00001ffd 	.word	0x00001ffd

000020b4 <timer_init>:
{
    20b4:	b538      	push	{r3, r4, r5, lr}
    20b6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    20b8:	4604      	mov	r4, r0
    20ba:	b180      	cbz	r0, 20de <timer_init+0x2a>
    20bc:	b169      	cbz	r1, 20da <timer_init+0x26>
    20be:	2001      	movs	r0, #1
    20c0:	223b      	movs	r2, #59	; 0x3b
    20c2:	4908      	ldr	r1, [pc, #32]	; (20e4 <timer_init+0x30>)
    20c4:	4b08      	ldr	r3, [pc, #32]	; (20e8 <timer_init+0x34>)
    20c6:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    20c8:	4629      	mov	r1, r5
    20ca:	4620      	mov	r0, r4
    20cc:	4b07      	ldr	r3, [pc, #28]	; (20ec <timer_init+0x38>)
    20ce:	4798      	blx	r3
	descr->time                           = 0;
    20d0:	2000      	movs	r0, #0
    20d2:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    20d4:	4b06      	ldr	r3, [pc, #24]	; (20f0 <timer_init+0x3c>)
    20d6:	6023      	str	r3, [r4, #0]
}
    20d8:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    20da:	2000      	movs	r0, #0
    20dc:	e7f0      	b.n	20c0 <timer_init+0xc>
    20de:	2000      	movs	r0, #0
    20e0:	e7ee      	b.n	20c0 <timer_init+0xc>
    20e2:	bf00      	nop
    20e4:	00005fac 	.word	0x00005fac
    20e8:	0000234d 	.word	0x0000234d
    20ec:	00003f31 	.word	0x00003f31
    20f0:	0000204d 	.word	0x0000204d

000020f4 <timer_start>:
{
    20f4:	b510      	push	{r4, lr}
	ASSERT(descr);
    20f6:	4604      	mov	r4, r0
    20f8:	2253      	movs	r2, #83	; 0x53
    20fa:	4909      	ldr	r1, [pc, #36]	; (2120 <timer_start+0x2c>)
    20fc:	3000      	adds	r0, #0
    20fe:	bf18      	it	ne
    2100:	2001      	movne	r0, #1
    2102:	4b08      	ldr	r3, [pc, #32]	; (2124 <timer_start+0x30>)
    2104:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    2106:	4620      	mov	r0, r4
    2108:	4b07      	ldr	r3, [pc, #28]	; (2128 <timer_start+0x34>)
    210a:	4798      	blx	r3
    210c:	b920      	cbnz	r0, 2118 <timer_start+0x24>
	_timer_start(&descr->device);
    210e:	4620      	mov	r0, r4
    2110:	4b06      	ldr	r3, [pc, #24]	; (212c <timer_start+0x38>)
    2112:	4798      	blx	r3
	return ERR_NONE;
    2114:	2000      	movs	r0, #0
    2116:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2118:	f06f 0010 	mvn.w	r0, #16
}
    211c:	bd10      	pop	{r4, pc}
    211e:	bf00      	nop
    2120:	00005fac 	.word	0x00005fac
    2124:	0000234d 	.word	0x0000234d
    2128:	00004101 	.word	0x00004101
    212c:	000040ed 	.word	0x000040ed

00002130 <timer_add_task>:
{
    2130:	b570      	push	{r4, r5, r6, lr}
    2132:	b082      	sub	sp, #8
    2134:	460d      	mov	r5, r1
	ASSERT(descr && task);
    2136:	4604      	mov	r4, r0
    2138:	b320      	cbz	r0, 2184 <timer_add_task+0x54>
    213a:	b309      	cbz	r1, 2180 <timer_add_task+0x50>
    213c:	2001      	movs	r0, #1
    213e:	227a      	movs	r2, #122	; 0x7a
    2140:	491f      	ldr	r1, [pc, #124]	; (21c0 <timer_add_task+0x90>)
    2142:	4b20      	ldr	r3, [pc, #128]	; (21c4 <timer_add_task+0x94>)
    2144:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2146:	7e23      	ldrb	r3, [r4, #24]
    2148:	f043 0301 	orr.w	r3, r3, #1
    214c:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    214e:	f104 0614 	add.w	r6, r4, #20
    2152:	4629      	mov	r1, r5
    2154:	4630      	mov	r0, r6
    2156:	4b1c      	ldr	r3, [pc, #112]	; (21c8 <timer_add_task+0x98>)
    2158:	4798      	blx	r3
    215a:	b9a8      	cbnz	r0, 2188 <timer_add_task+0x58>
	task->time_label = descr->time;
    215c:	6923      	ldr	r3, [r4, #16]
    215e:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2160:	6922      	ldr	r2, [r4, #16]
    2162:	4629      	mov	r1, r5
    2164:	4630      	mov	r0, r6
    2166:	4b19      	ldr	r3, [pc, #100]	; (21cc <timer_add_task+0x9c>)
    2168:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    216a:	7e23      	ldrb	r3, [r4, #24]
    216c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    2170:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2172:	7e23      	ldrb	r3, [r4, #24]
    2174:	f013 0f02 	tst.w	r3, #2
    2178:	d112      	bne.n	21a0 <timer_add_task+0x70>
	return ERR_NONE;
    217a:	2000      	movs	r0, #0
}
    217c:	b002      	add	sp, #8
    217e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    2180:	2000      	movs	r0, #0
    2182:	e7dc      	b.n	213e <timer_add_task+0xe>
    2184:	2000      	movs	r0, #0
    2186:	e7da      	b.n	213e <timer_add_task+0xe>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2188:	7e23      	ldrb	r3, [r4, #24]
    218a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    218e:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    2190:	227f      	movs	r2, #127	; 0x7f
    2192:	490b      	ldr	r1, [pc, #44]	; (21c0 <timer_add_task+0x90>)
    2194:	2000      	movs	r0, #0
    2196:	4b0b      	ldr	r3, [pc, #44]	; (21c4 <timer_add_task+0x94>)
    2198:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    219a:	f06f 0011 	mvn.w	r0, #17
    219e:	e7ed      	b.n	217c <timer_add_task+0x4c>
		CRITICAL_SECTION_ENTER()
    21a0:	a801      	add	r0, sp, #4
    21a2:	4b0b      	ldr	r3, [pc, #44]	; (21d0 <timer_add_task+0xa0>)
    21a4:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    21a6:	7e23      	ldrb	r3, [r4, #24]
    21a8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    21ac:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    21ae:	4620      	mov	r0, r4
    21b0:	4b08      	ldr	r3, [pc, #32]	; (21d4 <timer_add_task+0xa4>)
    21b2:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    21b4:	a801      	add	r0, sp, #4
    21b6:	4b08      	ldr	r3, [pc, #32]	; (21d8 <timer_add_task+0xa8>)
    21b8:	4798      	blx	r3
	return ERR_NONE;
    21ba:	2000      	movs	r0, #0
    21bc:	e7de      	b.n	217c <timer_add_task+0x4c>
    21be:	bf00      	nop
    21c0:	00005fac 	.word	0x00005fac
    21c4:	0000234d 	.word	0x0000234d
    21c8:	00002353 	.word	0x00002353
    21cc:	00001ffd 	.word	0x00001ffd
    21d0:	00001bc1 	.word	0x00001bc1
    21d4:	00004119 	.word	0x00004119
    21d8:	00001bcf 	.word	0x00001bcf

000021dc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    21dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21de:	460e      	mov	r6, r1
    21e0:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    21e2:	4605      	mov	r5, r0
    21e4:	b308      	cbz	r0, 222a <usart_sync_write+0x4e>
    21e6:	b311      	cbz	r1, 222e <usart_sync_write+0x52>
    21e8:	bb1a      	cbnz	r2, 2232 <usart_sync_write+0x56>
    21ea:	2000      	movs	r0, #0
    21ec:	22f1      	movs	r2, #241	; 0xf1
    21ee:	4912      	ldr	r1, [pc, #72]	; (2238 <usart_sync_write+0x5c>)
    21f0:	4b12      	ldr	r3, [pc, #72]	; (223c <usart_sync_write+0x60>)
    21f2:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    21f4:	f105 0408 	add.w	r4, r5, #8
    21f8:	4620      	mov	r0, r4
    21fa:	4b11      	ldr	r3, [pc, #68]	; (2240 <usart_sync_write+0x64>)
    21fc:	4798      	blx	r3
    21fe:	2800      	cmp	r0, #0
    2200:	d0f8      	beq.n	21f4 <usart_sync_write+0x18>
    2202:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    2204:	5d71      	ldrb	r1, [r6, r5]
    2206:	4620      	mov	r0, r4
    2208:	4b0e      	ldr	r3, [pc, #56]	; (2244 <usart_sync_write+0x68>)
    220a:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    220c:	4620      	mov	r0, r4
    220e:	4b0c      	ldr	r3, [pc, #48]	; (2240 <usart_sync_write+0x64>)
    2210:	4798      	blx	r3
    2212:	2800      	cmp	r0, #0
    2214:	d0fa      	beq.n	220c <usart_sync_write+0x30>
			;
	} while (++offset < length);
    2216:	3501      	adds	r5, #1
    2218:	42bd      	cmp	r5, r7
    221a:	d3f3      	bcc.n	2204 <usart_sync_write+0x28>
	while (!_usart_sync_is_transmit_done(&descr->device))
    221c:	4620      	mov	r0, r4
    221e:	4b0a      	ldr	r3, [pc, #40]	; (2248 <usart_sync_write+0x6c>)
    2220:	4798      	blx	r3
    2222:	2800      	cmp	r0, #0
    2224:	d0fa      	beq.n	221c <usart_sync_write+0x40>
		;
	return (int32_t)offset;
}
    2226:	4628      	mov	r0, r5
    2228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    222a:	2000      	movs	r0, #0
    222c:	e7de      	b.n	21ec <usart_sync_write+0x10>
    222e:	2000      	movs	r0, #0
    2230:	e7dc      	b.n	21ec <usart_sync_write+0x10>
    2232:	2001      	movs	r0, #1
    2234:	e7da      	b.n	21ec <usart_sync_write+0x10>
    2236:	bf00      	nop
    2238:	00005fc4 	.word	0x00005fc4
    223c:	0000234d 	.word	0x0000234d
    2240:	00003497 	.word	0x00003497
    2244:	00003489 	.word	0x00003489
    2248:	000034a1 	.word	0x000034a1

0000224c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    224c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2250:	460f      	mov	r7, r1
    2252:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    2254:	4605      	mov	r5, r0
    2256:	b1c8      	cbz	r0, 228c <usart_sync_read+0x40>
    2258:	b1d1      	cbz	r1, 2290 <usart_sync_read+0x44>
    225a:	b9da      	cbnz	r2, 2294 <usart_sync_read+0x48>
    225c:	2000      	movs	r0, #0
    225e:	f44f 7286 	mov.w	r2, #268	; 0x10c
    2262:	490d      	ldr	r1, [pc, #52]	; (2298 <usart_sync_read+0x4c>)
    2264:	4b0d      	ldr	r3, [pc, #52]	; (229c <usart_sync_read+0x50>)
    2266:	4798      	blx	r3
	uint32_t                      offset = 0;
    2268:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    226a:	f105 0408 	add.w	r4, r5, #8
    226e:	4620      	mov	r0, r4
    2270:	4b0b      	ldr	r3, [pc, #44]	; (22a0 <usart_sync_read+0x54>)
    2272:	4798      	blx	r3
    2274:	2800      	cmp	r0, #0
    2276:	d0f8      	beq.n	226a <usart_sync_read+0x1e>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    2278:	4620      	mov	r0, r4
    227a:	4b0a      	ldr	r3, [pc, #40]	; (22a4 <usart_sync_read+0x58>)
    227c:	4798      	blx	r3
    227e:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
    2280:	3601      	adds	r6, #1
    2282:	4546      	cmp	r6, r8
    2284:	d3f1      	bcc.n	226a <usart_sync_read+0x1e>

	return (int32_t)offset;
}
    2286:	4630      	mov	r0, r6
    2288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
    228c:	2000      	movs	r0, #0
    228e:	e7e6      	b.n	225e <usart_sync_read+0x12>
    2290:	2000      	movs	r0, #0
    2292:	e7e4      	b.n	225e <usart_sync_read+0x12>
    2294:	2001      	movs	r0, #1
    2296:	e7e2      	b.n	225e <usart_sync_read+0x12>
    2298:	00005fc4 	.word	0x00005fc4
    229c:	0000234d 	.word	0x0000234d
    22a0:	000034ab 	.word	0x000034ab
    22a4:	0000348f 	.word	0x0000348f

000022a8 <usart_sync_init>:
{
    22a8:	b538      	push	{r3, r4, r5, lr}
    22aa:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    22ac:	4604      	mov	r4, r0
    22ae:	b1a0      	cbz	r0, 22da <usart_sync_init+0x32>
    22b0:	b189      	cbz	r1, 22d6 <usart_sync_init+0x2e>
    22b2:	2001      	movs	r0, #1
    22b4:	2234      	movs	r2, #52	; 0x34
    22b6:	490a      	ldr	r1, [pc, #40]	; (22e0 <usart_sync_init+0x38>)
    22b8:	4b0a      	ldr	r3, [pc, #40]	; (22e4 <usart_sync_init+0x3c>)
    22ba:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    22bc:	4629      	mov	r1, r5
    22be:	f104 0008 	add.w	r0, r4, #8
    22c2:	4b09      	ldr	r3, [pc, #36]	; (22e8 <usart_sync_init+0x40>)
    22c4:	4798      	blx	r3
	if (init_status) {
    22c6:	4603      	mov	r3, r0
    22c8:	b918      	cbnz	r0, 22d2 <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
    22ca:	4a08      	ldr	r2, [pc, #32]	; (22ec <usart_sync_init+0x44>)
    22cc:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    22ce:	4a08      	ldr	r2, [pc, #32]	; (22f0 <usart_sync_init+0x48>)
    22d0:	6022      	str	r2, [r4, #0]
}
    22d2:	4618      	mov	r0, r3
    22d4:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    22d6:	2000      	movs	r0, #0
    22d8:	e7ec      	b.n	22b4 <usart_sync_init+0xc>
    22da:	2000      	movs	r0, #0
    22dc:	e7ea      	b.n	22b4 <usart_sync_init+0xc>
    22de:	bf00      	nop
    22e0:	00005fc4 	.word	0x00005fc4
    22e4:	0000234d 	.word	0x0000234d
    22e8:	00003449 	.word	0x00003449
    22ec:	0000224d 	.word	0x0000224d
    22f0:	000021dd 	.word	0x000021dd

000022f4 <usart_sync_enable>:
{
    22f4:	b510      	push	{r4, lr}
	ASSERT(descr);
    22f6:	4604      	mov	r4, r0
    22f8:	2253      	movs	r2, #83	; 0x53
    22fa:	4906      	ldr	r1, [pc, #24]	; (2314 <usart_sync_enable+0x20>)
    22fc:	3000      	adds	r0, #0
    22fe:	bf18      	it	ne
    2300:	2001      	movne	r0, #1
    2302:	4b05      	ldr	r3, [pc, #20]	; (2318 <usart_sync_enable+0x24>)
    2304:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    2306:	f104 0008 	add.w	r0, r4, #8
    230a:	4b04      	ldr	r3, [pc, #16]	; (231c <usart_sync_enable+0x28>)
    230c:	4798      	blx	r3
}
    230e:	2000      	movs	r0, #0
    2310:	bd10      	pop	{r4, pc}
    2312:	bf00      	nop
    2314:	00005fc4 	.word	0x00005fc4
    2318:	0000234d 	.word	0x0000234d
    231c:	00003475 	.word	0x00003475

00002320 <usart_sync_get_io_descriptor>:
{
    2320:	b538      	push	{r3, r4, r5, lr}
    2322:	460c      	mov	r4, r1
	ASSERT(descr && io);
    2324:	4605      	mov	r5, r0
    2326:	b150      	cbz	r0, 233e <usart_sync_get_io_descriptor+0x1e>
    2328:	b139      	cbz	r1, 233a <usart_sync_get_io_descriptor+0x1a>
    232a:	2001      	movs	r0, #1
    232c:	2269      	movs	r2, #105	; 0x69
    232e:	4905      	ldr	r1, [pc, #20]	; (2344 <usart_sync_get_io_descriptor+0x24>)
    2330:	4b05      	ldr	r3, [pc, #20]	; (2348 <usart_sync_get_io_descriptor+0x28>)
    2332:	4798      	blx	r3
	*io = &descr->io;
    2334:	6025      	str	r5, [r4, #0]
}
    2336:	2000      	movs	r0, #0
    2338:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && io);
    233a:	2000      	movs	r0, #0
    233c:	e7f6      	b.n	232c <usart_sync_get_io_descriptor+0xc>
    233e:	2000      	movs	r0, #0
    2340:	e7f4      	b.n	232c <usart_sync_get_io_descriptor+0xc>
    2342:	bf00      	nop
    2344:	00005fc4 	.word	0x00005fc4
    2348:	0000234d 	.word	0x0000234d

0000234c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    234c:	b900      	cbnz	r0, 2350 <assert+0x4>
		__asm("BKPT #0");
    234e:	be00      	bkpt	0x0000
    2350:	4770      	bx	lr

00002352 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2352:	6803      	ldr	r3, [r0, #0]
    2354:	b11b      	cbz	r3, 235e <is_list_element+0xc>
		if (it == element) {
    2356:	428b      	cmp	r3, r1
    2358:	d003      	beq.n	2362 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
    235a:	681b      	ldr	r3, [r3, #0]
    235c:	e7fa      	b.n	2354 <is_list_element+0x2>
			return true;
		}
	}

	return false;
    235e:	2000      	movs	r0, #0
    2360:	4770      	bx	lr
			return true;
    2362:	2001      	movs	r0, #1
}
    2364:	4770      	bx	lr
	...

00002368 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2368:	b538      	push	{r3, r4, r5, lr}
    236a:	4604      	mov	r4, r0
    236c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    236e:	4b06      	ldr	r3, [pc, #24]	; (2388 <list_insert_as_head+0x20>)
    2370:	4798      	blx	r3
    2372:	f080 0001 	eor.w	r0, r0, #1
    2376:	2239      	movs	r2, #57	; 0x39
    2378:	4904      	ldr	r1, [pc, #16]	; (238c <list_insert_as_head+0x24>)
    237a:	b2c0      	uxtb	r0, r0
    237c:	4b04      	ldr	r3, [pc, #16]	; (2390 <list_insert_as_head+0x28>)
    237e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2380:	6823      	ldr	r3, [r4, #0]
    2382:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    2384:	6025      	str	r5, [r4, #0]
    2386:	bd38      	pop	{r3, r4, r5, pc}
    2388:	00002353 	.word	0x00002353
    238c:	00005fe0 	.word	0x00005fe0
    2390:	0000234d 	.word	0x0000234d

00002394 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2394:	6803      	ldr	r3, [r0, #0]
    2396:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2398:	6001      	str	r1, [r0, #0]
    239a:	4770      	bx	lr

0000239c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    239c:	6803      	ldr	r3, [r0, #0]
    239e:	b11b      	cbz	r3, 23a8 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    23a0:	681a      	ldr	r2, [r3, #0]
    23a2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    23a4:	4618      	mov	r0, r3
    23a6:	4770      	bx	lr
	}

	return NULL;
    23a8:	2000      	movs	r0, #0
}
    23aa:	4770      	bx	lr

000023ac <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    23ac:	b570      	push	{r4, r5, r6, lr}
    23ae:	460e      	mov	r6, r1
    23b0:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    23b2:	4604      	mov	r4, r0
    23b4:	b178      	cbz	r0, 23d6 <ringbuffer_init+0x2a>
    23b6:	b181      	cbz	r1, 23da <ringbuffer_init+0x2e>
    23b8:	b98a      	cbnz	r2, 23de <ringbuffer_init+0x32>
    23ba:	2000      	movs	r0, #0
    23bc:	2228      	movs	r2, #40	; 0x28
    23be:	490a      	ldr	r1, [pc, #40]	; (23e8 <ringbuffer_init+0x3c>)
    23c0:	4b0a      	ldr	r3, [pc, #40]	; (23ec <ringbuffer_init+0x40>)
    23c2:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    23c4:	1e6b      	subs	r3, r5, #1
    23c6:	421d      	tst	r5, r3
    23c8:	d10b      	bne.n	23e2 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    23ca:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    23cc:	2000      	movs	r0, #0
    23ce:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    23d0:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    23d2:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    23d4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    23d6:	2000      	movs	r0, #0
    23d8:	e7f0      	b.n	23bc <ringbuffer_init+0x10>
    23da:	2000      	movs	r0, #0
    23dc:	e7ee      	b.n	23bc <ringbuffer_init+0x10>
    23de:	2001      	movs	r0, #1
    23e0:	e7ec      	b.n	23bc <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    23e2:	f06f 000c 	mvn.w	r0, #12
}
    23e6:	bd70      	pop	{r4, r5, r6, pc}
    23e8:	00006000 	.word	0x00006000
    23ec:	0000234d 	.word	0x0000234d

000023f0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    23f0:	b538      	push	{r3, r4, r5, lr}
    23f2:	460d      	mov	r5, r1
	ASSERT(rb && data);
    23f4:	4604      	mov	r4, r0
    23f6:	b1a8      	cbz	r0, 2424 <ringbuffer_get+0x34>
    23f8:	b191      	cbz	r1, 2420 <ringbuffer_get+0x30>
    23fa:	2001      	movs	r0, #1
    23fc:	2240      	movs	r2, #64	; 0x40
    23fe:	490c      	ldr	r1, [pc, #48]	; (2430 <ringbuffer_get+0x40>)
    2400:	4b0c      	ldr	r3, [pc, #48]	; (2434 <ringbuffer_get+0x44>)
    2402:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    2404:	68e2      	ldr	r2, [r4, #12]
    2406:	68a3      	ldr	r3, [r4, #8]
    2408:	429a      	cmp	r2, r3
    240a:	d00d      	beq.n	2428 <ringbuffer_get+0x38>
		*data = rb->buf[rb->read_index & rb->size];
    240c:	6822      	ldr	r2, [r4, #0]
    240e:	6861      	ldr	r1, [r4, #4]
    2410:	400b      	ands	r3, r1
    2412:	5cd3      	ldrb	r3, [r2, r3]
    2414:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    2416:	68a3      	ldr	r3, [r4, #8]
    2418:	3301      	adds	r3, #1
    241a:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    241c:	2000      	movs	r0, #0
    241e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(rb && data);
    2420:	2000      	movs	r0, #0
    2422:	e7eb      	b.n	23fc <ringbuffer_get+0xc>
    2424:	2000      	movs	r0, #0
    2426:	e7e9      	b.n	23fc <ringbuffer_get+0xc>
	}

	return ERR_NOT_FOUND;
    2428:	f06f 0009 	mvn.w	r0, #9
}
    242c:	bd38      	pop	{r3, r4, r5, pc}
    242e:	bf00      	nop
    2430:	00006000 	.word	0x00006000
    2434:	0000234d 	.word	0x0000234d

00002438 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    2438:	b538      	push	{r3, r4, r5, lr}
    243a:	460d      	mov	r5, r1
	ASSERT(rb);
    243c:	4604      	mov	r4, r0
    243e:	2251      	movs	r2, #81	; 0x51
    2440:	490b      	ldr	r1, [pc, #44]	; (2470 <ringbuffer_put+0x38>)
    2442:	3000      	adds	r0, #0
    2444:	bf18      	it	ne
    2446:	2001      	movne	r0, #1
    2448:	4b0a      	ldr	r3, [pc, #40]	; (2474 <ringbuffer_put+0x3c>)
    244a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    244c:	6822      	ldr	r2, [r4, #0]
    244e:	68e3      	ldr	r3, [r4, #12]
    2450:	6861      	ldr	r1, [r4, #4]
    2452:	400b      	ands	r3, r1
    2454:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    2456:	68e3      	ldr	r3, [r4, #12]
    2458:	68a2      	ldr	r2, [r4, #8]
    245a:	1a9a      	subs	r2, r3, r2
    245c:	6861      	ldr	r1, [r4, #4]
    245e:	428a      	cmp	r2, r1
    2460:	d901      	bls.n	2466 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    2462:	1a59      	subs	r1, r3, r1
    2464:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    2466:	3301      	adds	r3, #1
    2468:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    246a:	2000      	movs	r0, #0
    246c:	bd38      	pop	{r3, r4, r5, pc}
    246e:	bf00      	nop
    2470:	00006000 	.word	0x00006000
    2474:	0000234d 	.word	0x0000234d

00002478 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2478:	b510      	push	{r4, lr}
	ASSERT(rb);
    247a:	4604      	mov	r4, r0
    247c:	2267      	movs	r2, #103	; 0x67
    247e:	4905      	ldr	r1, [pc, #20]	; (2494 <ringbuffer_num+0x1c>)
    2480:	3000      	adds	r0, #0
    2482:	bf18      	it	ne
    2484:	2001      	movne	r0, #1
    2486:	4b04      	ldr	r3, [pc, #16]	; (2498 <ringbuffer_num+0x20>)
    2488:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    248a:	68e0      	ldr	r0, [r4, #12]
    248c:	68a3      	ldr	r3, [r4, #8]
}
    248e:	1ac0      	subs	r0, r0, r3
    2490:	bd10      	pop	{r4, pc}
    2492:	bf00      	nop
    2494:	00006000 	.word	0x00006000
    2498:	0000234d 	.word	0x0000234d

0000249c <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    249c:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    24a0:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
}
    24a4:	f3c0 2087 	ubfx	r0, r0, #10, #8
    24a8:	4770      	bx	lr
	...

000024ac <_adc_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{
    24ac:	b508      	push	{r3, lr}

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    24ae:	6940      	ldr	r0, [r0, #20]
    24b0:	4b03      	ldr	r3, [pc, #12]	; (24c0 <_adc_get_irq_num+0x14>)
    24b2:	4798      	blx	r3
    24b4:	0040      	lsls	r0, r0, #1
    24b6:	b2c0      	uxtb	r0, r0
    24b8:	3076      	adds	r0, #118	; 0x76
}
    24ba:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    24be:	bd08      	pop	{r3, pc}
    24c0:	0000249d 	.word	0x0000249d

000024c4 <_adc_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _adc_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == ADC1) {
    24c4:	4b03      	ldr	r3, [pc, #12]	; (24d4 <_adc_init_irq_param+0x10>)
    24c6:	4298      	cmp	r0, r3
    24c8:	d000      	beq.n	24cc <_adc_init_irq_param+0x8>
    24ca:	4770      	bx	lr
		_adc1_dev = dev;
    24cc:	4b02      	ldr	r3, [pc, #8]	; (24d8 <_adc_init_irq_param+0x14>)
    24ce:	6019      	str	r1, [r3, #0]
	}
}
    24d0:	e7fb      	b.n	24ca <_adc_init_irq_param+0x6>
    24d2:	bf00      	nop
    24d4:	43002000 	.word	0x43002000
    24d8:	20000254 	.word	0x20000254

000024dc <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    24dc:	b410      	push	{r4}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
    24de:	4b60      	ldr	r3, [pc, #384]	; (2660 <_adc_init+0x184>)
    24e0:	4298      	cmp	r0, r3
    24e2:	f000 809c 	beq.w	261e <_adc_init+0x142>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
    24e6:	4b5f      	ldr	r3, [pc, #380]	; (2664 <_adc_init+0x188>)
    24e8:	4298      	cmp	r0, r3
    24ea:	f000 80a8 	beq.w	263e <_adc_init+0x162>
	uint16_t calib_reg = 0;
    24ee:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    24f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    24f2:	f013 0f01 	tst.w	r3, #1
    24f6:	d11b      	bne.n	2530 <_adc_init+0x54>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    24f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    24fa:	f013 0f03 	tst.w	r3, #3
    24fe:	d1fb      	bne.n	24f8 <_adc_init+0x1c>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    2500:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    2502:	f013 0f02 	tst.w	r3, #2
    2506:	d00d      	beq.n	2524 <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    2508:	8803      	ldrh	r3, [r0, #0]
    250a:	b29b      	uxth	r3, r3
    250c:	f023 0302 	bic.w	r3, r3, #2
    2510:	b29b      	uxth	r3, r3
    2512:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2514:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2516:	f013 0f03 	tst.w	r3, #3
    251a:	d1fb      	bne.n	2514 <_adc_init+0x38>
    251c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    251e:	f013 0f02 	tst.w	r3, #2
    2522:	d1fb      	bne.n	251c <_adc_init+0x40>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    2524:	2301      	movs	r3, #1
    2526:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2528:	6b03      	ldr	r3, [r0, #48]	; 0x30
    252a:	f013 0f03 	tst.w	r3, #3
    252e:	d1fb      	bne.n	2528 <_adc_init+0x4c>
    2530:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2532:	f013 0f01 	tst.w	r3, #1
    2536:	d1fb      	bne.n	2530 <_adc_init+0x54>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    2538:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    253c:	2316      	movs	r3, #22
    253e:	4a4a      	ldr	r2, [pc, #296]	; (2668 <_adc_init+0x18c>)
    2540:	fb03 2301 	mla	r3, r3, r1, r2
    2544:	889b      	ldrh	r3, [r3, #4]
	((Adc *)hw)->CTRLB.reg = data;
    2546:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2548:	6b03      	ldr	r3, [r0, #48]	; 0x30
    254a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    254e:	2b00      	cmp	r3, #0
    2550:	d1fa      	bne.n	2548 <_adc_init+0x6c>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    2552:	2316      	movs	r3, #22
    2554:	4a44      	ldr	r2, [pc, #272]	; (2668 <_adc_init+0x18c>)
    2556:	fb03 2301 	mla	r3, r3, r1, r2
    255a:	799b      	ldrb	r3, [r3, #6]
	((Adc *)hw)->REFCTRL.reg = data;
    255c:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    255e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2560:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2564:	2b00      	cmp	r3, #0
    2566:	d1fa      	bne.n	255e <_adc_init+0x82>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    2568:	2316      	movs	r3, #22
    256a:	4a3f      	ldr	r2, [pc, #252]	; (2668 <_adc_init+0x18c>)
    256c:	fb03 2301 	mla	r3, r3, r1, r2
    2570:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    2572:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    2574:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    2576:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2578:	6b03      	ldr	r3, [r0, #48]	; 0x30
    257a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    257e:	2b00      	cmp	r3, #0
    2580:	d1fa      	bne.n	2578 <_adc_init+0x9c>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    2582:	2316      	movs	r3, #22
    2584:	4a38      	ldr	r2, [pc, #224]	; (2668 <_adc_init+0x18c>)
    2586:	fb03 2301 	mla	r3, r3, r1, r2
    258a:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
    258c:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    258e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2590:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2594:	2b00      	cmp	r3, #0
    2596:	d1fa      	bne.n	258e <_adc_init+0xb2>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    2598:	2316      	movs	r3, #22
    259a:	4a33      	ldr	r2, [pc, #204]	; (2668 <_adc_init+0x18c>)
    259c:	fb03 2301 	mla	r3, r3, r1, r2
    25a0:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
    25a2:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    25a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    25a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    25aa:	2b00      	cmp	r3, #0
    25ac:	d1fa      	bne.n	25a4 <_adc_init+0xc8>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    25ae:	2316      	movs	r3, #22
    25b0:	4a2d      	ldr	r2, [pc, #180]	; (2668 <_adc_init+0x18c>)
    25b2:	fb03 2301 	mla	r3, r3, r1, r2
    25b6:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
    25b8:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    25ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
    25bc:	f013 0f80 	tst.w	r3, #128	; 0x80
    25c0:	d1fb      	bne.n	25ba <_adc_init+0xde>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    25c2:	2316      	movs	r3, #22
    25c4:	4a28      	ldr	r2, [pc, #160]	; (2668 <_adc_init+0x18c>)
    25c6:	fb03 2301 	mla	r3, r3, r1, r2
    25ca:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
    25cc:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    25ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
    25d0:	f413 7f80 	tst.w	r3, #256	; 0x100
    25d4:	d1fb      	bne.n	25ce <_adc_init+0xf2>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    25d6:	2316      	movs	r3, #22
    25d8:	4a23      	ldr	r2, [pc, #140]	; (2668 <_adc_init+0x18c>)
    25da:	fb03 2301 	mla	r3, r3, r1, r2
    25de:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
    25e0:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    25e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    25e4:	f413 7f00 	tst.w	r3, #512	; 0x200
    25e8:	d1fb      	bne.n	25e2 <_adc_init+0x106>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    25ea:	2316      	movs	r3, #22
    25ec:	4a1e      	ldr	r2, [pc, #120]	; (2668 <_adc_init+0x18c>)
    25ee:	fb03 2301 	mla	r3, r3, r1, r2
    25f2:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
    25f4:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    25f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    25f8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    25fc:	d1fb      	bne.n	25f6 <_adc_init+0x11a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    25fe:	2216      	movs	r2, #22
    2600:	4b19      	ldr	r3, [pc, #100]	; (2668 <_adc_init+0x18c>)
    2602:	fb02 3101 	mla	r1, r2, r1, r3
    2606:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    2608:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    260a:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    260c:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    260e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2610:	f013 0f03 	tst.w	r3, #3
    2614:	d1fb      	bne.n	260e <_adc_init+0x132>

	return ERR_NONE;
}
    2616:	2000      	movs	r0, #0
    2618:	f85d 4b04 	ldr.w	r4, [sp], #4
    261c:	4770      	bx	lr
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    261e:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    2622:	681b      	ldr	r3, [r3, #0]
    2624:	095a      	lsrs	r2, r3, #5
    2626:	0212      	lsls	r2, r2, #8
    2628:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
    262c:	0a1c      	lsrs	r4, r3, #8
    262e:	0124      	lsls	r4, r4, #4
    2630:	f004 0470 	and.w	r4, r4, #112	; 0x70
    2634:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
    2636:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    263a:	431a      	orrs	r2, r3
    263c:	e758      	b.n	24f0 <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    263e:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	0cda      	lsrs	r2, r3, #19
    2646:	0212      	lsls	r2, r2, #8
    2648:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
    264c:	0d9c      	lsrs	r4, r3, #22
    264e:	0124      	lsls	r4, r4, #4
    2650:	f004 0470 	and.w	r4, r4, #112	; 0x70
    2654:	4322      	orrs	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
    2656:	f3c3 4302 	ubfx	r3, r3, #16, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    265a:	431a      	orrs	r2, r3
    265c:	e748      	b.n	24f0 <_adc_init+0x14>
    265e:	bf00      	nop
    2660:	43001c00 	.word	0x43001c00
    2664:	43002000 	.word	0x43002000
    2668:	00006024 	.word	0x00006024

0000266c <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    266c:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    266e:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    2670:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    2674:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    2678:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    267a:	f013 0f01 	tst.w	r3, #1
    267e:	d106      	bne.n	268e <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    2680:	f013 0f02 	tst.w	r3, #2
    2684:	d10d      	bne.n	26a2 <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    2686:	f013 0f04 	tst.w	r3, #4
    268a:	d111      	bne.n	26b0 <_adc_interrupt_handler+0x44>
    268c:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    268e:	2301      	movs	r3, #1
    2690:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    2694:	6883      	ldr	r3, [r0, #8]
	return ((Adc *)hw)->RESULT.reg;
    2696:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
    269a:	b292      	uxth	r2, r2
    269c:	2100      	movs	r1, #0
    269e:	4798      	blx	r3
    26a0:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    26a2:	2302      	movs	r3, #2
    26a4:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    26a8:	6843      	ldr	r3, [r0, #4]
    26aa:	2100      	movs	r1, #0
    26ac:	4798      	blx	r3
    26ae:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    26b0:	2304      	movs	r3, #4
    26b2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    26b6:	6803      	ldr	r3, [r0, #0]
    26b8:	2100      	movs	r1, #0
    26ba:	4798      	blx	r3
	}
}
    26bc:	e7e6      	b.n	268c <_adc_interrupt_handler+0x20>
	...

000026c0 <_adc_get_regs>:
{
    26c0:	b508      	push	{r3, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    26c2:	4b0b      	ldr	r3, [pc, #44]	; (26f0 <_adc_get_regs+0x30>)
    26c4:	4798      	blx	r3
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    26c6:	2300      	movs	r3, #0
    26c8:	b13b      	cbz	r3, 26da <_adc_get_regs+0x1a>
	ASSERT(false);
    26ca:	228a      	movs	r2, #138	; 0x8a
    26cc:	4909      	ldr	r1, [pc, #36]	; (26f4 <_adc_get_regs+0x34>)
    26ce:	2000      	movs	r0, #0
    26d0:	4b09      	ldr	r3, [pc, #36]	; (26f8 <_adc_get_regs+0x38>)
    26d2:	4798      	blx	r3
	return 0;
    26d4:	2300      	movs	r3, #0
}
    26d6:	4618      	mov	r0, r3
    26d8:	bd08      	pop	{r3, pc}
		if (_adcs[i].number == n) {
    26da:	2216      	movs	r2, #22
    26dc:	fb02 f203 	mul.w	r2, r2, r3
    26e0:	4906      	ldr	r1, [pc, #24]	; (26fc <_adc_get_regs+0x3c>)
    26e2:	5c8a      	ldrb	r2, [r1, r2]
    26e4:	4290      	cmp	r0, r2
    26e6:	d0f6      	beq.n	26d6 <_adc_get_regs+0x16>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    26e8:	3301      	adds	r3, #1
    26ea:	b2db      	uxtb	r3, r3
    26ec:	e7ec      	b.n	26c8 <_adc_get_regs+0x8>
    26ee:	bf00      	nop
    26f0:	0000249d 	.word	0x0000249d
    26f4:	0000603c 	.word	0x0000603c
    26f8:	0000234d 	.word	0x0000234d
    26fc:	00006024 	.word	0x00006024

00002700 <_adc_async_init>:
{
    2700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2704:	460d      	mov	r5, r1
	ASSERT(device);
    2706:	4604      	mov	r4, r0
    2708:	22ec      	movs	r2, #236	; 0xec
    270a:	493b      	ldr	r1, [pc, #236]	; (27f8 <_adc_async_init+0xf8>)
    270c:	3000      	adds	r0, #0
    270e:	bf18      	it	ne
    2710:	2001      	movne	r0, #1
    2712:	4b3a      	ldr	r3, [pc, #232]	; (27fc <_adc_async_init+0xfc>)
    2714:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    2716:	4628      	mov	r0, r5
    2718:	4b39      	ldr	r3, [pc, #228]	; (2800 <_adc_async_init+0x100>)
    271a:	4798      	blx	r3
    271c:	4601      	mov	r1, r0
    271e:	4628      	mov	r0, r5
    2720:	4b38      	ldr	r3, [pc, #224]	; (2804 <_adc_async_init+0x104>)
    2722:	4798      	blx	r3
	if (init_status) {
    2724:	4606      	mov	r6, r0
    2726:	b110      	cbz	r0, 272e <_adc_async_init+0x2e>
}
    2728:	4630      	mov	r0, r6
    272a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    272e:	6165      	str	r5, [r4, #20]
	_adc_init_irq_param(hw, device);
    2730:	4621      	mov	r1, r4
    2732:	4628      	mov	r0, r5
    2734:	4b34      	ldr	r3, [pc, #208]	; (2808 <_adc_async_init+0x108>)
    2736:	4798      	blx	r3
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    2738:	4620      	mov	r0, r4
    273a:	4f34      	ldr	r7, [pc, #208]	; (280c <_adc_async_init+0x10c>)
    273c:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    273e:	0943      	lsrs	r3, r0, #5
    2740:	f000 001f 	and.w	r0, r0, #31
    2744:	2501      	movs	r5, #1
    2746:	fa05 f000 	lsl.w	r0, r5, r0
    274a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2810 <_adc_async_init+0x110>
    274e:	3320      	adds	r3, #32
    2750:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2754:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2758:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    275c:	4620      	mov	r0, r4
    275e:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2760:	0943      	lsrs	r3, r0, #5
    2762:	f000 001f 	and.w	r0, r0, #31
    2766:	fa05 f000 	lsl.w	r0, r5, r0
    276a:	3360      	adds	r3, #96	; 0x60
    276c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    2770:	4620      	mov	r0, r4
    2772:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2774:	0943      	lsrs	r3, r0, #5
    2776:	f000 001f 	and.w	r0, r0, #31
    277a:	4085      	lsls	r5, r0
    277c:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    2780:	4620      	mov	r0, r4
    2782:	47b8      	blx	r7
    2784:	b280      	uxth	r0, r0
    2786:	3001      	adds	r0, #1
    2788:	b280      	uxth	r0, r0
    278a:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    278c:	2b00      	cmp	r3, #0
    278e:	db0c      	blt.n	27aa <_adc_async_init+0xaa>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2790:	095b      	lsrs	r3, r3, #5
    2792:	f000 001f 	and.w	r0, r0, #31
    2796:	2201      	movs	r2, #1
    2798:	fa02 f000 	lsl.w	r0, r2, r0
    279c:	3320      	adds	r3, #32
    279e:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    27a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    27a6:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    27aa:	4620      	mov	r0, r4
    27ac:	4b17      	ldr	r3, [pc, #92]	; (280c <_adc_async_init+0x10c>)
    27ae:	4798      	blx	r3
    27b0:	b280      	uxth	r0, r0
    27b2:	3001      	adds	r0, #1
    27b4:	b280      	uxth	r0, r0
    27b6:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    27b8:	2b00      	cmp	r3, #0
    27ba:	db09      	blt.n	27d0 <_adc_async_init+0xd0>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27bc:	095b      	lsrs	r3, r3, #5
    27be:	f000 001f 	and.w	r0, r0, #31
    27c2:	2201      	movs	r2, #1
    27c4:	fa02 f000 	lsl.w	r0, r2, r0
    27c8:	3360      	adds	r3, #96	; 0x60
    27ca:	4a11      	ldr	r2, [pc, #68]	; (2810 <_adc_async_init+0x110>)
    27cc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    27d0:	4620      	mov	r0, r4
    27d2:	4b0e      	ldr	r3, [pc, #56]	; (280c <_adc_async_init+0x10c>)
    27d4:	4798      	blx	r3
    27d6:	b280      	uxth	r0, r0
    27d8:	3001      	adds	r0, #1
    27da:	b280      	uxth	r0, r0
    27dc:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    27de:	2b00      	cmp	r3, #0
    27e0:	dba2      	blt.n	2728 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27e2:	095b      	lsrs	r3, r3, #5
    27e4:	f000 001f 	and.w	r0, r0, #31
    27e8:	2201      	movs	r2, #1
    27ea:	fa02 f000 	lsl.w	r0, r2, r0
    27ee:	4a08      	ldr	r2, [pc, #32]	; (2810 <_adc_async_init+0x110>)
    27f0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    27f4:	e798      	b.n	2728 <_adc_async_init+0x28>
    27f6:	bf00      	nop
    27f8:	0000603c 	.word	0x0000603c
    27fc:	0000234d 	.word	0x0000234d
    2800:	000026c1 	.word	0x000026c1
    2804:	000024dd 	.word	0x000024dd
    2808:	000024c5 	.word	0x000024c5
    280c:	000024ad 	.word	0x000024ad
    2810:	e000e100 	.word	0xe000e100

00002814 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    2814:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2816:	8813      	ldrh	r3, [r2, #0]
    2818:	b29b      	uxth	r3, r3
    281a:	f043 0302 	orr.w	r3, r3, #2
    281e:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2820:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2822:	f013 0f03 	tst.w	r3, #3
    2826:	d1fb      	bne.n	2820 <_adc_async_enable_channel+0xc>
}
    2828:	4770      	bx	lr

0000282a <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    282a:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    282c:	88db      	ldrh	r3, [r3, #6]
	tmp = (tmp & ADC_CTRLB_RESSEL_Msk) >> ADC_CTRLB_RESSEL_Pos;
    282e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    2832:	2b03      	cmp	r3, #3
    2834:	d001      	beq.n	283a <_adc_async_get_data_size+0x10>
    2836:	2002      	movs	r0, #2
}
    2838:	4770      	bx	lr
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    283a:	2001      	movs	r0, #1
    283c:	4770      	bx	lr

0000283e <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    283e:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    2840:	7d13      	ldrb	r3, [r2, #20]
    2842:	f043 0302 	orr.w	r3, r3, #2
    2846:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2848:	6b13      	ldr	r3, [r2, #48]	; 0x30
    284a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    284e:	2b00      	cmp	r3, #0
    2850:	d1fa      	bne.n	2848 <_adc_async_convert+0xa>
}
    2852:	4770      	bx	lr

00002854 <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    2854:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    2856:	2a01      	cmp	r2, #1
    2858:	d007      	beq.n	286a <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    285a:	2a02      	cmp	r2, #2
    285c:	d00e      	beq.n	287c <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    285e:	b91a      	cbnz	r2, 2868 <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    2860:	b1ab      	cbz	r3, 288e <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    2862:	2301      	movs	r3, #1
    2864:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    2868:	4770      	bx	lr
	if (value == 0x0) {
    286a:	b91b      	cbnz	r3, 2874 <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    286c:	2304      	movs	r3, #4
    286e:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    2872:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    2874:	2304      	movs	r3, #4
    2876:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    287a:	4770      	bx	lr
	if (value == 0x0) {
    287c:	b91b      	cbnz	r3, 2886 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    287e:	2302      	movs	r3, #2
    2880:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    2884:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    2886:	2302      	movs	r3, #2
    2888:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    288c:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    288e:	2301      	movs	r3, #1
    2890:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    2894:	4770      	bx	lr
	...

00002898 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    2898:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    289a:	4b02      	ldr	r3, [pc, #8]	; (28a4 <ADC1_0_Handler+0xc>)
    289c:	6818      	ldr	r0, [r3, #0]
    289e:	4b02      	ldr	r3, [pc, #8]	; (28a8 <ADC1_0_Handler+0x10>)
    28a0:	4798      	blx	r3
    28a2:	bd08      	pop	{r3, pc}
    28a4:	20000254 	.word	0x20000254
    28a8:	0000266d 	.word	0x0000266d

000028ac <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    28ac:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    28ae:	4b02      	ldr	r3, [pc, #8]	; (28b8 <ADC1_1_Handler+0xc>)
    28b0:	6818      	ldr	r0, [r3, #0]
    28b2:	4b02      	ldr	r3, [pc, #8]	; (28bc <ADC1_1_Handler+0x10>)
    28b4:	4798      	blx	r3
    28b6:	bd08      	pop	{r3, pc}
    28b8:	20000254 	.word	0x20000254
    28bc:	0000266d 	.word	0x0000266d

000028c0 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28c0:	0943      	lsrs	r3, r0, #5
    28c2:	f000 001f 	and.w	r0, r0, #31
    28c6:	2201      	movs	r2, #1
    28c8:	fa02 f000 	lsl.w	r0, r2, r0
    28cc:	3340      	adds	r3, #64	; 0x40
    28ce:	4a02      	ldr	r2, [pc, #8]	; (28d8 <_irq_set+0x18>)
    28d0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    28d4:	4770      	bx	lr
    28d6:	bf00      	nop
    28d8:	e000e100 	.word	0xe000e100

000028dc <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
    28dc:	2364      	movs	r3, #100	; 0x64
    28de:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    28e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    28e6:	fb03 f000 	mul.w	r0, r3, r0
    28ea:	4770      	bx	lr

000028ec <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    28ec:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    28ee:	4a0d      	ldr	r2, [pc, #52]	; (2924 <_init_chip+0x38>)
    28f0:	8813      	ldrh	r3, [r2, #0]
    28f2:	b29b      	uxth	r3, r3
    28f4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
    28f8:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    28fa:	4b0b      	ldr	r3, [pc, #44]	; (2928 <_init_chip+0x3c>)
    28fc:	4798      	blx	r3
	_oscctrl_init_sources();
    28fe:	4b0b      	ldr	r3, [pc, #44]	; (292c <_init_chip+0x40>)
    2900:	4798      	blx	r3
	_mclk_init();
    2902:	4b0b      	ldr	r3, [pc, #44]	; (2930 <_init_chip+0x44>)
    2904:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    2906:	4b0b      	ldr	r3, [pc, #44]	; (2934 <_init_chip+0x48>)
    2908:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    290a:	f640 70ff 	movw	r0, #4095	; 0xfff
    290e:	4b0a      	ldr	r3, [pc, #40]	; (2938 <_init_chip+0x4c>)
    2910:	4798      	blx	r3
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    2912:	4a0a      	ldr	r2, [pc, #40]	; (293c <_init_chip+0x50>)
    2914:	6913      	ldr	r3, [r2, #16]
    2916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    291a:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    291c:	4b08      	ldr	r3, [pc, #32]	; (2940 <_init_chip+0x54>)
    291e:	4798      	blx	r3
    2920:	bd08      	pop	{r3, pc}
    2922:	bf00      	nop
    2924:	41004000 	.word	0x41004000
    2928:	00002cfd 	.word	0x00002cfd
    292c:	00002d1d 	.word	0x00002d1d
    2930:	00002cf1 	.word	0x00002cf1
    2934:	00002d39 	.word	0x00002d39
    2938:	00002c95 	.word	0x00002c95
    293c:	40000800 	.word	0x40000800
    2940:	000029c5 	.word	0x000029c5

00002944 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    2944:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    2946:	4a1d      	ldr	r2, [pc, #116]	; (29bc <_dmac_handler+0x78>)
    2948:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    294a:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    294e:	481c      	ldr	r0, [pc, #112]	; (29c0 <_dmac_handler+0x7c>)
    2950:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	tmp = ((Dmac *)hw)->INTPEND.reg;
    2954:	8c12      	ldrh	r2, [r2, #32]

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    2956:	f412 7f80 	tst.w	r2, #256	; 0x100
    295a:	d10a      	bne.n	2972 <_dmac_handler+0x2e>
	tmp = ((Dmac *)hw)->INTPEND.reg;
    295c:	4a17      	ldr	r2, [pc, #92]	; (29bc <_dmac_handler+0x78>)
    295e:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
    2960:	f412 7f00 	tst.w	r2, #512	; 0x200
    2964:	d110      	bne.n	2988 <_dmac_handler+0x44>
	tmp = ((Dmac *)hw)->INTPEND.reg;
    2966:	4a15      	ldr	r2, [pc, #84]	; (29bc <_dmac_handler+0x78>)
    2968:	8c12      	ldrh	r2, [r2, #32]
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
	} else if (hri_dmac_get_INTPEND_SUSP_bit(DMAC)) {
    296a:	f412 6f80 	tst.w	r2, #1024	; 0x400
    296e:	d117      	bne.n	29a0 <_dmac_handler+0x5c>
    2970:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2972:	011b      	lsls	r3, r3, #4
    2974:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    2978:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    297c:	2101      	movs	r1, #1
    297e:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    2982:	6843      	ldr	r3, [r0, #4]
    2984:	4798      	blx	r3
    2986:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    2988:	011b      	lsls	r3, r3, #4
    298a:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    298e:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2992:	2102      	movs	r1, #2
    2994:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    2998:	4a09      	ldr	r2, [pc, #36]	; (29c0 <_dmac_handler+0x7c>)
    299a:	58d3      	ldr	r3, [r2, r3]
    299c:	4798      	blx	r3
    299e:	bd08      	pop	{r3, pc}
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_SUSP) >> DMAC_CHINTFLAG_SUSP_Pos;
}

static inline void hri_dmac_clear_CHINTFLAG_SUSP_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_SUSP;
    29a0:	011b      	lsls	r3, r3, #4
    29a2:	f103 4282 	add.w	r2, r3, #1090519040	; 0x41000000
    29a6:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    29aa:	2104      	movs	r1, #4
    29ac:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
	hri_dmac_clear_CHINTFLAG_SUSP_bit(DMAC, channel);
	tmp_resource->dma_cb.suspend_done(tmp_resource);		
    29b0:	4a03      	ldr	r2, [pc, #12]	; (29c0 <_dmac_handler+0x7c>)
    29b2:	4413      	add	r3, r2
    29b4:	689b      	ldr	r3, [r3, #8]
    29b6:	4798      	blx	r3
	}
}
    29b8:	e7da      	b.n	2970 <_dmac_handler+0x2c>
    29ba:	bf00      	nop
    29bc:	4100a000 	.word	0x4100a000
    29c0:	20000258 	.word	0x20000258

000029c4 <_dma_init>:
{
    29c4:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    29c6:	4a3d      	ldr	r2, [pc, #244]	; (2abc <_dma_init+0xf8>)
    29c8:	8813      	ldrh	r3, [r2, #0]
    29ca:	b29b      	uxth	r3, r3
    29cc:	f023 0302 	bic.w	r3, r3, #2
    29d0:	b29b      	uxth	r3, r3
    29d2:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    29d4:	8853      	ldrh	r3, [r2, #2]
    29d6:	b29b      	uxth	r3, r3
    29d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    29dc:	b29b      	uxth	r3, r3
    29de:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    29e0:	8813      	ldrh	r3, [r2, #0]
    29e2:	b29b      	uxth	r3, r3
    29e4:	f043 0301 	orr.w	r3, r3, #1
    29e8:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    29ea:	4b34      	ldr	r3, [pc, #208]	; (2abc <_dma_init+0xf8>)
    29ec:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    29ee:	f013 0f01 	tst.w	r3, #1
    29f2:	d1fa      	bne.n	29ea <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    29f4:	4a31      	ldr	r2, [pc, #196]	; (2abc <_dma_init+0xf8>)
    29f6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    29fa:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    29fc:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    29fe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    2a02:	f043 0301 	orr.w	r3, r3, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2a06:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    2a08:	2300      	movs	r3, #0
    2a0a:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    2a0c:	492c      	ldr	r1, [pc, #176]	; (2ac0 <_dma_init+0xfc>)
	((Dmac *)hw)->BASEADDR.reg = data;
    2a0e:	6351      	str	r1, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    2a10:	492c      	ldr	r1, [pc, #176]	; (2ac4 <_dma_init+0x100>)
	((Dmac *)hw)->WRBADDR.reg = data;
    2a12:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
    2a14:	e016      	b.n	2a44 <_dma_init+0x80>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    2a16:	4a2c      	ldr	r2, [pc, #176]	; (2ac8 <_dma_init+0x104>)
    2a18:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    2a1c:	4c27      	ldr	r4, [pc, #156]	; (2abc <_dma_init+0xf8>)
    2a1e:	1d19      	adds	r1, r3, #4
    2a20:	0109      	lsls	r1, r1, #4
    2a22:	1860      	adds	r0, r4, r1
    2a24:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    2a26:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2a2a:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    2a2c:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    2a2e:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    2a30:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    2a32:	88d4      	ldrh	r4, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2a34:	4922      	ldr	r1, [pc, #136]	; (2ac0 <_dma_init+0xfc>)
    2a36:	011a      	lsls	r2, r3, #4
    2a38:	1888      	adds	r0, r1, r2
    2a3a:	528c      	strh	r4, [r1, r2]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    2a3c:	2200      	movs	r2, #0
    2a3e:	60c2      	str	r2, [r0, #12]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    2a40:	3301      	adds	r3, #1
    2a42:	b2db      	uxtb	r3, r3
    2a44:	2b1f      	cmp	r3, #31
    2a46:	d9e6      	bls.n	2a16 <_dma_init+0x52>
    2a48:	2300      	movs	r3, #0
    2a4a:	e00a      	b.n	2a62 <_dma_init+0x9e>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    2a4c:	f103 011f 	add.w	r1, r3, #31
    2a50:	b20a      	sxth	r2, r1
  if ((int32_t)(IRQn) >= 0)
    2a52:	2a00      	cmp	r2, #0
    2a54:	da10      	bge.n	2a78 <_dma_init+0xb4>
  if ((int32_t)(IRQn) >= 0)
    2a56:	2a00      	cmp	r2, #0
    2a58:	da1c      	bge.n	2a94 <_dma_init+0xd0>
  if ((int32_t)(IRQn) >= 0)
    2a5a:	2a00      	cmp	r2, #0
    2a5c:	da24      	bge.n	2aa8 <_dma_init+0xe4>
	for (i = 0; i < 5; i++) {
    2a5e:	3301      	adds	r3, #1
    2a60:	b2db      	uxtb	r3, r3
    2a62:	2b04      	cmp	r3, #4
    2a64:	d9f2      	bls.n	2a4c <_dma_init+0x88>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    2a66:	4a15      	ldr	r2, [pc, #84]	; (2abc <_dma_init+0xf8>)
    2a68:	8813      	ldrh	r3, [r2, #0]
    2a6a:	b29b      	uxth	r3, r3
    2a6c:	f043 0302 	orr.w	r3, r3, #2
    2a70:	8013      	strh	r3, [r2, #0]
}
    2a72:	2000      	movs	r0, #0
    2a74:	bc30      	pop	{r4, r5}
    2a76:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a78:	0950      	lsrs	r0, r2, #5
    2a7a:	f001 051f 	and.w	r5, r1, #31
    2a7e:	2401      	movs	r4, #1
    2a80:	40ac      	lsls	r4, r5
    2a82:	3020      	adds	r0, #32
    2a84:	4d11      	ldr	r5, [pc, #68]	; (2acc <_dma_init+0x108>)
    2a86:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2a8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a8e:	f3bf 8f6f 	isb	sy
    2a92:	e7e0      	b.n	2a56 <_dma_init+0x92>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a94:	0950      	lsrs	r0, r2, #5
    2a96:	f001 051f 	and.w	r5, r1, #31
    2a9a:	2401      	movs	r4, #1
    2a9c:	40ac      	lsls	r4, r5
    2a9e:	3060      	adds	r0, #96	; 0x60
    2aa0:	4d0a      	ldr	r5, [pc, #40]	; (2acc <_dma_init+0x108>)
    2aa2:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    2aa6:	e7d8      	b.n	2a5a <_dma_init+0x96>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2aa8:	0952      	lsrs	r2, r2, #5
    2aaa:	f001 011f 	and.w	r1, r1, #31
    2aae:	2001      	movs	r0, #1
    2ab0:	fa00 f101 	lsl.w	r1, r0, r1
    2ab4:	4805      	ldr	r0, [pc, #20]	; (2acc <_dma_init+0x108>)
    2ab6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    2aba:	e7d0      	b.n	2a5e <_dma_init+0x9a>
    2abc:	4100a000 	.word	0x4100a000
    2ac0:	20000780 	.word	0x20000780
    2ac4:	20000980 	.word	0x20000980
    2ac8:	00006054 	.word	0x00006054
    2acc:	e000e100 	.word	0xe000e100

00002ad0 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    2ad0:	b991      	cbnz	r1, 2af8 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    2ad2:	b942      	cbnz	r2, 2ae6 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    2ad4:	0100      	lsls	r0, r0, #4
    2ad6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2ada:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2ade:	2302      	movs	r3, #2
    2ae0:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    2ae4:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    2ae6:	0100      	lsls	r0, r0, #4
    2ae8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2aec:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2af0:	2302      	movs	r3, #2
    2af2:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    2af6:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    2af8:	2901      	cmp	r1, #1
    2afa:	d002      	beq.n	2b02 <_dma_set_irq_state+0x32>
	} else if (DMA_TRANSFER_SUSPEND_CB == type) {
    2afc:	2902      	cmp	r1, #2
    2afe:	d012      	beq.n	2b26 <_dma_set_irq_state+0x56>
    2b00:	4770      	bx	lr
	if (value == 0x0) {
    2b02:	b93a      	cbnz	r2, 2b14 <_dma_set_irq_state+0x44>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    2b04:	0100      	lsls	r0, r0, #4
    2b06:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2b0a:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2b0e:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    2b12:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    2b14:	0100      	lsls	r0, r0, #4
    2b16:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2b1a:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2b1e:	2301      	movs	r3, #1
    2b20:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    2b24:	4770      	bx	lr
	if (value == 0x0) {
    2b26:	b142      	cbz	r2, 2b3a <_dma_set_irq_state+0x6a>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_SUSP;
    2b28:	0100      	lsls	r0, r0, #4
    2b2a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2b2e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2b32:	2304      	movs	r3, #4
    2b34:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    2b38:	e7e2      	b.n	2b00 <_dma_set_irq_state+0x30>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_SUSP;
    2b3a:	0100      	lsls	r0, r0, #4
    2b3c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2b40:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    2b44:	2304      	movs	r3, #4
    2b46:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    2b4a:	4770      	bx	lr

00002b4c <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2b4c:	4b02      	ldr	r3, [pc, #8]	; (2b58 <_dma_set_destination_address+0xc>)
    2b4e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2b52:	6081      	str	r1, [r0, #8]
}
    2b54:	2000      	movs	r0, #0
    2b56:	4770      	bx	lr
    2b58:	20000780 	.word	0x20000780

00002b5c <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2b5c:	4b02      	ldr	r3, [pc, #8]	; (2b68 <_dma_set_source_address+0xc>)
    2b5e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2b62:	6041      	str	r1, [r0, #4]
}
    2b64:	2000      	movs	r0, #0
    2b66:	4770      	bx	lr
    2b68:	20000780 	.word	0x20000780

00002b6c <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2b6c:	4a05      	ldr	r2, [pc, #20]	; (2b84 <_dma_srcinc_enable+0x18>)
    2b6e:	0100      	lsls	r0, r0, #4
    2b70:	5a13      	ldrh	r3, [r2, r0]
    2b72:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    2b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    2b78:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    2b7c:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    2b7e:	5211      	strh	r1, [r2, r0]
}
    2b80:	2000      	movs	r0, #0
    2b82:	4770      	bx	lr
    2b84:	20000780 	.word	0x20000780

00002b88 <_dma_set_data_amount>:
{
    2b88:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    2b8a:	4c14      	ldr	r4, [pc, #80]	; (2bdc <_dma_set_data_amount+0x54>)
    2b8c:	0102      	lsls	r2, r0, #4
    2b8e:	18a3      	adds	r3, r4, r2
    2b90:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2b92:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    2b94:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2b98:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    2b9a:	f412 6f00 	tst.w	r2, #2048	; 0x800
    2b9e:	d006      	beq.n	2bae <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2ba0:	fa01 f403 	lsl.w	r4, r1, r3
    2ba4:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2ba6:	4a0d      	ldr	r2, [pc, #52]	; (2bdc <_dma_set_data_amount+0x54>)
    2ba8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    2bac:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    2bae:	4c0b      	ldr	r4, [pc, #44]	; (2bdc <_dma_set_data_amount+0x54>)
    2bb0:	0102      	lsls	r2, r0, #4
    2bb2:	18a5      	adds	r5, r4, r2
    2bb4:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2bb6:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    2bb8:	f412 6f80 	tst.w	r2, #1024	; 0x400
    2bbc:	d005      	beq.n	2bca <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2bbe:	fa01 f303 	lsl.w	r3, r1, r3
    2bc2:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2bc4:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    2bc8:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    2bca:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    2bcc:	4b03      	ldr	r3, [pc, #12]	; (2bdc <_dma_set_data_amount+0x54>)
    2bce:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2bd2:	8041      	strh	r1, [r0, #2]
}
    2bd4:	2000      	movs	r0, #0
    2bd6:	bc30      	pop	{r4, r5}
    2bd8:	4770      	bx	lr
    2bda:	bf00      	nop
    2bdc:	20000780 	.word	0x20000780

00002be0 <_dma_enable_transaction>:
{
    2be0:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    2be2:	4c0c      	ldr	r4, [pc, #48]	; (2c14 <_dma_enable_transaction+0x34>)
    2be4:	0102      	lsls	r2, r0, #4
    2be6:	5aa3      	ldrh	r3, [r4, r2]
    2be8:	b29b      	uxth	r3, r3
    2bea:	f043 0301 	orr.w	r3, r3, #1
    2bee:	52a3      	strh	r3, [r4, r2]
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    2bf0:	4c09      	ldr	r4, [pc, #36]	; (2c18 <_dma_enable_transaction+0x38>)
    2bf2:	1d03      	adds	r3, r0, #4
    2bf4:	011b      	lsls	r3, r3, #4
    2bf6:	58e2      	ldr	r2, [r4, r3]
    2bf8:	f042 0202 	orr.w	r2, r2, #2
    2bfc:	50e2      	str	r2, [r4, r3]
	if (software_trigger) {
    2bfe:	b129      	cbz	r1, 2c0c <_dma_enable_transaction+0x2c>
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    2c00:	2301      	movs	r3, #1
    2c02:	fa03 f000 	lsl.w	r0, r3, r0
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    2c06:	6922      	ldr	r2, [r4, #16]
    2c08:	4310      	orrs	r0, r2
    2c0a:	6120      	str	r0, [r4, #16]
}
    2c0c:	2000      	movs	r0, #0
    2c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    2c12:	4770      	bx	lr
    2c14:	20000780 	.word	0x20000780
    2c18:	4100a000 	.word	0x4100a000

00002c1c <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    2c1c:	4b02      	ldr	r3, [pc, #8]	; (2c28 <_dma_get_channel_resource+0xc>)
    2c1e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    2c22:	6001      	str	r1, [r0, #0]
}
    2c24:	2000      	movs	r0, #0
    2c26:	4770      	bx	lr
    2c28:	20000258 	.word	0x20000258

00002c2c <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    2c2c:	b508      	push	{r3, lr}
	_dmac_handler();
    2c2e:	4b01      	ldr	r3, [pc, #4]	; (2c34 <DMAC_0_Handler+0x8>)
    2c30:	4798      	blx	r3
    2c32:	bd08      	pop	{r3, pc}
    2c34:	00002945 	.word	0x00002945

00002c38 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    2c38:	b508      	push	{r3, lr}
	_dmac_handler();
    2c3a:	4b01      	ldr	r3, [pc, #4]	; (2c40 <DMAC_1_Handler+0x8>)
    2c3c:	4798      	blx	r3
    2c3e:	bd08      	pop	{r3, pc}
    2c40:	00002945 	.word	0x00002945

00002c44 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    2c44:	b508      	push	{r3, lr}
	_dmac_handler();
    2c46:	4b01      	ldr	r3, [pc, #4]	; (2c4c <DMAC_2_Handler+0x8>)
    2c48:	4798      	blx	r3
    2c4a:	bd08      	pop	{r3, pc}
    2c4c:	00002945 	.word	0x00002945

00002c50 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    2c50:	b508      	push	{r3, lr}
	_dmac_handler();
    2c52:	4b01      	ldr	r3, [pc, #4]	; (2c58 <DMAC_3_Handler+0x8>)
    2c54:	4798      	blx	r3
    2c56:	bd08      	pop	{r3, pc}
    2c58:	00002945 	.word	0x00002945

00002c5c <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    2c5c:	b508      	push	{r3, lr}
	_dmac_handler();
    2c5e:	4b01      	ldr	r3, [pc, #4]	; (2c64 <DMAC_4_Handler+0x8>)
    2c60:	4798      	blx	r3
    2c62:	bd08      	pop	{r3, pc}
    2c64:	00002945 	.word	0x00002945

00002c68 <_dma_set_descriptor>:
}

void _dma_set_descriptor(uint8_t channel, DmacDescriptor descriptor){
    2c68:	b084      	sub	sp, #16
    2c6a:	b470      	push	{r4, r5, r6}
    2c6c:	b085      	sub	sp, #20
    2c6e:	4606      	mov	r6, r0
    2c70:	a809      	add	r0, sp, #36	; 0x24
    2c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    2c76:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    2c78:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	_descriptor_section[channel] = descriptor;
    2c7c:	4d04      	ldr	r5, [pc, #16]	; (2c90 <_dma_set_descriptor+0x28>)
    2c7e:	eb05 1506 	add.w	r5, r5, r6, lsl #4
    2c82:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    2c86:	b005      	add	sp, #20
    2c88:	bc70      	pop	{r4, r5, r6}
    2c8a:	b004      	add	sp, #16
    2c8c:	4770      	bx	lr
    2c8e:	bf00      	nop
    2c90:	20000780 	.word	0x20000780

00002c94 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2c94:	f010 0f01 	tst.w	r0, #1
    2c98:	d008      	beq.n	2cac <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2c9a:	4a11      	ldr	r2, [pc, #68]	; (2ce0 <_gclk_init_generators_by_fref+0x4c>)
    2c9c:	4b11      	ldr	r3, [pc, #68]	; (2ce4 <_gclk_init_generators_by_fref+0x50>)
    2c9e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2ca0:	4b10      	ldr	r3, [pc, #64]	; (2ce4 <_gclk_init_generators_by_fref+0x50>)
    2ca2:	685a      	ldr	r2, [r3, #4]
    2ca4:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2ca8:	421a      	tst	r2, r3
    2caa:	d1f9      	bne.n	2ca0 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2cac:	f010 0f04 	tst.w	r0, #4
    2cb0:	d008      	beq.n	2cc4 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2cb2:	4a0d      	ldr	r2, [pc, #52]	; (2ce8 <_gclk_init_generators_by_fref+0x54>)
    2cb4:	4b0b      	ldr	r3, [pc, #44]	; (2ce4 <_gclk_init_generators_by_fref+0x50>)
    2cb6:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2cb8:	4b0a      	ldr	r3, [pc, #40]	; (2ce4 <_gclk_init_generators_by_fref+0x50>)
    2cba:	685a      	ldr	r2, [r3, #4]
    2cbc:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2cc0:	421a      	tst	r2, r3
    2cc2:	d1f9      	bne.n	2cb8 <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2cc4:	f010 0f08 	tst.w	r0, #8
    2cc8:	d008      	beq.n	2cdc <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2cca:	4a08      	ldr	r2, [pc, #32]	; (2cec <_gclk_init_generators_by_fref+0x58>)
    2ccc:	4b05      	ldr	r3, [pc, #20]	; (2ce4 <_gclk_init_generators_by_fref+0x50>)
    2cce:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2cd0:	4b04      	ldr	r3, [pc, #16]	; (2ce4 <_gclk_init_generators_by_fref+0x50>)
    2cd2:	685a      	ldr	r2, [r3, #4]
    2cd4:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    2cd8:	421a      	tst	r2, r3
    2cda:	d1f9      	bne.n	2cd0 <_gclk_init_generators_by_fref+0x3c>
    2cdc:	4770      	bx	lr
    2cde:	bf00      	nop
    2ce0:	00010108 	.word	0x00010108
    2ce4:	40001c00 	.word	0x40001c00
    2ce8:	00011101 	.word	0x00011101
    2cec:	00010105 	.word	0x00010105

00002cf0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2cf0:	2201      	movs	r2, #1
    2cf2:	4b01      	ldr	r3, [pc, #4]	; (2cf8 <_mclk_init+0x8>)
    2cf4:	715a      	strb	r2, [r3, #5]
    2cf6:	4770      	bx	lr
    2cf8:	40000800 	.word	0x40000800

00002cfc <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    2cfc:	4b06      	ldr	r3, [pc, #24]	; (2d18 <_osc32kctrl_init_sources+0x1c>)
    2cfe:	f242 0286 	movw	r2, #8326	; 0x2086
    2d02:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    2d04:	2200      	movs	r2, #0
    2d06:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    2d08:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2d0a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    2d0c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2d10:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2d12:	2201      	movs	r2, #1
    2d14:	741a      	strb	r2, [r3, #16]
    2d16:	4770      	bx	lr
    2d18:	40001400 	.word	0x40001400

00002d1c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    2d1c:	4a04      	ldr	r2, [pc, #16]	; (2d30 <_oscctrl_init_sources+0x14>)
    2d1e:	4b05      	ldr	r3, [pc, #20]	; (2d34 <_oscctrl_init_sources+0x18>)
    2d20:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    2d22:	4b04      	ldr	r3, [pc, #16]	; (2d34 <_oscctrl_init_sources+0x18>)
    2d24:	691b      	ldr	r3, [r3, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    2d26:	f013 0f02 	tst.w	r3, #2
    2d2a:	d0fa      	beq.n	2d22 <_oscctrl_init_sources+0x6>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    2d2c:	4770      	bx	lr
    2d2e:	bf00      	nop
    2d30:	03002606 	.word	0x03002606
    2d34:	40001000 	.word	0x40001000

00002d38 <_oscctrl_init_referenced_generators>:
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    2d38:	2231      	movs	r2, #49	; 0x31
    2d3a:	4b0e      	ldr	r3, [pc, #56]	; (2d74 <_oscctrl_init_referenced_generators+0x3c>)
    2d3c:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2d3e:	4b0d      	ldr	r3, [pc, #52]	; (2d74 <_oscctrl_init_referenced_generators+0x3c>)
    2d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2d42:	f013 0f06 	tst.w	r3, #6
    2d46:	d1fa      	bne.n	2d3e <_oscctrl_init_referenced_generators+0x6>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    2d48:	4b0a      	ldr	r3, [pc, #40]	; (2d74 <_oscctrl_init_referenced_generators+0x3c>)
    2d4a:	4a0b      	ldr	r2, [pc, #44]	; (2d78 <_oscctrl_init_referenced_generators+0x40>)
    2d4c:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    2d4e:	2202      	movs	r2, #2
    2d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2d54:	4b07      	ldr	r3, [pc, #28]	; (2d74 <_oscctrl_init_referenced_generators+0x3c>)
    2d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2d58:	f013 0f02 	tst.w	r3, #2
    2d5c:	d1fa      	bne.n	2d54 <_oscctrl_init_referenced_generators+0x1c>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    2d5e:	4b05      	ldr	r3, [pc, #20]	; (2d74 <_oscctrl_init_referenced_generators+0x3c>)
    2d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    2d62:	f013 0f01 	tst.w	r3, #1
    2d66:	d104      	bne.n	2d72 <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    2d68:	4b02      	ldr	r3, [pc, #8]	; (2d74 <_oscctrl_init_referenced_generators+0x3c>)
    2d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    2d6c:	f013 0f02 	tst.w	r3, #2
    2d70:	d0f5      	beq.n	2d5e <_oscctrl_init_referenced_generators+0x26>
    2d72:	4770      	bx	lr
    2d74:	40001000 	.word	0x40001000
    2d78:	00020060 	.word	0x00020060

00002d7c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2d7c:	b500      	push	{lr}
    2d7e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2d80:	4b0d      	ldr	r3, [pc, #52]	; (2db8 <RAMECC_Handler+0x3c>)
    2d82:	789b      	ldrb	r3, [r3, #2]
    2d84:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2d86:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2d88:	9b01      	ldr	r3, [sp, #4]
    2d8a:	f013 0f02 	tst.w	r3, #2
    2d8e:	d006      	beq.n	2d9e <RAMECC_Handler+0x22>
    2d90:	4b0a      	ldr	r3, [pc, #40]	; (2dbc <RAMECC_Handler+0x40>)
    2d92:	681b      	ldr	r3, [r3, #0]
    2d94:	b11b      	cbz	r3, 2d9e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2d96:	4a08      	ldr	r2, [pc, #32]	; (2db8 <RAMECC_Handler+0x3c>)
    2d98:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2d9a:	4798      	blx	r3
    2d9c:	e009      	b.n	2db2 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2d9e:	9b01      	ldr	r3, [sp, #4]
    2da0:	f013 0f01 	tst.w	r3, #1
    2da4:	d005      	beq.n	2db2 <RAMECC_Handler+0x36>
    2da6:	4b05      	ldr	r3, [pc, #20]	; (2dbc <RAMECC_Handler+0x40>)
    2da8:	685b      	ldr	r3, [r3, #4]
    2daa:	b113      	cbz	r3, 2db2 <RAMECC_Handler+0x36>
    2dac:	4a02      	ldr	r2, [pc, #8]	; (2db8 <RAMECC_Handler+0x3c>)
    2dae:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2db0:	4798      	blx	r3
	} else {
		return;
	}
}
    2db2:	b003      	add	sp, #12
    2db4:	f85d fb04 	ldr.w	pc, [sp], #4
    2db8:	41020000 	.word	0x41020000
    2dbc:	20000b80 	.word	0x20000b80

00002dc0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2dc0:	b470      	push	{r4, r5, r6}
    2dc2:	b089      	sub	sp, #36	; 0x24
    2dc4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2dc6:	466c      	mov	r4, sp
    2dc8:	4d0c      	ldr	r5, [pc, #48]	; (2dfc <_sercom_get_hardware_index+0x3c>)
    2dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2dce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2dd6:	2000      	movs	r0, #0
    2dd8:	2807      	cmp	r0, #7
    2dda:	d80a      	bhi.n	2df2 <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2ddc:	ab08      	add	r3, sp, #32
    2dde:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2de2:	f853 3c20 	ldr.w	r3, [r3, #-32]
    2de6:	42b3      	cmp	r3, r6
    2de8:	d001      	beq.n	2dee <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2dea:	3001      	adds	r0, #1
    2dec:	e7f4      	b.n	2dd8 <_sercom_get_hardware_index+0x18>
			return i;
    2dee:	b2c0      	uxtb	r0, r0
    2df0:	e000      	b.n	2df4 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    2df2:	2000      	movs	r0, #0
}
    2df4:	b009      	add	sp, #36	; 0x24
    2df6:	bc70      	pop	{r4, r5, r6}
    2df8:	4770      	bx	lr
    2dfa:	bf00      	nop
    2dfc:	00006154 	.word	0x00006154

00002e00 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2e00:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2e02:	f013 0f01 	tst.w	r3, #1
    2e06:	d109      	bne.n	2e1c <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2e08:	6803      	ldr	r3, [r0, #0]
    2e0a:	f043 0302 	orr.w	r3, r3, #2
    2e0e:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e10:	69c3      	ldr	r3, [r0, #28]
    2e12:	f013 0f03 	tst.w	r3, #3
    2e16:	d1fb      	bne.n	2e10 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    2e18:	2000      	movs	r0, #0
    2e1a:	4770      	bx	lr
		return ERR_BUSY;
    2e1c:	f06f 0003 	mvn.w	r0, #3
}
    2e20:	4770      	bx	lr

00002e22 <_spi_sync_rx_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2e22:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_rx_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    2e24:	f013 0f04 	tst.w	r3, #4
    2e28:	d109      	bne.n	2e3e <_spi_sync_rx_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    2e2a:	6843      	ldr	r3, [r0, #4]
    2e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2e30:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e32:	69c3      	ldr	r3, [r0, #28]
    2e34:	f013 0f17 	tst.w	r3, #23
    2e38:	d1fb      	bne.n	2e32 <_spi_sync_rx_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    2e3a:	2000      	movs	r0, #0
    2e3c:	4770      	bx	lr
		return ERR_BUSY;
    2e3e:	f06f 0003 	mvn.w	r0, #3
}
    2e42:	4770      	bx	lr

00002e44 <_spi_sync_rx_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2e44:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_rx_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    2e46:	f013 0f04 	tst.w	r3, #4
    2e4a:	d109      	bne.n	2e60 <_spi_sync_rx_disable+0x1c>
}

static inline void hri_sercomspi_clear_CTRLB_RXEN_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    2e4c:	6843      	ldr	r3, [r0, #4]
    2e4e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    2e52:	6043      	str	r3, [r0, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2e54:	69c3      	ldr	r3, [r0, #28]
    2e56:	f013 0f17 	tst.w	r3, #23
    2e5a:	d1fb      	bne.n	2e54 <_spi_sync_rx_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLB_RXEN_bit(hw);

	return ERR_NONE;
    2e5c:	2000      	movs	r0, #0
    2e5e:	4770      	bx	lr
		return ERR_BUSY;
    2e60:	f06f 0003 	mvn.w	r0, #3
}
    2e64:	4770      	bx	lr

00002e66 <_spi_m_get_source_for_dma>:
 *  \return The spi source address
 */
static uint32_t _spi_m_get_source_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    2e66:	3028      	adds	r0, #40	; 0x28
    2e68:	4770      	bx	lr

00002e6a <_spi_m_get_destination_for_dma>:
 *  \return The spi destination address
 */
static uint32_t _spi_m_get_destination_for_dma(void *const hw)
{
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
}
    2e6a:	3028      	adds	r0, #40	; 0x28
    2e6c:	4770      	bx	lr
	...

00002e70 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    2e70:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    2e72:	4b04      	ldr	r3, [pc, #16]	; (2e84 <_spi_get_tx_dma_channel+0x14>)
    2e74:	4798      	blx	r3

	switch (index) {
    2e76:	2805      	cmp	r0, #5
    2e78:	d001      	beq.n	2e7e <_spi_get_tx_dma_channel+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    2e7a:	2000      	movs	r0, #0
    2e7c:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_TX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_TX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_TX_CHANNEL;
    2e7e:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    2e80:	bd08      	pop	{r3, pc}
    2e82:	bf00      	nop
    2e84:	00002dc1 	.word	0x00002dc1

00002e88 <_spi_is_rx_dma_channel_enabled>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return one if enabled.
 */
static uint8_t _spi_is_rx_dma_channel_enabled(const void *const hw)
{
    2e88:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    2e8a:	4b04      	ldr	r3, [pc, #16]	; (2e9c <_spi_is_rx_dma_channel_enabled+0x14>)
    2e8c:	4798      	blx	r3

	switch (index) {
    2e8e:	2805      	cmp	r0, #5
    2e90:	d001      	beq.n	2e96 <_spi_is_rx_dma_channel_enabled+0xe>
	case 0:
		return CONF_SERCOM_0_SPI_RX_CHANNEL;
    2e92:	2000      	movs	r0, #0
    2e94:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_RX_CHANNEL;
    2e96:	2001      	movs	r0, #1
	case 7:
		return CONF_SERCOM_7_SPI_RX_CHANNEL;
	default:
		return false;
	}
}
    2e98:	bd08      	pop	{r3, pc}
    2e9a:	bf00      	nop
    2e9c:	00002dc1 	.word	0x00002dc1

00002ea0 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    2ea0:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    2ea2:	4b07      	ldr	r3, [pc, #28]	; (2ec0 <_spi_get_rx_dma_channel+0x20>)
    2ea4:	4798      	blx	r3

	switch (index) {
    2ea6:	2807      	cmp	r0, #7
    2ea8:	d807      	bhi.n	2eba <_spi_get_rx_dma_channel+0x1a>
    2eaa:	e8df f000 	tbb	[pc, r0]
    2eae:	0404      	.short	0x0404
    2eb0:	06040404 	.word	0x06040404
    2eb4:	0404      	.short	0x0404
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_RX_CHANNEL;
    2eb6:	2001      	movs	r0, #1
    2eb8:	bd08      	pop	{r3, pc}
	case 3:
		return CONF_SERCOM_3_SPI_M_DMA_RX_CHANNEL;
	case 4:
		return CONF_SERCOM_4_SPI_M_DMA_RX_CHANNEL;
	case 5:
		return CONF_SERCOM_5_SPI_M_DMA_RX_CHANNEL;
    2eba:	2000      	movs	r0, #0
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    2ebc:	bd08      	pop	{r3, pc}
    2ebe:	bf00      	nop
    2ec0:	00002dc1 	.word	0x00002dc1

00002ec4 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    2ec4:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    2ec6:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.rx) {
    2ec8:	689b      	ldr	r3, [r3, #8]
    2eca:	b103      	cbz	r3, 2ece <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    2ecc:	4798      	blx	r3
    2ece:	bd08      	pop	{r3, pc}

00002ed0 <_spi_dma_suspend_complete>:
	}
}

static void _spi_dma_suspend_complete(struct _dma_resource *resource)
{
    2ed0:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    2ed2:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.sus) {
    2ed4:	68db      	ldr	r3, [r3, #12]
    2ed6:	b103      	cbz	r3, 2eda <_spi_dma_suspend_complete+0xa>
		dev->callbacks.sus(resource);
    2ed8:	4798      	blx	r3
    2eda:	bd08      	pop	{r3, pc}

00002edc <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    2edc:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    2ede:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.tx) {
    2ee0:	685b      	ldr	r3, [r3, #4]
    2ee2:	b103      	cbz	r3, 2ee6 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    2ee4:	4798      	blx	r3
    2ee6:	bd08      	pop	{r3, pc}

00002ee8 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    2ee8:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
    2eea:	68c3      	ldr	r3, [r0, #12]

	if (dev->callbacks.error) {
    2eec:	691b      	ldr	r3, [r3, #16]
    2eee:	b103      	cbz	r3, 2ef2 <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    2ef0:	4798      	blx	r3
    2ef2:	bd08      	pop	{r3, pc}

00002ef4 <_get_sercom_index>:
{
    2ef4:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2ef6:	4b0c      	ldr	r3, [pc, #48]	; (2f28 <_get_sercom_index+0x34>)
    2ef8:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2efa:	2300      	movs	r3, #0
    2efc:	b143      	cbz	r3, 2f10 <_get_sercom_index+0x1c>
	ASSERT(false);
    2efe:	f44f 7212 	mov.w	r2, #584	; 0x248
    2f02:	490a      	ldr	r1, [pc, #40]	; (2f2c <_get_sercom_index+0x38>)
    2f04:	2000      	movs	r0, #0
    2f06:	4b0a      	ldr	r3, [pc, #40]	; (2f30 <_get_sercom_index+0x3c>)
    2f08:	4798      	blx	r3
	return 0;
    2f0a:	2300      	movs	r3, #0
}
    2f0c:	4618      	mov	r0, r3
    2f0e:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    2f10:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    2f14:	00d1      	lsls	r1, r2, #3
    2f16:	4a07      	ldr	r2, [pc, #28]	; (2f34 <_get_sercom_index+0x40>)
    2f18:	440a      	add	r2, r1
    2f1a:	f892 2020 	ldrb.w	r2, [r2, #32]
    2f1e:	4290      	cmp	r0, r2
    2f20:	d0f4      	beq.n	2f0c <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2f22:	3301      	adds	r3, #1
    2f24:	b2db      	uxtb	r3, r3
    2f26:	e7e9      	b.n	2efc <_get_sercom_index+0x8>
    2f28:	00002dc1 	.word	0x00002dc1
    2f2c:	000061d8 	.word	0x000061d8
    2f30:	0000234d 	.word	0x0000234d
    2f34:	00006154 	.word	0x00006154

00002f38 <_usart_init>:
{
    2f38:	b538      	push	{r3, r4, r5, lr}
    2f3a:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    2f3c:	4b3c      	ldr	r3, [pc, #240]	; (3030 <_usart_init+0xf8>)
    2f3e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2f40:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2f42:	f013 0f01 	tst.w	r3, #1
    2f46:	d122      	bne.n	2f8e <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    2f48:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2f4c:	00da      	lsls	r2, r3, #3
    2f4e:	4b39      	ldr	r3, [pc, #228]	; (3034 <_usart_init+0xfc>)
    2f50:	4413      	add	r3, r2
    2f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2f54:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2f58:	69e3      	ldr	r3, [r4, #28]
    2f5a:	f013 0f03 	tst.w	r3, #3
    2f5e:	d1fb      	bne.n	2f58 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2f60:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2f62:	f013 0f02 	tst.w	r3, #2
    2f66:	d00b      	beq.n	2f80 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2f68:	6823      	ldr	r3, [r4, #0]
    2f6a:	f023 0302 	bic.w	r3, r3, #2
    2f6e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2f70:	69e3      	ldr	r3, [r4, #28]
    2f72:	f013 0f03 	tst.w	r3, #3
    2f76:	d1fb      	bne.n	2f70 <_usart_init+0x38>
    2f78:	69e3      	ldr	r3, [r4, #28]
    2f7a:	f013 0f02 	tst.w	r3, #2
    2f7e:	d1fb      	bne.n	2f78 <_usart_init+0x40>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    2f80:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2f84:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2f86:	69e3      	ldr	r3, [r4, #28]
    2f88:	f013 0f03 	tst.w	r3, #3
    2f8c:	d1fb      	bne.n	2f86 <_usart_init+0x4e>
    2f8e:	69e3      	ldr	r3, [r4, #28]
    2f90:	f013 0f01 	tst.w	r3, #1
    2f94:	d1fb      	bne.n	2f8e <_usart_init+0x56>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2f96:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2f9a:	00da      	lsls	r2, r3, #3
    2f9c:	4b25      	ldr	r3, [pc, #148]	; (3034 <_usart_init+0xfc>)
    2f9e:	4413      	add	r3, r2
    2fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2fa2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2fa4:	69e3      	ldr	r3, [r4, #28]
    2fa6:	f013 0f03 	tst.w	r3, #3
    2faa:	d1fb      	bne.n	2fa4 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2fac:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2fb0:	00da      	lsls	r2, r3, #3
    2fb2:	4b20      	ldr	r3, [pc, #128]	; (3034 <_usart_init+0xfc>)
    2fb4:	4413      	add	r3, r2
    2fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2fb8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2fba:	69e3      	ldr	r3, [r4, #28]
    2fbc:	f013 0f1f 	tst.w	r3, #31
    2fc0:	d1fb      	bne.n	2fba <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    2fc2:	0042      	lsls	r2, r0, #1
    2fc4:	4402      	add	r2, r0
    2fc6:	00d1      	lsls	r1, r2, #3
    2fc8:	4b1a      	ldr	r3, [pc, #104]	; (3034 <_usart_init+0xfc>)
    2fca:	440b      	add	r3, r1
    2fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    2fce:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    2fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2fd2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2fd6:	d10a      	bne.n	2fee <_usart_init+0xb6>
    2fd8:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    2fdc:	d107      	bne.n	2fee <_usart_init+0xb6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2fde:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2fe2:	00da      	lsls	r2, r3, #3
    2fe4:	4b13      	ldr	r3, [pc, #76]	; (3034 <_usart_init+0xfc>)
    2fe6:	4413      	add	r3, r2
    2fe8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    2fea:	81a3      	strh	r3, [r4, #12]
    2fec:	e00f      	b.n	300e <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2fee:	0042      	lsls	r2, r0, #1
    2ff0:	4402      	add	r2, r0
    2ff2:	00d1      	lsls	r1, r2, #3
    2ff4:	4b0f      	ldr	r3, [pc, #60]	; (3034 <_usart_init+0xfc>)
    2ff6:	440b      	add	r3, r1
    2ff8:	8e19      	ldrh	r1, [r3, #48]	; 0x30
    2ffa:	89a2      	ldrh	r2, [r4, #12]
    2ffc:	f361 020c 	bfi	r2, r1, #0, #13
    3000:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3002:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
    3006:	89a3      	ldrh	r3, [r4, #12]
    3008:	f362 334f 	bfi	r3, r2, #13, #3
    300c:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    300e:	4a09      	ldr	r2, [pc, #36]	; (3034 <_usart_init+0xfc>)
    3010:	0043      	lsls	r3, r0, #1
    3012:	181d      	adds	r5, r3, r0
    3014:	00e9      	lsls	r1, r5, #3
    3016:	460d      	mov	r5, r1
    3018:	4411      	add	r1, r2
    301a:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    301e:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    3020:	442a      	add	r2, r5
    3022:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    3026:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    302a:	2000      	movs	r0, #0
    302c:	bd38      	pop	{r3, r4, r5, pc}
    302e:	bf00      	nop
    3030:	00002ef5 	.word	0x00002ef5
    3034:	00006154 	.word	0x00006154

00003038 <_get_i2cm_index>:
{
    3038:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    303a:	4b0d      	ldr	r3, [pc, #52]	; (3070 <_get_i2cm_index+0x38>)
    303c:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    303e:	2300      	movs	r3, #0
    3040:	b143      	cbz	r3, 3054 <_get_i2cm_index+0x1c>
	ASSERT(false);
    3042:	f240 32a7 	movw	r2, #935	; 0x3a7
    3046:	490b      	ldr	r1, [pc, #44]	; (3074 <_get_i2cm_index+0x3c>)
    3048:	2000      	movs	r0, #0
    304a:	4b0b      	ldr	r3, [pc, #44]	; (3078 <_get_i2cm_index+0x40>)
    304c:	4798      	blx	r3
	return -1;
    304e:	f04f 30ff 	mov.w	r0, #4294967295
}
    3052:	bd08      	pop	{r3, pc}
		if (_i2cms[i].number == sercom_offset) {
    3054:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    3058:	00d1      	lsls	r1, r2, #3
    305a:	4a08      	ldr	r2, [pc, #32]	; (307c <_get_i2cm_index+0x44>)
    305c:	440a      	add	r2, r1
    305e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    3062:	4290      	cmp	r0, r2
    3064:	d002      	beq.n	306c <_get_i2cm_index+0x34>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    3066:	3301      	adds	r3, #1
    3068:	b2db      	uxtb	r3, r3
    306a:	e7e9      	b.n	3040 <_get_i2cm_index+0x8>
			return i;
    306c:	b258      	sxtb	r0, r3
    306e:	bd08      	pop	{r3, pc}
    3070:	00002dc1 	.word	0x00002dc1
    3074:	000061d8 	.word	0x000061d8
    3078:	0000234d 	.word	0x0000234d
    307c:	00006154 	.word	0x00006154

00003080 <_i2c_m_sync_init_impl>:
{
    3080:	b538      	push	{r3, r4, r5, lr}
    3082:	4605      	mov	r5, r0
    3084:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    3086:	4608      	mov	r0, r1
    3088:	4b33      	ldr	r3, [pc, #204]	; (3158 <_i2c_m_sync_init_impl+0xd8>)
    308a:	4798      	blx	r3
    308c:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    308e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    3090:	f013 0f01 	tst.w	r3, #1
    3094:	d122      	bne.n	30dc <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    3096:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    309a:	00da      	lsls	r2, r3, #3
    309c:	4b2f      	ldr	r3, [pc, #188]	; (315c <_i2c_m_sync_init_impl+0xdc>)
    309e:	4413      	add	r3, r2
    30a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    30a2:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    30a6:	69e3      	ldr	r3, [r4, #28]
    30a8:	f013 0f03 	tst.w	r3, #3
    30ac:	d1fb      	bne.n	30a6 <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    30ae:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    30b0:	f013 0f02 	tst.w	r3, #2
    30b4:	d00b      	beq.n	30ce <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    30b6:	6823      	ldr	r3, [r4, #0]
    30b8:	f023 0302 	bic.w	r3, r3, #2
    30bc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    30be:	69e3      	ldr	r3, [r4, #28]
    30c0:	f013 0f03 	tst.w	r3, #3
    30c4:	d1fb      	bne.n	30be <_i2c_m_sync_init_impl+0x3e>
    30c6:	69e3      	ldr	r3, [r4, #28]
    30c8:	f013 0f02 	tst.w	r3, #2
    30cc:	d1fb      	bne.n	30c6 <_i2c_m_sync_init_impl+0x46>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    30ce:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    30d2:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    30d4:	69e3      	ldr	r3, [r4, #28]
    30d6:	f013 0f03 	tst.w	r3, #3
    30da:	d1fb      	bne.n	30d4 <_i2c_m_sync_init_impl+0x54>
    30dc:	69e3      	ldr	r3, [r4, #28]
    30de:	f013 0f01 	tst.w	r3, #1
    30e2:	d1fb      	bne.n	30dc <_i2c_m_sync_init_impl+0x5c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    30e4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    30e8:	00da      	lsls	r2, r3, #3
    30ea:	4b1c      	ldr	r3, [pc, #112]	; (315c <_i2c_m_sync_init_impl+0xdc>)
    30ec:	4413      	add	r3, r2
    30ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    30f0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    30f2:	69e3      	ldr	r3, [r4, #28]
    30f4:	f013 0f03 	tst.w	r3, #3
    30f8:	d1fb      	bne.n	30f2 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    30fa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    30fe:	00da      	lsls	r2, r3, #3
    3100:	4b16      	ldr	r3, [pc, #88]	; (315c <_i2c_m_sync_init_impl+0xdc>)
    3102:	4413      	add	r3, r2
    3104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    3106:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3108:	69e3      	ldr	r3, [r4, #28]
    310a:	f013 0f04 	tst.w	r3, #4
    310e:	d1fb      	bne.n	3108 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    3110:	0042      	lsls	r2, r0, #1
    3112:	4402      	add	r2, r0
    3114:	00d1      	lsls	r1, r2, #3
    3116:	4b11      	ldr	r3, [pc, #68]	; (315c <_i2c_m_sync_init_impl+0xdc>)
    3118:	440b      	add	r3, r1
    311a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    311c:	60e2      	str	r2, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    311e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    3122:	f003 0303 	and.w	r3, r3, #3
    3126:	81ab      	strh	r3, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    3128:	2b01      	cmp	r3, #1
    312a:	bf94      	ite	ls
    312c:	2300      	movls	r3, #0
    312e:	2301      	movhi	r3, #1
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    3130:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    3132:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    3136:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    313a:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    313c:	69e3      	ldr	r3, [r4, #28]
    313e:	f013 0f04 	tst.w	r3, #4
    3142:	d1fb      	bne.n	313c <_i2c_m_sync_init_impl+0xbc>
	service->trise = _i2cms[i].trise;
    3144:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3148:	00c2      	lsls	r2, r0, #3
    314a:	4b04      	ldr	r3, [pc, #16]	; (315c <_i2c_m_sync_init_impl+0xdc>)
    314c:	4413      	add	r3, r2
    314e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    3152:	81eb      	strh	r3, [r5, #14]
}
    3154:	2000      	movs	r0, #0
    3156:	bd38      	pop	{r3, r4, r5, pc}
    3158:	00003039 	.word	0x00003039
    315c:	00006154 	.word	0x00006154

00003160 <_sercom_i2c_sync_send_address>:
{
    3160:	b570      	push	{r4, r5, r6, lr}
    3162:	4605      	mov	r5, r0
	void *             hw    = i2c_dev->hw;
    3164:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    3166:	6826      	ldr	r6, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    3168:	f3c6 66c0 	ubfx	r6, r6, #27, #1
	ASSERT(i2c_dev);
    316c:	f240 52a6 	movw	r2, #1446	; 0x5a6
    3170:	4999      	ldr	r1, [pc, #612]	; (33d8 <_sercom_i2c_sync_send_address+0x278>)
    3172:	3000      	adds	r0, #0
    3174:	bf18      	it	ne
    3176:	2001      	movne	r0, #1
    3178:	4b98      	ldr	r3, [pc, #608]	; (33dc <_sercom_i2c_sync_send_address+0x27c>)
    317a:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    317c:	686b      	ldr	r3, [r5, #4]
    317e:	2b01      	cmp	r3, #1
    3180:	d057      	beq.n	3232 <_sercom_i2c_sync_send_address+0xd2>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3182:	6863      	ldr	r3, [r4, #4]
    3184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    3188:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    318a:	69e3      	ldr	r3, [r4, #28]
    318c:	f013 0f04 	tst.w	r3, #4
    3190:	d1fb      	bne.n	318a <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
    3192:	882b      	ldrh	r3, [r5, #0]
    3194:	f413 6f80 	tst.w	r3, #1024	; 0x400
    3198:	d056      	beq.n	3248 <_sercom_i2c_sync_send_address+0xe8>
		if (msg->flags & I2C_M_RD) {
    319a:	886a      	ldrh	r2, [r5, #2]
    319c:	f012 0f01 	tst.w	r2, #1
    31a0:	d004      	beq.n	31ac <_sercom_i2c_sync_send_address+0x4c>
			msg->flags |= I2C_M_TEN;
    31a2:	886a      	ldrh	r2, [r5, #2]
    31a4:	b292      	uxth	r2, r2
    31a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    31aa:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    31ac:	f240 72fe 	movw	r2, #2046	; 0x7fe
    31b0:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    31b4:	69e3      	ldr	r3, [r4, #28]
    31b6:	f013 0f04 	tst.w	r3, #4
    31ba:	d1fb      	bne.n	31b4 <_sercom_i2c_sync_send_address+0x54>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    31bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    31be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    31c2:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    31c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    31c8:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    31ca:	69e3      	ldr	r3, [r4, #28]
    31cc:	f013 0f04 	tst.w	r3, #4
    31d0:	d1fb      	bne.n	31ca <_sercom_i2c_sync_send_address+0x6a>
	void *   hw      = i2c_dev->hw;
    31d2:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
    31d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    31d8:	7e33      	ldrb	r3, [r6, #24]
    31da:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    31dc:	4618      	mov	r0, r3
		if (timeout-- == 0) {
    31de:	1e51      	subs	r1, r2, #1
    31e0:	b11a      	cbz	r2, 31ea <_sercom_i2c_sync_send_address+0x8a>
    31e2:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    31e4:	f013 0f03 	tst.w	r3, #3
    31e8:	d0f6      	beq.n	31d8 <_sercom_i2c_sync_send_address+0x78>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    31ea:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    31ec:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    31f0:	69e3      	ldr	r3, [r4, #28]
    31f2:	f013 0f04 	tst.w	r3, #4
    31f6:	d1fb      	bne.n	31f0 <_sercom_i2c_sync_send_address+0x90>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    31f8:	8b63      	ldrh	r3, [r4, #26]
    31fa:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    31fc:	f010 0f01 	tst.w	r0, #1
    3200:	f000 809c 	beq.w	333c <_sercom_i2c_sync_send_address+0x1dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    3204:	f013 0f02 	tst.w	r3, #2
    3208:	d032      	beq.n	3270 <_sercom_i2c_sync_send_address+0x110>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    320a:	2201      	movs	r2, #1
    320c:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    320e:	886a      	ldrh	r2, [r5, #2]
    3210:	b292      	uxth	r2, r2
    3212:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    3216:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    3218:	886a      	ldrh	r2, [r5, #2]
    321a:	b292      	uxth	r2, r2
    321c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    3220:	b292      	uxth	r2, r2
    3222:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    3224:	f013 0f01 	tst.w	r3, #1
    3228:	f000 80d1 	beq.w	33ce <_sercom_i2c_sync_send_address+0x26e>
				return I2C_ERR_BUS;
    322c:	f06f 0004 	mvn.w	r0, #4
    3230:	bd70      	pop	{r4, r5, r6, pc}
	if (msg->len == 1 && sclsm) {
    3232:	2e00      	cmp	r6, #0
    3234:	d0a5      	beq.n	3182 <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3236:	6863      	ldr	r3, [r4, #4]
    3238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    323c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    323e:	69e3      	ldr	r3, [r4, #28]
    3240:	f013 0f04 	tst.w	r3, #4
    3244:	d1fb      	bne.n	323e <_sercom_i2c_sync_send_address+0xde>
    3246:	e7a4      	b.n	3192 <_sercom_i2c_sync_send_address+0x32>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    3248:	005b      	lsls	r3, r3, #1
    324a:	b2db      	uxtb	r3, r3
    324c:	886a      	ldrh	r2, [r5, #2]
    324e:	f002 0201 	and.w	r2, r2, #1
    3252:	431a      	orrs	r2, r3
    3254:	69e3      	ldr	r3, [r4, #28]
    3256:	f013 0f04 	tst.w	r3, #4
    325a:	d1fb      	bne.n	3254 <_sercom_i2c_sync_send_address+0xf4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    325c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    325e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    3262:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3264:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3266:	69e3      	ldr	r3, [r4, #28]
    3268:	f013 0f04 	tst.w	r3, #4
    326c:	d1fb      	bne.n	3266 <_sercom_i2c_sync_send_address+0x106>
    326e:	e7b0      	b.n	31d2 <_sercom_i2c_sync_send_address+0x72>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    3270:	f013 0f04 	tst.w	r3, #4
    3274:	d11f      	bne.n	32b6 <_sercom_i2c_sync_send_address+0x156>
			if (msg->flags & I2C_M_TEN) {
    3276:	886b      	ldrh	r3, [r5, #2]
    3278:	f413 6f80 	tst.w	r3, #1024	; 0x400
    327c:	d039      	beq.n	32f2 <_sercom_i2c_sync_send_address+0x192>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    327e:	882b      	ldrh	r3, [r5, #0]
    3280:	121b      	asrs	r3, r3, #8
    3282:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3284:	f003 0206 	and.w	r2, r3, #6
    3288:	69e3      	ldr	r3, [r4, #28]
    328a:	f013 0f04 	tst.w	r3, #4
    328e:	d1fb      	bne.n	3288 <_sercom_i2c_sync_send_address+0x128>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3290:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    3296:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    3298:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    329c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    329e:	69e3      	ldr	r3, [r4, #28]
    32a0:	f013 0f04 	tst.w	r3, #4
    32a4:	d1fb      	bne.n	329e <_sercom_i2c_sync_send_address+0x13e>
				msg->flags &= ~I2C_M_TEN;
    32a6:	886b      	ldrh	r3, [r5, #2]
    32a8:	b29b      	uxth	r3, r3
    32aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    32ae:	b29b      	uxth	r3, r3
    32b0:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    32b2:	2000      	movs	r0, #0
    32b4:	bd70      	pop	{r4, r5, r6, pc}
				if (msg->len > 0) {
    32b6:	686b      	ldr	r3, [r5, #4]
    32b8:	2b00      	cmp	r3, #0
    32ba:	dd04      	ble.n	32c6 <_sercom_i2c_sync_send_address+0x166>
					msg->flags |= I2C_M_FAIL;
    32bc:	886b      	ldrh	r3, [r5, #2]
    32be:	b29b      	uxth	r3, r3
    32c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    32c4:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    32c6:	886b      	ldrh	r3, [r5, #2]
    32c8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    32cc:	d108      	bne.n	32e0 <_sercom_i2c_sync_send_address+0x180>
				msg->flags &= ~I2C_M_BUSY;
    32ce:	886b      	ldrh	r3, [r5, #2]
    32d0:	b29b      	uxth	r3, r3
    32d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    32d6:	b29b      	uxth	r3, r3
    32d8:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    32da:	f06f 0001 	mvn.w	r0, #1
    32de:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    32e0:	6863      	ldr	r3, [r4, #4]
    32e2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    32e6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    32e8:	69e3      	ldr	r3, [r4, #28]
    32ea:	f013 0f04 	tst.w	r3, #4
    32ee:	d1fb      	bne.n	32e8 <_sercom_i2c_sync_send_address+0x188>
    32f0:	e7ed      	b.n	32ce <_sercom_i2c_sync_send_address+0x16e>
			if (msg->len == 0) {
    32f2:	6868      	ldr	r0, [r5, #4]
    32f4:	b998      	cbnz	r0, 331e <_sercom_i2c_sync_send_address+0x1be>
				if (msg->flags & I2C_M_STOP) {
    32f6:	886b      	ldrh	r3, [r5, #2]
    32f8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    32fc:	d106      	bne.n	330c <_sercom_i2c_sync_send_address+0x1ac>
				msg->flags &= ~I2C_M_BUSY;
    32fe:	886b      	ldrh	r3, [r5, #2]
    3300:	b29b      	uxth	r3, r3
    3302:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3306:	b29b      	uxth	r3, r3
    3308:	806b      	strh	r3, [r5, #2]
    330a:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    330c:	6863      	ldr	r3, [r4, #4]
    330e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    3312:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3314:	69e3      	ldr	r3, [r4, #28]
    3316:	f013 0f04 	tst.w	r3, #4
    331a:	d1fb      	bne.n	3314 <_sercom_i2c_sync_send_address+0x1b4>
    331c:	e7ef      	b.n	32fe <_sercom_i2c_sync_send_address+0x19e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    331e:	68ab      	ldr	r3, [r5, #8]
    3320:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    3322:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3324:	69e3      	ldr	r3, [r4, #28]
    3326:	f013 0f04 	tst.w	r3, #4
    332a:	d1fb      	bne.n	3324 <_sercom_i2c_sync_send_address+0x1c4>
				msg->buffer++;
    332c:	68ab      	ldr	r3, [r5, #8]
    332e:	3301      	adds	r3, #1
    3330:	60ab      	str	r3, [r5, #8]
				msg->len--;
    3332:	686b      	ldr	r3, [r5, #4]
    3334:	3b01      	subs	r3, #1
    3336:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    3338:	2000      	movs	r0, #0
    333a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (flags & SB_FLAG) {
    333c:	f010 0f02 	tst.w	r0, #2
    3340:	d048      	beq.n	33d4 <_sercom_i2c_sync_send_address+0x274>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    3342:	6869      	ldr	r1, [r5, #4]
    3344:	2900      	cmp	r1, #0
    3346:	d03d      	beq.n	33c4 <_sercom_i2c_sync_send_address+0x264>
    3348:	f013 0f04 	tst.w	r3, #4
    334c:	d13a      	bne.n	33c4 <_sercom_i2c_sync_send_address+0x264>
			msg->len--;
    334e:	3901      	subs	r1, #1
    3350:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    3352:	b901      	cbnz	r1, 3356 <_sercom_i2c_sync_send_address+0x1f6>
    3354:	b1e2      	cbz	r2, 3390 <_sercom_i2c_sync_send_address+0x230>
    3356:	2901      	cmp	r1, #1
    3358:	d018      	beq.n	338c <_sercom_i2c_sync_send_address+0x22c>
			if (msg->len == 0) {
    335a:	686b      	ldr	r3, [r5, #4]
    335c:	b94b      	cbnz	r3, 3372 <_sercom_i2c_sync_send_address+0x212>
				if (msg->flags & I2C_M_STOP) {
    335e:	886b      	ldrh	r3, [r5, #2]
    3360:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3364:	d11d      	bne.n	33a2 <_sercom_i2c_sync_send_address+0x242>
				msg->flags &= ~I2C_M_BUSY;
    3366:	886b      	ldrh	r3, [r5, #2]
    3368:	b29b      	uxth	r3, r3
    336a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    336e:	b29b      	uxth	r3, r3
    3370:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    3372:	68aa      	ldr	r2, [r5, #8]
    3374:	1c53      	adds	r3, r2, #1
    3376:	60ab      	str	r3, [r5, #8]
    3378:	69e3      	ldr	r3, [r4, #28]
    337a:	f013 0f04 	tst.w	r3, #4
    337e:	d1fb      	bne.n	3378 <_sercom_i2c_sync_send_address+0x218>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    3380:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3382:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3384:	2302      	movs	r3, #2
    3386:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    3388:	2000      	movs	r0, #0
    338a:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    338c:	2a00      	cmp	r2, #0
    338e:	d0e4      	beq.n	335a <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3390:	6863      	ldr	r3, [r4, #4]
    3392:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    3396:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3398:	69e3      	ldr	r3, [r4, #28]
    339a:	f013 0f04 	tst.w	r3, #4
    339e:	d1fb      	bne.n	3398 <_sercom_i2c_sync_send_address+0x238>
    33a0:	e7db      	b.n	335a <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    33a2:	6863      	ldr	r3, [r4, #4]
    33a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    33a8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    33aa:	69e3      	ldr	r3, [r4, #28]
    33ac:	f013 0f04 	tst.w	r3, #4
    33b0:	d1fb      	bne.n	33aa <_sercom_i2c_sync_send_address+0x24a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    33b2:	6863      	ldr	r3, [r4, #4]
    33b4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    33b8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    33ba:	69e3      	ldr	r3, [r4, #28]
    33bc:	f013 0f04 	tst.w	r3, #4
    33c0:	d1fb      	bne.n	33ba <_sercom_i2c_sync_send_address+0x25a>
    33c2:	e7d0      	b.n	3366 <_sercom_i2c_sync_send_address+0x206>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    33c4:	2302      	movs	r3, #2
    33c6:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    33c8:	f06f 0001 	mvn.w	r0, #1
    33cc:	bd70      	pop	{r4, r5, r6, pc}
			return I2C_ERR_BAD_ADDRESS;
    33ce:	f06f 0003 	mvn.w	r0, #3
    33d2:	bd70      	pop	{r4, r5, r6, pc}
	return I2C_OK;
    33d4:	2000      	movs	r0, #0
}
    33d6:	bd70      	pop	{r4, r5, r6, pc}
    33d8:	000061d8 	.word	0x000061d8
    33dc:	0000234d 	.word	0x0000234d

000033e0 <_spi_m_dma_rx_enable>:
{
    33e0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    33e2:	4604      	mov	r4, r0
    33e4:	b168      	cbz	r0, 3402 <_spi_m_dma_rx_enable+0x22>
    33e6:	6803      	ldr	r3, [r0, #0]
    33e8:	b14b      	cbz	r3, 33fe <_spi_m_dma_rx_enable+0x1e>
    33ea:	2001      	movs	r0, #1
    33ec:	f640 32fe 	movw	r2, #3070	; 0xbfe
    33f0:	4905      	ldr	r1, [pc, #20]	; (3408 <_spi_m_dma_rx_enable+0x28>)
    33f2:	4b06      	ldr	r3, [pc, #24]	; (340c <_spi_m_dma_rx_enable+0x2c>)
    33f4:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    33f6:	6820      	ldr	r0, [r4, #0]
    33f8:	4b05      	ldr	r3, [pc, #20]	; (3410 <_spi_m_dma_rx_enable+0x30>)
    33fa:	4798      	blx	r3
}
    33fc:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    33fe:	2000      	movs	r0, #0
    3400:	e7f4      	b.n	33ec <_spi_m_dma_rx_enable+0xc>
    3402:	2000      	movs	r0, #0
    3404:	e7f2      	b.n	33ec <_spi_m_dma_rx_enable+0xc>
    3406:	bf00      	nop
    3408:	000061d8 	.word	0x000061d8
    340c:	0000234d 	.word	0x0000234d
    3410:	00002e23 	.word	0x00002e23

00003414 <_spi_m_dma_rx_disable>:
{
    3414:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    3416:	4604      	mov	r4, r0
    3418:	b168      	cbz	r0, 3436 <_spi_m_dma_rx_disable+0x22>
    341a:	6803      	ldr	r3, [r0, #0]
    341c:	b14b      	cbz	r3, 3432 <_spi_m_dma_rx_disable+0x1e>
    341e:	2001      	movs	r0, #1
    3420:	f640 4205 	movw	r2, #3077	; 0xc05
    3424:	4905      	ldr	r1, [pc, #20]	; (343c <_spi_m_dma_rx_disable+0x28>)
    3426:	4b06      	ldr	r3, [pc, #24]	; (3440 <_spi_m_dma_rx_disable+0x2c>)
    3428:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    342a:	6820      	ldr	r0, [r4, #0]
    342c:	4b05      	ldr	r3, [pc, #20]	; (3444 <_spi_m_dma_rx_disable+0x30>)
    342e:	4798      	blx	r3
}
    3430:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    3432:	2000      	movs	r0, #0
    3434:	e7f4      	b.n	3420 <_spi_m_dma_rx_disable+0xc>
    3436:	2000      	movs	r0, #0
    3438:	e7f2      	b.n	3420 <_spi_m_dma_rx_disable+0xc>
    343a:	bf00      	nop
    343c:	000061d8 	.word	0x000061d8
    3440:	0000234d 	.word	0x0000234d
    3444:	00002e45 	.word	0x00002e45

00003448 <_usart_sync_init>:
{
    3448:	b538      	push	{r3, r4, r5, lr}
    344a:	460c      	mov	r4, r1
	ASSERT(device);
    344c:	4605      	mov	r5, r0
    344e:	22bc      	movs	r2, #188	; 0xbc
    3450:	4905      	ldr	r1, [pc, #20]	; (3468 <_usart_sync_init+0x20>)
    3452:	3000      	adds	r0, #0
    3454:	bf18      	it	ne
    3456:	2001      	movne	r0, #1
    3458:	4b04      	ldr	r3, [pc, #16]	; (346c <_usart_sync_init+0x24>)
    345a:	4798      	blx	r3
	device->hw = hw;
    345c:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    345e:	4620      	mov	r0, r4
    3460:	4b03      	ldr	r3, [pc, #12]	; (3470 <_usart_sync_init+0x28>)
    3462:	4798      	blx	r3
}
    3464:	bd38      	pop	{r3, r4, r5, pc}
    3466:	bf00      	nop
    3468:	000061d8 	.word	0x000061d8
    346c:	0000234d 	.word	0x0000234d
    3470:	00002f39 	.word	0x00002f39

00003474 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    3474:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3476:	6813      	ldr	r3, [r2, #0]
    3478:	f043 0302 	orr.w	r3, r3, #2
    347c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    347e:	69d3      	ldr	r3, [r2, #28]
    3480:	f013 0f03 	tst.w	r3, #3
    3484:	d1fb      	bne.n	347e <_usart_sync_enable+0xa>
}
    3486:	4770      	bx	lr

00003488 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3488:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    348a:	6299      	str	r1, [r3, #40]	; 0x28
    348c:	4770      	bx	lr

0000348e <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    348e:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    3490:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    3492:	b2c0      	uxtb	r0, r0
    3494:	4770      	bx	lr

00003496 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    3496:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3498:	7e18      	ldrb	r0, [r3, #24]
}
    349a:	f000 0001 	and.w	r0, r0, #1
    349e:	4770      	bx	lr

000034a0 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    34a0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    34a2:	7e18      	ldrb	r0, [r3, #24]
}
    34a4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    34a8:	4770      	bx	lr

000034aa <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    34aa:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    34ac:	7e18      	ldrb	r0, [r3, #24]
}
    34ae:	f3c0 0080 	ubfx	r0, r0, #2, #1
    34b2:	4770      	bx	lr

000034b4 <_i2c_m_sync_init>:
{
    34b4:	b538      	push	{r3, r4, r5, lr}
    34b6:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    34b8:	4604      	mov	r4, r0
    34ba:	f240 5219 	movw	r2, #1305	; 0x519
    34be:	4906      	ldr	r1, [pc, #24]	; (34d8 <_i2c_m_sync_init+0x24>)
    34c0:	3000      	adds	r0, #0
    34c2:	bf18      	it	ne
    34c4:	2001      	movne	r0, #1
    34c6:	4b05      	ldr	r3, [pc, #20]	; (34dc <_i2c_m_sync_init+0x28>)
    34c8:	4798      	blx	r3
	i2c_dev->hw = hw;
    34ca:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    34cc:	4629      	mov	r1, r5
    34ce:	4620      	mov	r0, r4
    34d0:	4b03      	ldr	r3, [pc, #12]	; (34e0 <_i2c_m_sync_init+0x2c>)
    34d2:	4798      	blx	r3
}
    34d4:	bd38      	pop	{r3, r4, r5, pc}
    34d6:	bf00      	nop
    34d8:	000061d8 	.word	0x000061d8
    34dc:	0000234d 	.word	0x0000234d
    34e0:	00003081 	.word	0x00003081

000034e4 <_i2c_m_sync_enable>:
{
    34e4:	b570      	push	{r4, r5, r6, lr}
	ASSERT(i2c_dev);
    34e6:	4e1b      	ldr	r6, [pc, #108]	; (3554 <_i2c_m_sync_enable+0x70>)
    34e8:	4604      	mov	r4, r0
    34ea:	f240 5236 	movw	r2, #1334	; 0x536
    34ee:	4631      	mov	r1, r6
    34f0:	3000      	adds	r0, #0
    34f2:	bf18      	it	ne
    34f4:	2001      	movne	r0, #1
    34f6:	4d18      	ldr	r5, [pc, #96]	; (3558 <_i2c_m_sync_enable+0x74>)
    34f8:	47a8      	blx	r5
	return _i2c_m_enable_implementation(i2c_dev->hw);
    34fa:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    34fc:	f240 6206 	movw	r2, #1542	; 0x606
    3500:	4631      	mov	r1, r6
    3502:	1c20      	adds	r0, r4, #0
    3504:	bf18      	it	ne
    3506:	2001      	movne	r0, #1
    3508:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    350a:	6823      	ldr	r3, [r4, #0]
    350c:	f043 0302 	orr.w	r3, r3, #2
    3510:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3512:	69e3      	ldr	r3, [r4, #28]
    3514:	f013 0f03 	tst.w	r3, #3
    3518:	d1fb      	bne.n	3512 <_i2c_m_sync_enable+0x2e>
    351a:	2104      	movs	r1, #4
    351c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3520:	69e3      	ldr	r3, [r4, #28]
    3522:	f013 0f04 	tst.w	r3, #4
    3526:	d1fb      	bne.n	3520 <_i2c_m_sync_enable+0x3c>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    3528:	8b63      	ldrh	r3, [r4, #26]
    352a:	f3c3 1301 	ubfx	r3, r3, #4, #2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    352e:	2b01      	cmp	r3, #1
    3530:	d00b      	beq.n	354a <_i2c_m_sync_enable+0x66>
		timeout--;
    3532:	3a01      	subs	r2, #1
		if (timeout <= 0) {
    3534:	2a00      	cmp	r2, #0
    3536:	dcf3      	bgt.n	3520 <_i2c_m_sync_enable+0x3c>
			if (--timeout_attempt)
    3538:	3901      	subs	r1, #1
    353a:	d008      	beq.n	354e <_i2c_m_sync_enable+0x6a>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    353c:	2310      	movs	r3, #16
    353e:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3540:	69e3      	ldr	r3, [r4, #28]
    3542:	f013 0f04 	tst.w	r3, #4
    3546:	d1fb      	bne.n	3540 <_i2c_m_sync_enable+0x5c>
    3548:	e7e8      	b.n	351c <_i2c_m_sync_enable+0x38>
	return ERR_NONE;
    354a:	2000      	movs	r0, #0
    354c:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    354e:	f06f 0005 	mvn.w	r0, #5
}
    3552:	bd70      	pop	{r4, r5, r6, pc}
    3554:	000061d8 	.word	0x000061d8
    3558:	0000234d 	.word	0x0000234d

0000355c <_i2c_m_sync_transfer>:
{
    355c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3560:	4605      	mov	r5, r0
    3562:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    3564:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    3566:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 3808 <_i2c_m_sync_transfer+0x2ac>
    356a:	f240 52d1 	movw	r2, #1489	; 0x5d1
    356e:	4641      	mov	r1, r8
    3570:	3000      	adds	r0, #0
    3572:	bf18      	it	ne
    3574:	2001      	movne	r0, #1
    3576:	4fa2      	ldr	r7, [pc, #648]	; (3800 <_i2c_m_sync_transfer+0x2a4>)
    3578:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    357a:	6928      	ldr	r0, [r5, #16]
    357c:	f240 52d2 	movw	r2, #1490	; 0x5d2
    3580:	4641      	mov	r1, r8
    3582:	3000      	adds	r0, #0
    3584:	bf18      	it	ne
    3586:	2001      	movne	r0, #1
    3588:	47b8      	blx	r7
	ASSERT(msg);
    358a:	f240 52d3 	movw	r2, #1491	; 0x5d3
    358e:	4641      	mov	r1, r8
    3590:	1c30      	adds	r0, r6, #0
    3592:	bf18      	it	ne
    3594:	2001      	movne	r0, #1
    3596:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    3598:	886b      	ldrh	r3, [r5, #2]
    359a:	f413 7f80 	tst.w	r3, #256	; 0x100
    359e:	f040 812a 	bne.w	37f6 <_i2c_m_sync_transfer+0x29a>
	msg->flags |= I2C_M_BUSY;
    35a2:	8873      	ldrh	r3, [r6, #2]
    35a4:	b29b      	uxth	r3, r3
    35a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    35aa:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    35ac:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    35b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    35b4:	6863      	ldr	r3, [r4, #4]
    35b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    35ba:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    35bc:	69e3      	ldr	r3, [r4, #28]
    35be:	f013 0f04 	tst.w	r3, #4
    35c2:	d1fb      	bne.n	35bc <_i2c_m_sync_transfer+0x60>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    35c4:	4628      	mov	r0, r5
    35c6:	4b8f      	ldr	r3, [pc, #572]	; (3804 <_i2c_m_sync_transfer+0x2a8>)
    35c8:	4798      	blx	r3
	if (ret) {
    35ca:	4603      	mov	r3, r0
    35cc:	2800      	cmp	r0, #0
    35ce:	f000 80b0 	beq.w	3732 <_i2c_m_sync_transfer+0x1d6>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    35d2:	886a      	ldrh	r2, [r5, #2]
    35d4:	b292      	uxth	r2, r2
    35d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    35da:	b292      	uxth	r2, r2
    35dc:	806a      	strh	r2, [r5, #2]
		return ret;
    35de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return I2C_ERR_BUS;
    35e2:	f06f 0004 	mvn.w	r0, #4
    35e6:	e0b7      	b.n	3758 <_i2c_m_sync_transfer+0x1fc>
			if (msg->flags & I2C_M_STOP) {
    35e8:	8873      	ldrh	r3, [r6, #2]
    35ea:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    35ee:	d107      	bne.n	3600 <_i2c_m_sync_transfer+0xa4>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    35f0:	886b      	ldrh	r3, [r5, #2]
    35f2:	b29b      	uxth	r3, r3
    35f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    35f8:	b29b      	uxth	r3, r3
    35fa:	806b      	strh	r3, [r5, #2]
			return ret;
    35fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3600:	6863      	ldr	r3, [r4, #4]
    3602:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    3606:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3608:	69e3      	ldr	r3, [r4, #28]
    360a:	f013 0f04 	tst.w	r3, #4
    360e:	d1fb      	bne.n	3608 <_i2c_m_sync_transfer+0xac>
    3610:	e7ee      	b.n	35f0 <_i2c_m_sync_transfer+0x94>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    3612:	f013 0f04 	tst.w	r3, #4
    3616:	d11f      	bne.n	3658 <_i2c_m_sync_transfer+0xfc>
			if (msg->flags & I2C_M_TEN) {
    3618:	886b      	ldrh	r3, [r5, #2]
    361a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    361e:	d039      	beq.n	3694 <_i2c_m_sync_transfer+0x138>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    3620:	882b      	ldrh	r3, [r5, #0]
    3622:	121b      	asrs	r3, r3, #8
    3624:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3626:	f003 0206 	and.w	r2, r3, #6
    362a:	69e3      	ldr	r3, [r4, #28]
    362c:	f013 0f04 	tst.w	r3, #4
    3630:	d1fb      	bne.n	362a <_i2c_m_sync_transfer+0xce>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3632:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    3638:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    363a:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    363e:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3640:	69e3      	ldr	r3, [r4, #28]
    3642:	f013 0f04 	tst.w	r3, #4
    3646:	d1fb      	bne.n	3640 <_i2c_m_sync_transfer+0xe4>
				msg->flags &= ~I2C_M_TEN;
    3648:	886b      	ldrh	r3, [r5, #2]
    364a:	b29b      	uxth	r3, r3
    364c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3650:	b29b      	uxth	r3, r3
    3652:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    3654:	2000      	movs	r0, #0
    3656:	e06b      	b.n	3730 <_i2c_m_sync_transfer+0x1d4>
				if (msg->len > 0) {
    3658:	686b      	ldr	r3, [r5, #4]
    365a:	2b00      	cmp	r3, #0
    365c:	dd04      	ble.n	3668 <_i2c_m_sync_transfer+0x10c>
					msg->flags |= I2C_M_FAIL;
    365e:	886b      	ldrh	r3, [r5, #2]
    3660:	b29b      	uxth	r3, r3
    3662:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    3666:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    3668:	886b      	ldrh	r3, [r5, #2]
    366a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    366e:	d108      	bne.n	3682 <_i2c_m_sync_transfer+0x126>
				msg->flags &= ~I2C_M_BUSY;
    3670:	886b      	ldrh	r3, [r5, #2]
    3672:	b29b      	uxth	r3, r3
    3674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3678:	b29b      	uxth	r3, r3
    367a:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    367c:	f06f 0001 	mvn.w	r0, #1
    3680:	e056      	b.n	3730 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3682:	6863      	ldr	r3, [r4, #4]
    3684:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    3688:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    368a:	69e3      	ldr	r3, [r4, #28]
    368c:	f013 0f04 	tst.w	r3, #4
    3690:	d1fb      	bne.n	368a <_i2c_m_sync_transfer+0x12e>
    3692:	e7ed      	b.n	3670 <_i2c_m_sync_transfer+0x114>
			if (msg->len == 0) {
    3694:	6868      	ldr	r0, [r5, #4]
    3696:	b998      	cbnz	r0, 36c0 <_i2c_m_sync_transfer+0x164>
				if (msg->flags & I2C_M_STOP) {
    3698:	886b      	ldrh	r3, [r5, #2]
    369a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    369e:	d106      	bne.n	36ae <_i2c_m_sync_transfer+0x152>
				msg->flags &= ~I2C_M_BUSY;
    36a0:	886b      	ldrh	r3, [r5, #2]
    36a2:	b29b      	uxth	r3, r3
    36a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    36a8:	b29b      	uxth	r3, r3
    36aa:	806b      	strh	r3, [r5, #2]
    36ac:	e040      	b.n	3730 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    36ae:	6863      	ldr	r3, [r4, #4]
    36b0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    36b4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    36b6:	69e3      	ldr	r3, [r4, #28]
    36b8:	f013 0f04 	tst.w	r3, #4
    36bc:	d1fb      	bne.n	36b6 <_i2c_m_sync_transfer+0x15a>
    36be:	e7ef      	b.n	36a0 <_i2c_m_sync_transfer+0x144>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    36c0:	68ab      	ldr	r3, [r5, #8]
    36c2:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    36c4:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    36c6:	69e3      	ldr	r3, [r4, #28]
    36c8:	f013 0f04 	tst.w	r3, #4
    36cc:	d1fb      	bne.n	36c6 <_i2c_m_sync_transfer+0x16a>
				msg->buffer++;
    36ce:	68ab      	ldr	r3, [r5, #8]
    36d0:	3301      	adds	r3, #1
    36d2:	60ab      	str	r3, [r5, #8]
				msg->len--;
    36d4:	686b      	ldr	r3, [r5, #4]
    36d6:	3b01      	subs	r3, #1
    36d8:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    36da:	2000      	movs	r0, #0
    36dc:	e028      	b.n	3730 <_i2c_m_sync_transfer+0x1d4>
	} else if (flags & SB_FLAG) {
    36de:	f017 0f02 	tst.w	r7, #2
    36e2:	f000 8083 	beq.w	37ec <_i2c_m_sync_transfer+0x290>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    36e6:	6869      	ldr	r1, [r5, #4]
    36e8:	2900      	cmp	r1, #0
    36ea:	d077      	beq.n	37dc <_i2c_m_sync_transfer+0x280>
    36ec:	f013 0f04 	tst.w	r3, #4
    36f0:	d174      	bne.n	37dc <_i2c_m_sync_transfer+0x280>
			msg->len--;
    36f2:	3901      	subs	r1, #1
    36f4:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    36f6:	b909      	cbnz	r1, 36fc <_i2c_m_sync_transfer+0x1a0>
    36f8:	2a00      	cmp	r2, #0
    36fa:	d055      	beq.n	37a8 <_i2c_m_sync_transfer+0x24c>
    36fc:	2901      	cmp	r1, #1
    36fe:	d051      	beq.n	37a4 <_i2c_m_sync_transfer+0x248>
			if (msg->len == 0) {
    3700:	686b      	ldr	r3, [r5, #4]
    3702:	b94b      	cbnz	r3, 3718 <_i2c_m_sync_transfer+0x1bc>
				if (msg->flags & I2C_M_STOP) {
    3704:	886b      	ldrh	r3, [r5, #2]
    3706:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    370a:	d156      	bne.n	37ba <_i2c_m_sync_transfer+0x25e>
				msg->flags &= ~I2C_M_BUSY;
    370c:	886b      	ldrh	r3, [r5, #2]
    370e:	b29b      	uxth	r3, r3
    3710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3714:	b29b      	uxth	r3, r3
    3716:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    3718:	68aa      	ldr	r2, [r5, #8]
    371a:	1c53      	adds	r3, r2, #1
    371c:	60ab      	str	r3, [r5, #8]
    371e:	69e3      	ldr	r3, [r4, #28]
    3720:	f013 0f04 	tst.w	r3, #4
    3724:	d1fb      	bne.n	371e <_i2c_m_sync_transfer+0x1c2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    3726:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3728:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    372a:	2302      	movs	r3, #2
    372c:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    372e:	2000      	movs	r0, #0
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    3730:	4603      	mov	r3, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    3732:	886a      	ldrh	r2, [r5, #2]
    3734:	f412 7f80 	tst.w	r2, #256	; 0x100
    3738:	d05a      	beq.n	37f0 <_i2c_m_sync_transfer+0x294>
	void *   hw      = i2c_dev->hw;
    373a:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    373c:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    3740:	7e03      	ldrb	r3, [r0, #24]
    3742:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    3744:	461f      	mov	r7, r3
		if (timeout-- == 0) {
    3746:	1e51      	subs	r1, r2, #1
    3748:	2a00      	cmp	r2, #0
    374a:	f43f af4a 	beq.w	35e2 <_i2c_m_sync_transfer+0x86>
    374e:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    3750:	f013 0f03 	tst.w	r3, #3
    3754:	d0f4      	beq.n	3740 <_i2c_m_sync_transfer+0x1e4>
	return I2C_OK;
    3756:	2000      	movs	r0, #0
		if (ret) {
    3758:	2800      	cmp	r0, #0
    375a:	f47f af45 	bne.w	35e8 <_i2c_m_sync_transfer+0x8c>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    375e:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    3760:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3764:	69e3      	ldr	r3, [r4, #28]
    3766:	f013 0f04 	tst.w	r3, #4
    376a:	d1fb      	bne.n	3764 <_i2c_m_sync_transfer+0x208>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    376c:	8b63      	ldrh	r3, [r4, #26]
    376e:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    3770:	f017 0f01 	tst.w	r7, #1
    3774:	d0b3      	beq.n	36de <_i2c_m_sync_transfer+0x182>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    3776:	f013 0f02 	tst.w	r3, #2
    377a:	f43f af4a 	beq.w	3612 <_i2c_m_sync_transfer+0xb6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    377e:	2201      	movs	r2, #1
    3780:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    3782:	886a      	ldrh	r2, [r5, #2]
    3784:	b292      	uxth	r2, r2
    3786:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    378a:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    378c:	886a      	ldrh	r2, [r5, #2]
    378e:	b292      	uxth	r2, r2
    3790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    3794:	b292      	uxth	r2, r2
    3796:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    3798:	f013 0f01 	tst.w	r3, #1
    379c:	d023      	beq.n	37e6 <_i2c_m_sync_transfer+0x28a>
				return I2C_ERR_BUS;
    379e:	f06f 0004 	mvn.w	r0, #4
    37a2:	e7c5      	b.n	3730 <_i2c_m_sync_transfer+0x1d4>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    37a4:	2a00      	cmp	r2, #0
    37a6:	d0ab      	beq.n	3700 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    37a8:	6863      	ldr	r3, [r4, #4]
    37aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    37ae:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37b0:	69e3      	ldr	r3, [r4, #28]
    37b2:	f013 0f04 	tst.w	r3, #4
    37b6:	d1fb      	bne.n	37b0 <_i2c_m_sync_transfer+0x254>
    37b8:	e7a2      	b.n	3700 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    37ba:	6863      	ldr	r3, [r4, #4]
    37bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    37c0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37c2:	69e3      	ldr	r3, [r4, #28]
    37c4:	f013 0f04 	tst.w	r3, #4
    37c8:	d1fb      	bne.n	37c2 <_i2c_m_sync_transfer+0x266>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    37ca:	6863      	ldr	r3, [r4, #4]
    37cc:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    37d0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37d2:	69e3      	ldr	r3, [r4, #28]
    37d4:	f013 0f04 	tst.w	r3, #4
    37d8:	d1fb      	bne.n	37d2 <_i2c_m_sync_transfer+0x276>
    37da:	e797      	b.n	370c <_i2c_m_sync_transfer+0x1b0>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    37dc:	2302      	movs	r3, #2
    37de:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    37e0:	f06f 0001 	mvn.w	r0, #1
    37e4:	e7a4      	b.n	3730 <_i2c_m_sync_transfer+0x1d4>
			return I2C_ERR_BAD_ADDRESS;
    37e6:	f06f 0003 	mvn.w	r0, #3
    37ea:	e7a1      	b.n	3730 <_i2c_m_sync_transfer+0x1d4>
	return I2C_OK;
    37ec:	2000      	movs	r0, #0
    37ee:	e79f      	b.n	3730 <_i2c_m_sync_transfer+0x1d4>
	return ret;
    37f0:	4618      	mov	r0, r3
    37f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return I2C_ERR_BUSY;
    37f6:	f06f 0005 	mvn.w	r0, #5
}
    37fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37fe:	bf00      	nop
    3800:	0000234d 	.word	0x0000234d
    3804:	00003161 	.word	0x00003161
    3808:	000061d8 	.word	0x000061d8

0000380c <_spi_m_sync_init>:
{
    380c:	b570      	push	{r4, r5, r6, lr}
    380e:	4605      	mov	r5, r0
    3810:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3812:	4608      	mov	r0, r1
    3814:	4b5b      	ldr	r3, [pc, #364]	; (3984 <_spi_m_sync_init+0x178>)
    3816:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3818:	2300      	movs	r3, #0
    381a:	2b01      	cmp	r3, #1
    381c:	d80e      	bhi.n	383c <_spi_m_sync_init+0x30>
		if (sercomspi_regs[i].n == n) {
    381e:	eb03 1103 	add.w	r1, r3, r3, lsl #4
    3822:	4a59      	ldr	r2, [pc, #356]	; (3988 <_spi_m_sync_init+0x17c>)
    3824:	440a      	add	r2, r1
    3826:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
    382a:	4290      	cmp	r0, r2
    382c:	d002      	beq.n	3834 <_spi_m_sync_init+0x28>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    382e:	3301      	adds	r3, #1
    3830:	b2db      	uxtb	r3, r3
    3832:	e7f2      	b.n	381a <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    3834:	460e      	mov	r6, r1
    3836:	4b55      	ldr	r3, [pc, #340]	; (398c <_spi_m_sync_init+0x180>)
    3838:	441e      	add	r6, r3
    383a:	e000      	b.n	383e <_spi_m_sync_init+0x32>
	return NULL;
    383c:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    383e:	2d00      	cmp	r5, #0
    3840:	d067      	beq.n	3912 <_spi_m_sync_init+0x106>
    3842:	2c00      	cmp	r4, #0
    3844:	d063      	beq.n	390e <_spi_m_sync_init+0x102>
    3846:	2001      	movs	r0, #1
    3848:	f44f 6214 	mov.w	r2, #2368	; 0x940
    384c:	4950      	ldr	r1, [pc, #320]	; (3990 <_spi_m_sync_init+0x184>)
    384e:	4b51      	ldr	r3, [pc, #324]	; (3994 <_spi_m_sync_init+0x188>)
    3850:	4798      	blx	r3
	if (regs == NULL) {
    3852:	2e00      	cmp	r6, #0
    3854:	f000 8092 	beq.w	397c <_spi_m_sync_init+0x170>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3858:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    385a:	f013 0f01 	tst.w	r3, #1
    385e:	d11d      	bne.n	389c <_spi_m_sync_init+0x90>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3860:	6833      	ldr	r3, [r6, #0]
    3862:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3866:	69e3      	ldr	r3, [r4, #28]
    3868:	f013 0f03 	tst.w	r3, #3
    386c:	d1fb      	bne.n	3866 <_spi_m_sync_init+0x5a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    386e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3870:	f013 0f02 	tst.w	r3, #2
    3874:	d00b      	beq.n	388e <_spi_m_sync_init+0x82>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3876:	6823      	ldr	r3, [r4, #0]
    3878:	f023 0302 	bic.w	r3, r3, #2
    387c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    387e:	69e3      	ldr	r3, [r4, #28]
    3880:	f013 0f03 	tst.w	r3, #3
    3884:	d1fb      	bne.n	387e <_spi_m_sync_init+0x72>
    3886:	69e3      	ldr	r3, [r4, #28]
    3888:	f013 0f02 	tst.w	r3, #2
    388c:	d1fb      	bne.n	3886 <_spi_m_sync_init+0x7a>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    388e:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3892:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3894:	69e3      	ldr	r3, [r4, #28]
    3896:	f013 0f03 	tst.w	r3, #3
    389a:	d1fb      	bne.n	3894 <_spi_m_sync_init+0x88>
    389c:	69e3      	ldr	r3, [r4, #28]
    389e:	f013 0f01 	tst.w	r3, #1
    38a2:	d1fb      	bne.n	389c <_spi_m_sync_init+0x90>
	dev->prvt = hw;
    38a4:	602c      	str	r4, [r5, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    38a6:	6833      	ldr	r3, [r6, #0]
    38a8:	f003 031c 	and.w	r3, r3, #28
    38ac:	2b08      	cmp	r3, #8
    38ae:	d032      	beq.n	3916 <_spi_m_sync_init+0x10a>
	ASSERT(hw && regs);
    38b0:	2c00      	cmp	r4, #0
    38b2:	d05f      	beq.n	3974 <_spi_m_sync_init+0x168>
    38b4:	2e00      	cmp	r6, #0
    38b6:	d05b      	beq.n	3970 <_spi_m_sync_init+0x164>
    38b8:	2001      	movs	r0, #1
    38ba:	f640 120a 	movw	r2, #2314	; 0x90a
    38be:	4934      	ldr	r1, [pc, #208]	; (3990 <_spi_m_sync_init+0x184>)
    38c0:	4b34      	ldr	r3, [pc, #208]	; (3994 <_spi_m_sync_init+0x188>)
    38c2:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    38c4:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    38c6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    38ca:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    38ce:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    38d0:	69e3      	ldr	r3, [r4, #28]
    38d2:	f013 0f03 	tst.w	r3, #3
    38d6:	d1fb      	bne.n	38d0 <_spi_m_sync_init+0xc4>
	    (regs->ctrlb
    38d8:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    38da:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    38de:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    38e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    38e6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    38e8:	69e3      	ldr	r3, [r4, #28]
    38ea:	f013 0f17 	tst.w	r3, #23
    38ee:	d1fb      	bne.n	38e8 <_spi_m_sync_init+0xdc>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    38f0:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    38f2:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    38f4:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    38f6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    38fa:	6873      	ldr	r3, [r6, #4]
    38fc:	f013 0f07 	tst.w	r3, #7
    3900:	d13a      	bne.n	3978 <_spi_m_sync_init+0x16c>
    3902:	2301      	movs	r3, #1
    3904:	712b      	strb	r3, [r5, #4]
	dev->dummy_byte = regs->dummy_byte;
    3906:	89f3      	ldrh	r3, [r6, #14]
    3908:	80eb      	strh	r3, [r5, #6]
	return ERR_NONE;
    390a:	2000      	movs	r0, #0
    390c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    390e:	2000      	movs	r0, #0
    3910:	e79a      	b.n	3848 <_spi_m_sync_init+0x3c>
    3912:	2000      	movs	r0, #0
    3914:	e798      	b.n	3848 <_spi_m_sync_init+0x3c>
	ASSERT(hw && regs);
    3916:	b34c      	cbz	r4, 396c <_spi_m_sync_init+0x160>
    3918:	b336      	cbz	r6, 3968 <_spi_m_sync_init+0x15c>
    391a:	2001      	movs	r0, #1
    391c:	f640 121e 	movw	r2, #2334	; 0x91e
    3920:	491b      	ldr	r1, [pc, #108]	; (3990 <_spi_m_sync_init+0x184>)
    3922:	4b1c      	ldr	r3, [pc, #112]	; (3994 <_spi_m_sync_init+0x188>)
    3924:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3926:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    3928:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    392c:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3930:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3932:	69e3      	ldr	r3, [r4, #28]
    3934:	f013 0f03 	tst.w	r3, #3
    3938:	d1fb      	bne.n	3932 <_spi_m_sync_init+0x126>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    393a:	6873      	ldr	r3, [r6, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    393c:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    3940:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    3944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3948:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    394c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    394e:	69e3      	ldr	r3, [r4, #28]
    3950:	f013 0f17 	tst.w	r3, #23
    3954:	d1fb      	bne.n	394e <_spi_m_sync_init+0x142>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    3956:	68b3      	ldr	r3, [r6, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    3958:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    395a:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    395c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3960:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    3962:	2b00      	cmp	r3, #0
    3964:	d1fc      	bne.n	3960 <_spi_m_sync_init+0x154>
    3966:	e7c8      	b.n	38fa <_spi_m_sync_init+0xee>
	ASSERT(hw && regs);
    3968:	2000      	movs	r0, #0
    396a:	e7d7      	b.n	391c <_spi_m_sync_init+0x110>
    396c:	2000      	movs	r0, #0
    396e:	e7d5      	b.n	391c <_spi_m_sync_init+0x110>
	ASSERT(hw && regs);
    3970:	2000      	movs	r0, #0
    3972:	e7a2      	b.n	38ba <_spi_m_sync_init+0xae>
    3974:	2000      	movs	r0, #0
    3976:	e7a0      	b.n	38ba <_spi_m_sync_init+0xae>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3978:	2302      	movs	r3, #2
    397a:	e7c3      	b.n	3904 <_spi_m_sync_init+0xf8>
		return ERR_INVALID_ARG;
    397c:	f06f 000c 	mvn.w	r0, #12
}
    3980:	bd70      	pop	{r4, r5, r6, pc}
    3982:	bf00      	nop
    3984:	00002dc1 	.word	0x00002dc1
    3988:	00006154 	.word	0x00006154
    398c:	000061b4 	.word	0x000061b4
    3990:	000061d8 	.word	0x000061d8
    3994:	0000234d 	.word	0x0000234d

00003998 <_spi_m_sync_enable>:
{
    3998:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    399a:	4604      	mov	r4, r0
    399c:	b168      	cbz	r0, 39ba <_spi_m_sync_enable+0x22>
    399e:	6803      	ldr	r3, [r0, #0]
    39a0:	b14b      	cbz	r3, 39b6 <_spi_m_sync_enable+0x1e>
    39a2:	2001      	movs	r0, #1
    39a4:	f640 129f 	movw	r2, #2463	; 0x99f
    39a8:	4905      	ldr	r1, [pc, #20]	; (39c0 <_spi_m_sync_enable+0x28>)
    39aa:	4b06      	ldr	r3, [pc, #24]	; (39c4 <_spi_m_sync_enable+0x2c>)
    39ac:	4798      	blx	r3
	return _spi_sync_enable(dev->prvt);
    39ae:	6820      	ldr	r0, [r4, #0]
    39b0:	4b05      	ldr	r3, [pc, #20]	; (39c8 <_spi_m_sync_enable+0x30>)
    39b2:	4798      	blx	r3
}
    39b4:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    39b6:	2000      	movs	r0, #0
    39b8:	e7f4      	b.n	39a4 <_spi_m_sync_enable+0xc>
    39ba:	2000      	movs	r0, #0
    39bc:	e7f2      	b.n	39a4 <_spi_m_sync_enable+0xc>
    39be:	bf00      	nop
    39c0:	000061d8 	.word	0x000061d8
    39c4:	0000234d 	.word	0x0000234d
    39c8:	00002e01 	.word	0x00002e01

000039cc <_spi_m_sync_trans>:
{
    39cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ce:	b087      	sub	sp, #28
    39d0:	4607      	mov	r7, r0
    39d2:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
    39d4:	6804      	ldr	r4, [r0, #0]
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    39d6:	680b      	ldr	r3, [r1, #0]
    39d8:	9301      	str	r3, [sp, #4]
    39da:	684b      	ldr	r3, [r1, #4]
    39dc:	9302      	str	r3, [sp, #8]
    39de:	2300      	movs	r3, #0
    39e0:	9303      	str	r3, [sp, #12]
    39e2:	9304      	str	r3, [sp, #16]
    39e4:	7906      	ldrb	r6, [r0, #4]
	ASSERT(dev && hw);
    39e6:	b1b8      	cbz	r0, 3a18 <_spi_m_sync_trans+0x4c>
    39e8:	b1a4      	cbz	r4, 3a14 <_spi_m_sync_trans+0x48>
    39ea:	2001      	movs	r0, #1
    39ec:	f640 22a4 	movw	r2, #2724	; 0xaa4
    39f0:	4934      	ldr	r1, [pc, #208]	; (3ac4 <_spi_m_sync_trans+0xf8>)
    39f2:	4b35      	ldr	r3, [pc, #212]	; (3ac8 <_spi_m_sync_trans+0xfc>)
    39f4:	4798      	blx	r3
    39f6:	69e3      	ldr	r3, [r4, #28]
	if (hri_sercomspi_is_syncing(
    39f8:	f013 0f07 	tst.w	r3, #7
    39fc:	d15f      	bne.n	3abe <_spi_m_sync_trans+0xf2>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    39fe:	69e3      	ldr	r3, [r4, #28]
    3a00:	f013 0f03 	tst.w	r3, #3
    3a04:	d1fb      	bne.n	39fe <_spi_m_sync_trans+0x32>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3a06:	6823      	ldr	r3, [r4, #0]
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3a08:	f013 0f02 	tst.w	r3, #2
    3a0c:	d11e      	bne.n	3a4c <_spi_m_sync_trans+0x80>
		return ERR_NOT_INITIALIZED;
    3a0e:	f06f 0013 	mvn.w	r0, #19
    3a12:	e052      	b.n	3aba <_spi_m_sync_trans+0xee>
	ASSERT(dev && hw);
    3a14:	4618      	mov	r0, r3
    3a16:	e7e9      	b.n	39ec <_spi_m_sync_trans+0x20>
    3a18:	2000      	movs	r0, #0
    3a1a:	e7e7      	b.n	39ec <_spi_m_sync_trans+0x20>
		return false;
    3a1c:	2200      	movs	r2, #0
    3a1e:	e02b      	b.n	3a78 <_spi_m_sync_trans+0xac>
			data |= (*ctrl->txbuf) << 8;
    3a20:	f891 e001 	ldrb.w	lr, [r1, #1]
    3a24:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			ctrl->txbuf++;
    3a28:	3102      	adds	r1, #2
    3a2a:	9101      	str	r1, [sp, #4]
	ctrl->txcnt++;
    3a2c:	3201      	adds	r2, #1
    3a2e:	9203      	str	r2, [sp, #12]
	((Sercom *)hw)->SPI.DATA.reg = data;
    3a30:	62a0      	str	r0, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    3a32:	f013 0f80 	tst.w	r3, #128	; 0x80
    3a36:	d132      	bne.n	3a9e <_spi_m_sync_trans+0xd2>
	return ERR_NONE;
    3a38:	2000      	movs	r0, #0
		if (rc < 0) {
    3a3a:	2800      	cmp	r0, #0
    3a3c:	db37      	blt.n	3aae <_spi_m_sync_trans+0xe2>
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3a3e:	9803      	ldr	r0, [sp, #12]
    3a40:	68ab      	ldr	r3, [r5, #8]
    3a42:	4298      	cmp	r0, r3
    3a44:	d302      	bcc.n	3a4c <_spi_m_sync_trans+0x80>
    3a46:	9a04      	ldr	r2, [sp, #16]
    3a48:	4293      	cmp	r3, r2
    3a4a:	d930      	bls.n	3aae <_spi_m_sync_trans+0xe2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    3a4c:	7e23      	ldrb	r3, [r4, #24]
    3a4e:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3a50:	f013 0f04 	tst.w	r3, #4
    3a54:	d0e2      	beq.n	3a1c <_spi_m_sync_trans+0x50>
	return ((Sercom *)hw)->SPI.DATA.reg;
    3a56:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    3a58:	9a02      	ldr	r2, [sp, #8]
    3a5a:	b14a      	cbz	r2, 3a70 <_spi_m_sync_trans+0xa4>
		*ctrl->rxbuf++ = (uint8_t)data;
    3a5c:	1c50      	adds	r0, r2, #1
    3a5e:	9002      	str	r0, [sp, #8]
    3a60:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    3a62:	2e01      	cmp	r6, #1
    3a64:	d904      	bls.n	3a70 <_spi_m_sync_trans+0xa4>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3a66:	1c90      	adds	r0, r2, #2
    3a68:	9002      	str	r0, [sp, #8]
    3a6a:	f3c1 2107 	ubfx	r1, r1, #8, #8
    3a6e:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    3a70:	9a04      	ldr	r2, [sp, #16]
    3a72:	3201      	adds	r2, #1
    3a74:	9204      	str	r2, [sp, #16]
	return true;
    3a76:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    3a78:	2a00      	cmp	r2, #0
    3a7a:	d1da      	bne.n	3a32 <_spi_m_sync_trans+0x66>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3a7c:	9a03      	ldr	r2, [sp, #12]
    3a7e:	9904      	ldr	r1, [sp, #16]
    3a80:	4291      	cmp	r1, r2
    3a82:	d3d6      	bcc.n	3a32 <_spi_m_sync_trans+0x66>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3a84:	88f8      	ldrh	r0, [r7, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3a86:	f013 0f01 	tst.w	r3, #1
    3a8a:	d0d2      	beq.n	3a32 <_spi_m_sync_trans+0x66>
	if (ctrl->txbuf) {
    3a8c:	9901      	ldr	r1, [sp, #4]
    3a8e:	2900      	cmp	r1, #0
    3a90:	d0cc      	beq.n	3a2c <_spi_m_sync_trans+0x60>
		data = *ctrl->txbuf++;
    3a92:	1c48      	adds	r0, r1, #1
    3a94:	9001      	str	r0, [sp, #4]
    3a96:	7808      	ldrb	r0, [r1, #0]
		if (ctrl->char_size > 1) {
    3a98:	2e01      	cmp	r6, #1
    3a9a:	d8c1      	bhi.n	3a20 <_spi_m_sync_trans+0x54>
    3a9c:	e7c6      	b.n	3a2c <_spi_m_sync_trans+0x60>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3aa2:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3aa4:	2380      	movs	r3, #128	; 0x80
    3aa6:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    3aa8:	f06f 0012 	mvn.w	r0, #18
    3aac:	e7c5      	b.n	3a3a <_spi_m_sync_trans+0x6e>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    3aae:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3ab0:	f013 0f03 	tst.w	r3, #3
    3ab4:	d0fb      	beq.n	3aae <_spi_m_sync_trans+0xe2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3ab6:	2303      	movs	r3, #3
    3ab8:	7623      	strb	r3, [r4, #24]
}
    3aba:	b007      	add	sp, #28
    3abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    3abe:	f06f 0003 	mvn.w	r0, #3
    3ac2:	e7fa      	b.n	3aba <_spi_m_sync_trans+0xee>
    3ac4:	000061d8 	.word	0x000061d8
    3ac8:	0000234d 	.word	0x0000234d

00003acc <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    3acc:	b570      	push	{r4, r5, r6, lr}
    3ace:	4605      	mov	r5, r0
    3ad0:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3ad2:	4608      	mov	r0, r1
    3ad4:	4b52      	ldr	r3, [pc, #328]	; (3c20 <_spi_m_dma_init+0x154>)
    3ad6:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3ad8:	2300      	movs	r3, #0
    3ada:	2b01      	cmp	r3, #1
    3adc:	d80e      	bhi.n	3afc <_spi_m_dma_init+0x30>
		if (sercomspi_regs[i].n == n) {
    3ade:	eb03 1103 	add.w	r1, r3, r3, lsl #4
    3ae2:	4a50      	ldr	r2, [pc, #320]	; (3c24 <_spi_m_dma_init+0x158>)
    3ae4:	440a      	add	r2, r1
    3ae6:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
    3aea:	4290      	cmp	r0, r2
    3aec:	d002      	beq.n	3af4 <_spi_m_dma_init+0x28>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3aee:	3301      	adds	r3, #1
    3af0:	b2db      	uxtb	r3, r3
    3af2:	e7f2      	b.n	3ada <_spi_m_dma_init+0xe>
			return &sercomspi_regs[i];
    3af4:	460e      	mov	r6, r1
    3af6:	4b4c      	ldr	r3, [pc, #304]	; (3c28 <_spi_m_dma_init+0x15c>)
    3af8:	441e      	add	r6, r3
    3afa:	e000      	b.n	3afe <_spi_m_dma_init+0x32>
	return NULL;
    3afc:	2600      	movs	r6, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    3afe:	2d00      	cmp	r5, #0
    3b00:	d071      	beq.n	3be6 <_spi_m_dma_init+0x11a>
    3b02:	2c00      	cmp	r4, #0
    3b04:	d06d      	beq.n	3be2 <_spi_m_dma_init+0x116>
    3b06:	2001      	movs	r0, #1
    3b08:	f640 42b3 	movw	r2, #3251	; 0xcb3
    3b0c:	4947      	ldr	r1, [pc, #284]	; (3c2c <_spi_m_dma_init+0x160>)
    3b0e:	4b48      	ldr	r3, [pc, #288]	; (3c30 <_spi_m_dma_init+0x164>)
    3b10:	4798      	blx	r3

	if (regs == NULL) {
    3b12:	2e00      	cmp	r6, #0
    3b14:	f000 8081 	beq.w	3c1a <_spi_m_dma_init+0x14e>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3b18:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3b1a:	f013 0f01 	tst.w	r3, #1
    3b1e:	d11d      	bne.n	3b5c <_spi_m_dma_init+0x90>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3b20:	6833      	ldr	r3, [r6, #0]
    3b22:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b26:	69e3      	ldr	r3, [r4, #28]
    3b28:	f013 0f03 	tst.w	r3, #3
    3b2c:	d1fb      	bne.n	3b26 <_spi_m_dma_init+0x5a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3b2e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3b30:	f013 0f02 	tst.w	r3, #2
    3b34:	d00b      	beq.n	3b4e <_spi_m_dma_init+0x82>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3b36:	6823      	ldr	r3, [r4, #0]
    3b38:	f023 0302 	bic.w	r3, r3, #2
    3b3c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b3e:	69e3      	ldr	r3, [r4, #28]
    3b40:	f013 0f03 	tst.w	r3, #3
    3b44:	d1fb      	bne.n	3b3e <_spi_m_dma_init+0x72>
    3b46:	69e3      	ldr	r3, [r4, #28]
    3b48:	f013 0f02 	tst.w	r3, #2
    3b4c:	d1fb      	bne.n	3b46 <_spi_m_dma_init+0x7a>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3b4e:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3b52:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b54:	69e3      	ldr	r3, [r4, #28]
    3b56:	f013 0f03 	tst.w	r3, #3
    3b5a:	d1fb      	bne.n	3b54 <_spi_m_dma_init+0x88>
    3b5c:	69e3      	ldr	r3, [r4, #28]
    3b5e:	f013 0f01 	tst.w	r3, #1
    3b62:	d1fb      	bne.n	3b5c <_spi_m_dma_init+0x90>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    3b64:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    3b66:	2c00      	cmp	r4, #0
    3b68:	d041      	beq.n	3bee <_spi_m_dma_init+0x122>
    3b6a:	2e00      	cmp	r6, #0
    3b6c:	d03d      	beq.n	3bea <_spi_m_dma_init+0x11e>
    3b6e:	2001      	movs	r0, #1
    3b70:	f640 120a 	movw	r2, #2314	; 0x90a
    3b74:	492d      	ldr	r1, [pc, #180]	; (3c2c <_spi_m_dma_init+0x160>)
    3b76:	4b2e      	ldr	r3, [pc, #184]	; (3c30 <_spi_m_dma_init+0x164>)
    3b78:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3b7a:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    3b7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    3b80:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3b84:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b86:	69e3      	ldr	r3, [r4, #28]
    3b88:	f013 0f03 	tst.w	r3, #3
    3b8c:	d1fb      	bne.n	3b86 <_spi_m_dma_init+0xba>
	    (regs->ctrlb
    3b8e:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    3b90:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    3b94:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    3b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3b9c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b9e:	69e3      	ldr	r3, [r4, #28]
    3ba0:	f013 0f17 	tst.w	r3, #23
    3ba4:	d1fb      	bne.n	3b9e <_spi_m_dma_init+0xd2>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    3ba6:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3ba8:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3baa:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3bac:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* If enabled, initialize DMA rx channel */
	if (_spi_is_rx_dma_channel_enabled(hw)) {
    3bb0:	4620      	mov	r0, r4
    3bb2:	4b20      	ldr	r3, [pc, #128]	; (3c34 <_spi_m_dma_init+0x168>)
    3bb4:	4798      	blx	r3
    3bb6:	b9e0      	cbnz	r0, 3bf2 <_spi_m_dma_init+0x126>
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
		
	}
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    3bb8:	4620      	mov	r0, r4
    3bba:	4b1f      	ldr	r3, [pc, #124]	; (3c38 <_spi_m_dma_init+0x16c>)
    3bbc:	4798      	blx	r3
    3bbe:	4601      	mov	r1, r0
    3bc0:	f105 001c 	add.w	r0, r5, #28
    3bc4:	4b1d      	ldr	r3, [pc, #116]	; (3c3c <_spi_m_dma_init+0x170>)
    3bc6:	4798      	blx	r3
	dev->resource->back                 = dev;
    3bc8:	69eb      	ldr	r3, [r5, #28]
    3bca:	60dd      	str	r5, [r3, #12]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    3bcc:	69eb      	ldr	r3, [r5, #28]
    3bce:	4a1c      	ldr	r2, [pc, #112]	; (3c40 <_spi_m_dma_init+0x174>)
    3bd0:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    3bd2:	69eb      	ldr	r3, [r5, #28]
    3bd4:	4a1b      	ldr	r2, [pc, #108]	; (3c44 <_spi_m_dma_init+0x178>)
    3bd6:	605a      	str	r2, [r3, #4]
	dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    3bd8:	69eb      	ldr	r3, [r5, #28]
    3bda:	4a1b      	ldr	r2, [pc, #108]	; (3c48 <_spi_m_dma_init+0x17c>)
    3bdc:	609a      	str	r2, [r3, #8]

	return ERR_NONE;
    3bde:	2000      	movs	r0, #0
    3be0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    3be2:	2000      	movs	r0, #0
    3be4:	e790      	b.n	3b08 <_spi_m_dma_init+0x3c>
    3be6:	2000      	movs	r0, #0
    3be8:	e78e      	b.n	3b08 <_spi_m_dma_init+0x3c>
	ASSERT(hw && regs);
    3bea:	2000      	movs	r0, #0
    3bec:	e7c0      	b.n	3b70 <_spi_m_dma_init+0xa4>
    3bee:	2000      	movs	r0, #0
    3bf0:	e7be      	b.n	3b70 <_spi_m_dma_init+0xa4>
		_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    3bf2:	4620      	mov	r0, r4
    3bf4:	4b15      	ldr	r3, [pc, #84]	; (3c4c <_spi_m_dma_init+0x180>)
    3bf6:	4798      	blx	r3
    3bf8:	4601      	mov	r1, r0
    3bfa:	f105 001c 	add.w	r0, r5, #28
    3bfe:	4b0f      	ldr	r3, [pc, #60]	; (3c3c <_spi_m_dma_init+0x170>)
    3c00:	4798      	blx	r3
		dev->resource->back                 = dev;
    3c02:	69eb      	ldr	r3, [r5, #28]
    3c04:	60dd      	str	r5, [r3, #12]
		dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    3c06:	69eb      	ldr	r3, [r5, #28]
    3c08:	4a11      	ldr	r2, [pc, #68]	; (3c50 <_spi_m_dma_init+0x184>)
    3c0a:	601a      	str	r2, [r3, #0]
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
    3c0c:	69eb      	ldr	r3, [r5, #28]
    3c0e:	4a0d      	ldr	r2, [pc, #52]	; (3c44 <_spi_m_dma_init+0x178>)
    3c10:	605a      	str	r2, [r3, #4]
		dev->resource->dma_cb.suspend_done  = _spi_dma_suspend_complete;
    3c12:	69eb      	ldr	r3, [r5, #28]
    3c14:	4a0c      	ldr	r2, [pc, #48]	; (3c48 <_spi_m_dma_init+0x17c>)
    3c16:	609a      	str	r2, [r3, #8]
    3c18:	e7ce      	b.n	3bb8 <_spi_m_dma_init+0xec>
		return ERR_INVALID_ARG;
    3c1a:	f06f 000c 	mvn.w	r0, #12
}
    3c1e:	bd70      	pop	{r4, r5, r6, pc}
    3c20:	00002dc1 	.word	0x00002dc1
    3c24:	00006154 	.word	0x00006154
    3c28:	000061b4 	.word	0x000061b4
    3c2c:	000061d8 	.word	0x000061d8
    3c30:	0000234d 	.word	0x0000234d
    3c34:	00002e89 	.word	0x00002e89
    3c38:	00002e71 	.word	0x00002e71
    3c3c:	00002c1d 	.word	0x00002c1d
    3c40:	00002edd 	.word	0x00002edd
    3c44:	00002ee9 	.word	0x00002ee9
    3c48:	00002ed1 	.word	0x00002ed1
    3c4c:	00002ea1 	.word	0x00002ea1
    3c50:	00002ec5 	.word	0x00002ec5

00003c54 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    3c54:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    3c56:	4604      	mov	r4, r0
    3c58:	b168      	cbz	r0, 3c76 <_spi_m_dma_enable+0x22>
    3c5a:	6803      	ldr	r3, [r0, #0]
    3c5c:	b14b      	cbz	r3, 3c72 <_spi_m_dma_enable+0x1e>
    3c5e:	2001      	movs	r0, #1
    3c60:	f640 42e1 	movw	r2, #3297	; 0xce1
    3c64:	4905      	ldr	r1, [pc, #20]	; (3c7c <_spi_m_dma_enable+0x28>)
    3c66:	4b06      	ldr	r3, [pc, #24]	; (3c80 <_spi_m_dma_enable+0x2c>)
    3c68:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    3c6a:	6820      	ldr	r0, [r4, #0]
    3c6c:	4b05      	ldr	r3, [pc, #20]	; (3c84 <_spi_m_dma_enable+0x30>)
    3c6e:	4798      	blx	r3
}
    3c70:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    3c72:	2000      	movs	r0, #0
    3c74:	e7f4      	b.n	3c60 <_spi_m_dma_enable+0xc>
    3c76:	2000      	movs	r0, #0
    3c78:	e7f2      	b.n	3c60 <_spi_m_dma_enable+0xc>
    3c7a:	bf00      	nop
    3c7c:	000061d8 	.word	0x000061d8
    3c80:	0000234d 	.word	0x0000234d
    3c84:	00002e01 	.word	0x00002e01

00003c88 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    3c88:	b570      	push	{r4, r5, r6, lr}
    3c8a:	4605      	mov	r5, r0
    3c8c:	4614      	mov	r4, r2
	switch (type) {
    3c8e:	2903      	cmp	r1, #3
    3c90:	d835      	bhi.n	3cfe <_spi_m_dma_register_callback+0x76>
    3c92:	e8df f001 	tbb	[pc, r1]
    3c96:	0d02      	.short	0x0d02
    3c98:	182a      	.short	0x182a
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    3c9a:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    3c9c:	6800      	ldr	r0, [r0, #0]
    3c9e:	4b18      	ldr	r3, [pc, #96]	; (3d00 <_spi_m_dma_register_callback+0x78>)
    3ca0:	4798      	blx	r3
    3ca2:	1c22      	adds	r2, r4, #0
    3ca4:	bf18      	it	ne
    3ca6:	2201      	movne	r2, #1
    3ca8:	2100      	movs	r1, #0
    3caa:	4b16      	ldr	r3, [pc, #88]	; (3d04 <_spi_m_dma_register_callback+0x7c>)
    3cac:	4798      	blx	r3
		break;
    3cae:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    3cb0:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    3cb2:	6800      	ldr	r0, [r0, #0]
    3cb4:	4b14      	ldr	r3, [pc, #80]	; (3d08 <_spi_m_dma_register_callback+0x80>)
    3cb6:	4798      	blx	r3
    3cb8:	1c22      	adds	r2, r4, #0
    3cba:	bf18      	it	ne
    3cbc:	2201      	movne	r2, #1
    3cbe:	2100      	movs	r1, #0
    3cc0:	4b10      	ldr	r3, [pc, #64]	; (3d04 <_spi_m_dma_register_callback+0x7c>)
    3cc2:	4798      	blx	r3
		break;
    3cc4:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    3cc6:	612a      	str	r2, [r5, #16]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    3cc8:	6800      	ldr	r0, [r0, #0]
    3cca:	4b0f      	ldr	r3, [pc, #60]	; (3d08 <_spi_m_dma_register_callback+0x80>)
    3ccc:	4798      	blx	r3
    3cce:	3400      	adds	r4, #0
    3cd0:	bf18      	it	ne
    3cd2:	2401      	movne	r4, #1
    3cd4:	4622      	mov	r2, r4
    3cd6:	2101      	movs	r1, #1
    3cd8:	4e0a      	ldr	r6, [pc, #40]	; (3d04 <_spi_m_dma_register_callback+0x7c>)
    3cda:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    3cdc:	6828      	ldr	r0, [r5, #0]
    3cde:	4b08      	ldr	r3, [pc, #32]	; (3d00 <_spi_m_dma_register_callback+0x78>)
    3ce0:	4798      	blx	r3
    3ce2:	4622      	mov	r2, r4
    3ce4:	2101      	movs	r1, #1
    3ce6:	47b0      	blx	r6
		break;
    3ce8:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_SUSPEND:
		dev->callbacks.sus = func;
    3cea:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_SUSPEND_CB, func != NULL);
    3cec:	6800      	ldr	r0, [r0, #0]
    3cee:	4b06      	ldr	r3, [pc, #24]	; (3d08 <_spi_m_dma_register_callback+0x80>)
    3cf0:	4798      	blx	r3
    3cf2:	1c22      	adds	r2, r4, #0
    3cf4:	bf18      	it	ne
    3cf6:	2201      	movne	r2, #1
    3cf8:	2102      	movs	r1, #2
    3cfa:	4b02      	ldr	r3, [pc, #8]	; (3d04 <_spi_m_dma_register_callback+0x7c>)
    3cfc:	4798      	blx	r3
    3cfe:	bd70      	pop	{r4, r5, r6, pc}
    3d00:	00002e71 	.word	0x00002e71
    3d04:	00002ad1 	.word	0x00002ad1
    3d08:	00002ea1 	.word	0x00002ea1

00003d0c <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    3d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d10:	4604      	mov	r4, r0
    3d12:	4688      	mov	r8, r1
    3d14:	4616      	mov	r6, r2
    3d16:	461f      	mov	r7, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    3d18:	6805      	ldr	r5, [r0, #0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3d1a:	4628      	mov	r0, r5
    3d1c:	4b35      	ldr	r3, [pc, #212]	; (3df4 <_spi_m_dma_transfer+0xe8>)
    3d1e:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3d20:	2300      	movs	r3, #0
    3d22:	2b01      	cmp	r3, #1
    3d24:	d80e      	bhi.n	3d44 <_spi_m_dma_transfer+0x38>
		if (sercomspi_regs[i].n == n) {
    3d26:	eb03 1103 	add.w	r1, r3, r3, lsl #4
    3d2a:	4a33      	ldr	r2, [pc, #204]	; (3df8 <_spi_m_dma_transfer+0xec>)
    3d2c:	440a      	add	r2, r1
    3d2e:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
    3d32:	4282      	cmp	r2, r0
    3d34:	d002      	beq.n	3d3c <_spi_m_dma_transfer+0x30>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3d36:	3301      	adds	r3, #1
    3d38:	b2db      	uxtb	r3, r3
    3d3a:	e7f2      	b.n	3d22 <_spi_m_dma_transfer+0x16>
			return &sercomspi_regs[i];
    3d3c:	4b2f      	ldr	r3, [pc, #188]	; (3dfc <_spi_m_dma_transfer+0xf0>)
    3d3e:	eb03 0a01 	add.w	sl, r3, r1
    3d42:	e001      	b.n	3d48 <_spi_m_dma_transfer+0x3c>
	return NULL;
    3d44:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    3d48:	4628      	mov	r0, r5
    3d4a:	4b2d      	ldr	r3, [pc, #180]	; (3e00 <_spi_m_dma_transfer+0xf4>)
    3d4c:	4798      	blx	r3
    3d4e:	4681      	mov	r9, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    3d50:	4628      	mov	r0, r5
    3d52:	4b2c      	ldr	r3, [pc, #176]	; (3e04 <_spi_m_dma_transfer+0xf8>)
    3d54:	4798      	blx	r3
    3d56:	4605      	mov	r5, r0

	if (rxbuf) {
    3d58:	2e00      	cmp	r6, #0
    3d5a:	d032      	beq.n	3dc2 <_spi_m_dma_transfer+0xb6>
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
    3d5c:	4620      	mov	r0, r4
    3d5e:	4b2a      	ldr	r3, [pc, #168]	; (3e08 <_spi_m_dma_transfer+0xfc>)
    3d60:	4798      	blx	r3
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    3d62:	6820      	ldr	r0, [r4, #0]
    3d64:	4b29      	ldr	r3, [pc, #164]	; (3e0c <_spi_m_dma_transfer+0x100>)
    3d66:	4798      	blx	r3
    3d68:	4601      	mov	r1, r0
    3d6a:	4648      	mov	r0, r9
    3d6c:	4b28      	ldr	r3, [pc, #160]	; (3e10 <_spi_m_dma_transfer+0x104>)
    3d6e:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    3d70:	4631      	mov	r1, r6
    3d72:	4648      	mov	r0, r9
    3d74:	4b27      	ldr	r3, [pc, #156]	; (3e14 <_spi_m_dma_transfer+0x108>)
    3d76:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    3d78:	4639      	mov	r1, r7
    3d7a:	4648      	mov	r0, r9
    3d7c:	4b26      	ldr	r3, [pc, #152]	; (3e18 <_spi_m_dma_transfer+0x10c>)
    3d7e:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    3d80:	2100      	movs	r1, #0
    3d82:	4648      	mov	r0, r9
    3d84:	4b25      	ldr	r3, [pc, #148]	; (3e1c <_spi_m_dma_transfer+0x110>)
    3d86:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    3d88:	f1b8 0f00 	cmp.w	r8, #0
    3d8c:	d01d      	beq.n	3dca <_spi_m_dma_transfer+0xbe>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    3d8e:	4641      	mov	r1, r8
    3d90:	4628      	mov	r0, r5
    3d92:	4b1f      	ldr	r3, [pc, #124]	; (3e10 <_spi_m_dma_transfer+0x104>)
    3d94:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    3d96:	6820      	ldr	r0, [r4, #0]
    3d98:	4b21      	ldr	r3, [pc, #132]	; (3e20 <_spi_m_dma_transfer+0x114>)
    3d9a:	4798      	blx	r3
    3d9c:	4601      	mov	r1, r0
    3d9e:	4628      	mov	r0, r5
    3da0:	4b1c      	ldr	r3, [pc, #112]	; (3e14 <_spi_m_dma_transfer+0x108>)
    3da2:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    3da4:	2101      	movs	r1, #1
    3da6:	4628      	mov	r0, r5
    3da8:	4b1e      	ldr	r3, [pc, #120]	; (3e24 <_spi_m_dma_transfer+0x118>)
    3daa:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    3dac:	4639      	mov	r1, r7
    3dae:	4628      	mov	r0, r5
    3db0:	4b19      	ldr	r3, [pc, #100]	; (3e18 <_spi_m_dma_transfer+0x10c>)
    3db2:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    3db4:	2100      	movs	r1, #0
    3db6:	4628      	mov	r0, r5
    3db8:	4b18      	ldr	r3, [pc, #96]	; (3e1c <_spi_m_dma_transfer+0x110>)
    3dba:	4798      	blx	r3

	return ERR_NONE;
}
    3dbc:	2000      	movs	r0, #0
    3dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		_spi_m_dma_rx_disable(dev);
    3dc2:	4620      	mov	r0, r4
    3dc4:	4b18      	ldr	r3, [pc, #96]	; (3e28 <_spi_m_dma_transfer+0x11c>)
    3dc6:	4798      	blx	r3
    3dc8:	e7de      	b.n	3d88 <_spi_m_dma_transfer+0x7c>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    3dca:	f10a 010e 	add.w	r1, sl, #14
    3dce:	4628      	mov	r0, r5
    3dd0:	4b0f      	ldr	r3, [pc, #60]	; (3e10 <_spi_m_dma_transfer+0x104>)
    3dd2:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    3dd4:	6820      	ldr	r0, [r4, #0]
    3dd6:	4b12      	ldr	r3, [pc, #72]	; (3e20 <_spi_m_dma_transfer+0x114>)
    3dd8:	4798      	blx	r3
    3dda:	4601      	mov	r1, r0
    3ddc:	4628      	mov	r0, r5
    3dde:	4b0d      	ldr	r3, [pc, #52]	; (3e14 <_spi_m_dma_transfer+0x108>)
    3de0:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    3de2:	2100      	movs	r1, #0
    3de4:	4628      	mov	r0, r5
    3de6:	4b0f      	ldr	r3, [pc, #60]	; (3e24 <_spi_m_dma_transfer+0x118>)
    3de8:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    3dea:	4639      	mov	r1, r7
    3dec:	4628      	mov	r0, r5
    3dee:	4b0a      	ldr	r3, [pc, #40]	; (3e18 <_spi_m_dma_transfer+0x10c>)
    3df0:	4798      	blx	r3
    3df2:	e7df      	b.n	3db4 <_spi_m_dma_transfer+0xa8>
    3df4:	00002dc1 	.word	0x00002dc1
    3df8:	00006154 	.word	0x00006154
    3dfc:	000061b4 	.word	0x000061b4
    3e00:	00002ea1 	.word	0x00002ea1
    3e04:	00002e71 	.word	0x00002e71
    3e08:	000033e1 	.word	0x000033e1
    3e0c:	00002e67 	.word	0x00002e67
    3e10:	00002b5d 	.word	0x00002b5d
    3e14:	00002b4d 	.word	0x00002b4d
    3e18:	00002b89 	.word	0x00002b89
    3e1c:	00002be1 	.word	0x00002be1
    3e20:	00002e6b 	.word	0x00002e6b
    3e24:	00002b6d 	.word	0x00002b6d
    3e28:	00003415 	.word	0x00003415

00003e2c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3e2c:	4b03      	ldr	r3, [pc, #12]	; (3e3c <_system_time_init+0x10>)
    3e2e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    3e32:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3e34:	2205      	movs	r2, #5
    3e36:	601a      	str	r2, [r3, #0]
    3e38:	4770      	bx	lr
    3e3a:	bf00      	nop
    3e3c:	e000e010 	.word	0xe000e010

00003e40 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    3e40:	b508      	push	{r3, lr}
	_system_time_init(hw);
    3e42:	4b01      	ldr	r3, [pc, #4]	; (3e48 <_delay_init+0x8>)
    3e44:	4798      	blx	r3
    3e46:	bd08      	pop	{r3, pc}
    3e48:	00003e2d 	.word	0x00003e2d

00003e4c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    3e4c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    3e4e:	e00d      	b.n	3e6c <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
    3e50:	4b0d      	ldr	r3, [pc, #52]	; (3e88 <_delay_cycles+0x3c>)
    3e52:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    3e56:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    3e58:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3e5a:	4b0b      	ldr	r3, [pc, #44]	; (3e88 <_delay_cycles+0x3c>)
    3e5c:	681b      	ldr	r3, [r3, #0]
    3e5e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3e62:	d0fa      	beq.n	3e5a <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
    3e64:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    3e68:	3101      	adds	r1, #1
	while (n--) {
    3e6a:	4610      	mov	r0, r2
    3e6c:	1e43      	subs	r3, r0, #1
    3e6e:	b2da      	uxtb	r2, r3
    3e70:	2800      	cmp	r0, #0
    3e72:	d1ed      	bne.n	3e50 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    3e74:	4b04      	ldr	r3, [pc, #16]	; (3e88 <_delay_cycles+0x3c>)
    3e76:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3e78:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3e7a:	4b03      	ldr	r3, [pc, #12]	; (3e88 <_delay_cycles+0x3c>)
    3e7c:	681b      	ldr	r3, [r3, #0]
    3e7e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3e82:	d0fa      	beq.n	3e7a <_delay_cycles+0x2e>
		;
}
    3e84:	4770      	bx	lr
    3e86:	bf00      	nop
    3e88:	e000e010 	.word	0xe000e010

00003e8c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    3e8c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    3e8e:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    3e90:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    3e92:	f012 0f01 	tst.w	r2, #1
    3e96:	d100      	bne.n	3e9a <tc_interrupt_handler+0xe>
    3e98:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    3e9a:	2201      	movs	r2, #1
    3e9c:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    3e9e:	6803      	ldr	r3, [r0, #0]
    3ea0:	4798      	blx	r3
	}
}
    3ea2:	e7f9      	b.n	3e98 <tc_interrupt_handler+0xc>

00003ea4 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    3ea4:	4b03      	ldr	r3, [pc, #12]	; (3eb4 <_tc_init_irq_param+0x10>)
    3ea6:	4298      	cmp	r0, r3
    3ea8:	d000      	beq.n	3eac <_tc_init_irq_param+0x8>
    3eaa:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
    3eac:	4b02      	ldr	r3, [pc, #8]	; (3eb8 <_tc_init_irq_param+0x14>)
    3eae:	6019      	str	r1, [r3, #0]
	}
	if (hw == TC7) {
		_tc7_dev = (struct _pwm_device *)dev;
	}
}
    3eb0:	e7fb      	b.n	3eaa <_tc_init_irq_param+0x6>
    3eb2:	bf00      	nop
    3eb4:	40003800 	.word	0x40003800
    3eb8:	20000458 	.word	0x20000458

00003ebc <get_tc_index>:
{
    3ebc:	b570      	push	{r4, r5, r6, lr}
    3ebe:	b088      	sub	sp, #32
    3ec0:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3ec2:	466c      	mov	r4, sp
    3ec4:	4d17      	ldr	r5, [pc, #92]	; (3f24 <get_tc_index+0x68>)
    3ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3eca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3ece:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3ed2:	2300      	movs	r3, #0
    3ed4:	2b07      	cmp	r3, #7
    3ed6:	d80a      	bhi.n	3eee <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    3ed8:	aa08      	add	r2, sp, #32
    3eda:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    3ede:	f852 2c20 	ldr.w	r2, [r2, #-32]
    3ee2:	42b2      	cmp	r2, r6
    3ee4:	d001      	beq.n	3eea <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3ee6:	3301      	adds	r3, #1
    3ee8:	e7f4      	b.n	3ed4 <get_tc_index+0x18>
			return i;
    3eea:	b2db      	uxtb	r3, r3
    3eec:	e000      	b.n	3ef0 <get_tc_index+0x34>
		}
	}
	return 0;
    3eee:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3ef0:	2200      	movs	r2, #0
    3ef2:	b14a      	cbz	r2, 3f08 <get_tc_index+0x4c>
	ASSERT(false);
    3ef4:	f44f 729f 	mov.w	r2, #318	; 0x13e
    3ef8:	490b      	ldr	r1, [pc, #44]	; (3f28 <get_tc_index+0x6c>)
    3efa:	2000      	movs	r0, #0
    3efc:	4b0b      	ldr	r3, [pc, #44]	; (3f2c <get_tc_index+0x70>)
    3efe:	4798      	blx	r3
	return -1;
    3f00:	f04f 30ff 	mov.w	r0, #4294967295
}
    3f04:	b008      	add	sp, #32
    3f06:	bd70      	pop	{r4, r5, r6, pc}
		if (_tcs[i].number == index) {
    3f08:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    3f0c:	0088      	lsls	r0, r1, #2
    3f0e:	4905      	ldr	r1, [pc, #20]	; (3f24 <get_tc_index+0x68>)
    3f10:	4401      	add	r1, r0
    3f12:	f891 1020 	ldrb.w	r1, [r1, #32]
    3f16:	4299      	cmp	r1, r3
    3f18:	d002      	beq.n	3f20 <get_tc_index+0x64>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3f1a:	3201      	adds	r2, #1
    3f1c:	b2d2      	uxtb	r2, r2
    3f1e:	e7e8      	b.n	3ef2 <get_tc_index+0x36>
			return i;
    3f20:	b250      	sxtb	r0, r2
    3f22:	e7ef      	b.n	3f04 <get_tc_index+0x48>
    3f24:	000061f4 	.word	0x000061f4
    3f28:	00006228 	.word	0x00006228
    3f2c:	0000234d 	.word	0x0000234d

00003f30 <_timer_init>:
{
    3f30:	b570      	push	{r4, r5, r6, lr}
    3f32:	4606      	mov	r6, r0
    3f34:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    3f36:	4608      	mov	r0, r1
    3f38:	4b66      	ldr	r3, [pc, #408]	; (40d4 <_timer_init+0x1a4>)
    3f3a:	4798      	blx	r3
    3f3c:	4605      	mov	r5, r0
	device->hw = hw;
    3f3e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    3f40:	228f      	movs	r2, #143	; 0x8f
    3f42:	4965      	ldr	r1, [pc, #404]	; (40d8 <_timer_init+0x1a8>)
    3f44:	2001      	movs	r0, #1
    3f46:	4b65      	ldr	r3, [pc, #404]	; (40dc <_timer_init+0x1ac>)
    3f48:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3f4a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    3f4c:	f013 0f01 	tst.w	r3, #1
    3f50:	d119      	bne.n	3f86 <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3f52:	6923      	ldr	r3, [r4, #16]
    3f54:	f013 0f03 	tst.w	r3, #3
    3f58:	d1fb      	bne.n	3f52 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3f5a:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    3f5c:	f013 0f02 	tst.w	r3, #2
    3f60:	d00b      	beq.n	3f7a <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3f62:	6823      	ldr	r3, [r4, #0]
    3f64:	f023 0302 	bic.w	r3, r3, #2
    3f68:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3f6a:	6923      	ldr	r3, [r4, #16]
    3f6c:	f013 0f03 	tst.w	r3, #3
    3f70:	d1fb      	bne.n	3f6a <_timer_init+0x3a>
    3f72:	6923      	ldr	r3, [r4, #16]
    3f74:	f013 0f02 	tst.w	r3, #2
    3f78:	d1fb      	bne.n	3f72 <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3f7a:	2301      	movs	r3, #1
    3f7c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3f7e:	6923      	ldr	r3, [r4, #16]
    3f80:	f013 0f03 	tst.w	r3, #3
    3f84:	d1fb      	bne.n	3f7e <_timer_init+0x4e>
    3f86:	6923      	ldr	r3, [r4, #16]
    3f88:	f013 0f01 	tst.w	r3, #1
    3f8c:	d1fb      	bne.n	3f86 <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3f8e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3f92:	009a      	lsls	r2, r3, #2
    3f94:	4b52      	ldr	r3, [pc, #328]	; (40e0 <_timer_init+0x1b0>)
    3f96:	4413      	add	r3, r2
    3f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3f9a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3f9c:	6923      	ldr	r3, [r4, #16]
    3f9e:	f013 0f03 	tst.w	r3, #3
    3fa2:	d1fb      	bne.n	3f9c <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3fa4:	00aa      	lsls	r2, r5, #2
    3fa6:	442a      	add	r2, r5
    3fa8:	0091      	lsls	r1, r2, #2
    3faa:	4b4d      	ldr	r3, [pc, #308]	; (40e0 <_timer_init+0x1b0>)
    3fac:	440b      	add	r3, r1
    3fae:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    3fb2:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3fb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    3fb6:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    3fb8:	2201      	movs	r2, #1
    3fba:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3fbe:	f003 030c 	and.w	r3, r3, #12
    3fc2:	2b08      	cmp	r3, #8
    3fc4:	d056      	beq.n	4074 <_timer_init+0x144>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	d163      	bne.n	4092 <_timer_init+0x162>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3fca:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3fce:	009a      	lsls	r2, r3, #2
    3fd0:	4b43      	ldr	r3, [pc, #268]	; (40e0 <_timer_init+0x1b0>)
    3fd2:	4413      	add	r3, r2
    3fd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3fd6:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3fd8:	6923      	ldr	r3, [r4, #16]
    3fda:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3fde:	d1fb      	bne.n	3fd8 <_timer_init+0xa8>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3fe0:	2300      	movs	r3, #0
    3fe2:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3fe4:	6923      	ldr	r3, [r4, #16]
    3fe6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3fea:	d1fb      	bne.n	3fe4 <_timer_init+0xb4>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    3fec:	2301      	movs	r3, #1
    3fee:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    3ff0:	4631      	mov	r1, r6
    3ff2:	4620      	mov	r0, r4
    3ff4:	4b3b      	ldr	r3, [pc, #236]	; (40e4 <_timer_init+0x1b4>)
    3ff6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    3ff8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3ffc:	009a      	lsls	r2, r3, #2
    3ffe:	4b38      	ldr	r3, [pc, #224]	; (40e0 <_timer_init+0x1b0>)
    4000:	4413      	add	r3, r2
    4002:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    4006:	2b00      	cmp	r3, #0
    4008:	db0d      	blt.n	4026 <_timer_init+0xf6>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    400a:	095a      	lsrs	r2, r3, #5
    400c:	f003 031f 	and.w	r3, r3, #31
    4010:	2101      	movs	r1, #1
    4012:	fa01 f303 	lsl.w	r3, r1, r3
    4016:	3220      	adds	r2, #32
    4018:	4933      	ldr	r1, [pc, #204]	; (40e8 <_timer_init+0x1b8>)
    401a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    401e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4022:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    4026:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    402a:	009a      	lsls	r2, r3, #2
    402c:	4b2c      	ldr	r3, [pc, #176]	; (40e0 <_timer_init+0x1b0>)
    402e:	4413      	add	r3, r2
    4030:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    4034:	2b00      	cmp	r3, #0
    4036:	db09      	blt.n	404c <_timer_init+0x11c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4038:	095a      	lsrs	r2, r3, #5
    403a:	f003 031f 	and.w	r3, r3, #31
    403e:	2101      	movs	r1, #1
    4040:	fa01 f303 	lsl.w	r3, r1, r3
    4044:	3260      	adds	r2, #96	; 0x60
    4046:	4928      	ldr	r1, [pc, #160]	; (40e8 <_timer_init+0x1b8>)
    4048:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    404c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4050:	00aa      	lsls	r2, r5, #2
    4052:	4b23      	ldr	r3, [pc, #140]	; (40e0 <_timer_init+0x1b0>)
    4054:	4413      	add	r3, r2
    4056:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    405a:	2b00      	cmp	r3, #0
    405c:	db08      	blt.n	4070 <_timer_init+0x140>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    405e:	0959      	lsrs	r1, r3, #5
    4060:	f003 031f 	and.w	r3, r3, #31
    4064:	2201      	movs	r2, #1
    4066:	fa02 f303 	lsl.w	r3, r2, r3
    406a:	4a1f      	ldr	r2, [pc, #124]	; (40e8 <_timer_init+0x1b8>)
    406c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    4070:	2000      	movs	r0, #0
    4072:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    4074:	4b1a      	ldr	r3, [pc, #104]	; (40e0 <_timer_init+0x1b0>)
    4076:	440b      	add	r3, r1
    4078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    407a:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    407c:	6923      	ldr	r3, [r4, #16]
    407e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    4082:	d1fb      	bne.n	407c <_timer_init+0x14c>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    4084:	2300      	movs	r3, #0
    4086:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4088:	6923      	ldr	r3, [r4, #16]
    408a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    408e:	d1fb      	bne.n	4088 <_timer_init+0x158>
    4090:	e7ac      	b.n	3fec <_timer_init+0xbc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    4092:	2b04      	cmp	r3, #4
    4094:	d1aa      	bne.n	3fec <_timer_init+0xbc>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    4096:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    409a:	009a      	lsls	r2, r3, #2
    409c:	4b10      	ldr	r3, [pc, #64]	; (40e0 <_timer_init+0x1b0>)
    409e:	4413      	add	r3, r2
    40a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    40a4:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    40a6:	6923      	ldr	r3, [r4, #16]
    40a8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    40ac:	d1fb      	bne.n	40a6 <_timer_init+0x176>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    40ae:	2300      	movs	r3, #0
    40b0:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    40b2:	6923      	ldr	r3, [r4, #16]
    40b4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    40b8:	d1fb      	bne.n	40b2 <_timer_init+0x182>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    40ba:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    40be:	009a      	lsls	r2, r3, #2
    40c0:	4b07      	ldr	r3, [pc, #28]	; (40e0 <_timer_init+0x1b0>)
    40c2:	4413      	add	r3, r2
    40c4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    40c8:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    40ca:	6923      	ldr	r3, [r4, #16]
    40cc:	f013 0f20 	tst.w	r3, #32
    40d0:	d1fb      	bne.n	40ca <_timer_init+0x19a>
    40d2:	e78b      	b.n	3fec <_timer_init+0xbc>
    40d4:	00003ebd 	.word	0x00003ebd
    40d8:	00006228 	.word	0x00006228
    40dc:	0000234d 	.word	0x0000234d
    40e0:	000061f4 	.word	0x000061f4
    40e4:	00003ea5 	.word	0x00003ea5
    40e8:	e000e100 	.word	0xe000e100

000040ec <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    40ec:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    40ee:	6813      	ldr	r3, [r2, #0]
    40f0:	f043 0302 	orr.w	r3, r3, #2
    40f4:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    40f6:	6913      	ldr	r3, [r2, #16]
    40f8:	f013 0f03 	tst.w	r3, #3
    40fc:	d1fb      	bne.n	40f6 <_timer_start+0xa>
}
    40fe:	4770      	bx	lr

00004100 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    4100:	68c2      	ldr	r2, [r0, #12]
    4102:	6913      	ldr	r3, [r2, #16]
    4104:	f013 0f03 	tst.w	r3, #3
    4108:	d1fb      	bne.n	4102 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    410a:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    410c:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    4110:	4770      	bx	lr

00004112 <_tc_get_timer>:
}
    4112:	2000      	movs	r0, #0
    4114:	4770      	bx	lr
	...

00004118 <_timer_set_irq>:
{
    4118:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    411a:	68c0      	ldr	r0, [r0, #12]
    411c:	4b09      	ldr	r3, [pc, #36]	; (4144 <_timer_set_irq+0x2c>)
    411e:	4798      	blx	r3
    4120:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    4122:	f240 1211 	movw	r2, #273	; 0x111
    4126:	4908      	ldr	r1, [pc, #32]	; (4148 <_timer_set_irq+0x30>)
    4128:	2001      	movs	r0, #1
    412a:	4b08      	ldr	r3, [pc, #32]	; (414c <_timer_set_irq+0x34>)
    412c:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    412e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    4132:	00a2      	lsls	r2, r4, #2
    4134:	4b06      	ldr	r3, [pc, #24]	; (4150 <_timer_set_irq+0x38>)
    4136:	4413      	add	r3, r2
    4138:	f893 0022 	ldrb.w	r0, [r3, #34]	; 0x22
    413c:	4b05      	ldr	r3, [pc, #20]	; (4154 <_timer_set_irq+0x3c>)
    413e:	4798      	blx	r3
    4140:	bd10      	pop	{r4, pc}
    4142:	bf00      	nop
    4144:	00003ebd 	.word	0x00003ebd
    4148:	00006228 	.word	0x00006228
    414c:	0000234d 	.word	0x0000234d
    4150:	000061f4 	.word	0x000061f4
    4154:	000028c1 	.word	0x000028c1

00004158 <TC0_Handler>:
{
    4158:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    415a:	4b02      	ldr	r3, [pc, #8]	; (4164 <TC0_Handler+0xc>)
    415c:	6818      	ldr	r0, [r3, #0]
    415e:	4b02      	ldr	r3, [pc, #8]	; (4168 <TC0_Handler+0x10>)
    4160:	4798      	blx	r3
    4162:	bd08      	pop	{r3, pc}
    4164:	20000458 	.word	0x20000458
    4168:	00003e8d 	.word	0x00003e8d

0000416c <TIMER_0_init>:
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    416c:	4b29      	ldr	r3, [pc, #164]	; (4214 <TIMER_0_init+0xa8>)
    416e:	691b      	ldr	r3, [r3, #16]
 * \brief Initialize TC interface
 */
int8_t TIMER_0_init()
{

	if (!hri_tc_is_syncing(TC7, TC_SYNCBUSY_SWRST)) {
    4170:	f013 0f01 	tst.w	r3, #1
    4174:	d120      	bne.n	41b8 <TIMER_0_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4176:	4b27      	ldr	r3, [pc, #156]	; (4214 <TIMER_0_init+0xa8>)
    4178:	691b      	ldr	r3, [r3, #16]
    417a:	f013 0f03 	tst.w	r3, #3
    417e:	d1fa      	bne.n	4176 <TIMER_0_init+0xa>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4180:	4b24      	ldr	r3, [pc, #144]	; (4214 <TIMER_0_init+0xa8>)
    4182:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC7, TC_CTRLA_ENABLE)) {
    4184:	f013 0f02 	tst.w	r3, #2
    4188:	d00e      	beq.n	41a8 <TIMER_0_init+0x3c>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    418a:	4a22      	ldr	r2, [pc, #136]	; (4214 <TIMER_0_init+0xa8>)
    418c:	6813      	ldr	r3, [r2, #0]
    418e:	f023 0302 	bic.w	r3, r3, #2
    4192:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4194:	4b1f      	ldr	r3, [pc, #124]	; (4214 <TIMER_0_init+0xa8>)
    4196:	691b      	ldr	r3, [r3, #16]
    4198:	f013 0f03 	tst.w	r3, #3
    419c:	d1fa      	bne.n	4194 <TIMER_0_init+0x28>
    419e:	4b1d      	ldr	r3, [pc, #116]	; (4214 <TIMER_0_init+0xa8>)
    41a0:	691b      	ldr	r3, [r3, #16]
    41a2:	f013 0f02 	tst.w	r3, #2
    41a6:	d1fa      	bne.n	419e <TIMER_0_init+0x32>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    41a8:	2201      	movs	r2, #1
    41aa:	4b1a      	ldr	r3, [pc, #104]	; (4214 <TIMER_0_init+0xa8>)
    41ac:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    41ae:	4b19      	ldr	r3, [pc, #100]	; (4214 <TIMER_0_init+0xa8>)
    41b0:	691b      	ldr	r3, [r3, #16]
    41b2:	f013 0f03 	tst.w	r3, #3
    41b6:	d1fa      	bne.n	41ae <TIMER_0_init+0x42>
    41b8:	4b16      	ldr	r3, [pc, #88]	; (4214 <TIMER_0_init+0xa8>)
    41ba:	691b      	ldr	r3, [r3, #16]
    41bc:	f013 0f01 	tst.w	r3, #1
    41c0:	d1fa      	bne.n	41b8 <TIMER_0_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    41c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    41c6:	4b13      	ldr	r3, [pc, #76]	; (4214 <TIMER_0_init+0xa8>)
    41c8:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    41ca:	4b12      	ldr	r3, [pc, #72]	; (4214 <TIMER_0_init+0xa8>)
    41cc:	691b      	ldr	r3, [r3, #16]
    41ce:	f013 0f03 	tst.w	r3, #3
    41d2:	d1fa      	bne.n	41ca <TIMER_0_init+0x5e>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    41d4:	4b0f      	ldr	r3, [pc, #60]	; (4214 <TIMER_0_init+0xa8>)
    41d6:	2200      	movs	r2, #0
    41d8:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    41da:	22ff      	movs	r2, #255	; 0xff
    41dc:	711a      	strb	r2, [r3, #4]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    41de:	2201      	movs	r2, #1
    41e0:	731a      	strb	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    41e2:	f641 0269 	movw	r2, #6249	; 0x1869
    41e6:	839a      	strh	r2, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    41e8:	4b0a      	ldr	r3, [pc, #40]	; (4214 <TIMER_0_init+0xa8>)
    41ea:	691b      	ldr	r3, [r3, #16]
    41ec:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    41f0:	d1fa      	bne.n	41e8 <TIMER_0_init+0x7c>
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    41f2:	4b08      	ldr	r3, [pc, #32]	; (4214 <TIMER_0_init+0xa8>)
    41f4:	2201      	movs	r2, #1
    41f6:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    41f8:	22fe      	movs	r2, #254	; 0xfe
    41fa:	721a      	strb	r2, [r3, #8]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    41fc:	681a      	ldr	r2, [r3, #0]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    41fe:	f042 0202 	orr.w	r2, r2, #2
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    4202:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4204:	4b03      	ldr	r3, [pc, #12]	; (4214 <TIMER_0_init+0xa8>)
    4206:	691b      	ldr	r3, [r3, #16]
    4208:	f013 0f03 	tst.w	r3, #3
    420c:	d1fa      	bne.n	4204 <TIMER_0_init+0x98>
	                           | 1 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC7, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    420e:	2000      	movs	r0, #0
    4210:	4770      	bx	lr
    4212:	bf00      	nop
    4214:	43001800 	.word	0x43001800

00004218 <TIMER_1_counter>:
	}
}

static void TIMER_1_counter(const struct timer_task *const timer_task)
{
	counter=counter+1;	
    4218:	4a07      	ldr	r2, [pc, #28]	; (4238 <TIMER_1_counter+0x20>)
    421a:	7813      	ldrb	r3, [r2, #0]
    421c:	3301      	adds	r3, #1
    421e:	b2db      	uxtb	r3, r3
    4220:	7013      	strb	r3, [r2, #0]
	if(counter>100){
    4222:	2b64      	cmp	r3, #100	; 0x64
    4224:	d902      	bls.n	422c <TIMER_1_counter+0x14>
			counter=1;			
    4226:	2201      	movs	r2, #1
    4228:	4b03      	ldr	r3, [pc, #12]	; (4238 <TIMER_1_counter+0x20>)
    422a:	701a      	strb	r2, [r3, #0]
	};
	*mu_controller__status=counter;
    422c:	4b03      	ldr	r3, [pc, #12]	; (423c <TIMER_1_counter+0x24>)
    422e:	681b      	ldr	r3, [r3, #0]
    4230:	4a01      	ldr	r2, [pc, #4]	; (4238 <TIMER_1_counter+0x20>)
    4232:	7812      	ldrb	r2, [r2, #0]
    4234:	701a      	strb	r2, [r3, #0]
    4236:	4770      	bx	lr
    4238:	2000045c 	.word	0x2000045c
    423c:	20000074 	.word	0x20000074

00004240 <TIMER_1_read_sensor>:
{
    4240:	b538      	push	{r3, r4, r5, lr}
	switch (*sensor__status){
    4242:	4b39      	ldr	r3, [pc, #228]	; (4328 <TIMER_1_read_sensor+0xe8>)
    4244:	685b      	ldr	r3, [r3, #4]
    4246:	781b      	ldrb	r3, [r3, #0]
    4248:	b2db      	uxtb	r3, r3
    424a:	2b10      	cmp	r3, #16
    424c:	d02d      	beq.n	42aa <TIMER_1_read_sensor+0x6a>
    424e:	d909      	bls.n	4264 <TIMER_1_read_sensor+0x24>
    4250:	2b84      	cmp	r3, #132	; 0x84
    4252:	d04a      	beq.n	42ea <TIMER_1_read_sensor+0xaa>
    4254:	d822      	bhi.n	429c <TIMER_1_read_sensor+0x5c>
    4256:	2b81      	cmp	r3, #129	; 0x81
    4258:	d05d      	beq.n	4316 <TIMER_1_read_sensor+0xd6>
    425a:	2b82      	cmp	r3, #130	; 0x82
    425c:	d15e      	bne.n	431c <TIMER_1_read_sensor+0xdc>
			readHall_USART();
    425e:	4b33      	ldr	r3, [pc, #204]	; (432c <TIMER_1_read_sensor+0xec>)
    4260:	4798      	blx	r3
			break;
    4262:	bd38      	pop	{r3, r4, r5, pc}
	switch (*sensor__status){
    4264:	2b02      	cmp	r3, #2
    4266:	d043      	beq.n	42f0 <TIMER_1_read_sensor+0xb0>
    4268:	d90a      	bls.n	4280 <TIMER_1_read_sensor+0x40>
    426a:	2b04      	cmp	r3, #4
    426c:	d027      	beq.n	42be <TIMER_1_read_sensor+0x7e>
    426e:	2b08      	cmp	r3, #8
    4270:	d154      	bne.n	431c <TIMER_1_read_sensor+0xdc>
			*piezoelectric_sensor__value = readPE();
    4272:	4b2d      	ldr	r3, [pc, #180]	; (4328 <TIMER_1_read_sensor+0xe8>)
    4274:	68dc      	ldr	r4, [r3, #12]
    4276:	4b2e      	ldr	r3, [pc, #184]	; (4330 <TIMER_1_read_sensor+0xf0>)
    4278:	4798      	blx	r3
    427a:	b280      	uxth	r0, r0
    427c:	8020      	strh	r0, [r4, #0]
			break;
    427e:	bd38      	pop	{r3, r4, r5, pc}
	switch (*sensor__status){
    4280:	2b01      	cmp	r3, #1
    4282:	d14b      	bne.n	431c <TIMER_1_read_sensor+0xdc>
			*barometer_sensor__value = readBaro();
    4284:	4c28      	ldr	r4, [pc, #160]	; (4328 <TIMER_1_read_sensor+0xe8>)
    4286:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    4288:	4b2a      	ldr	r3, [pc, #168]	; (4334 <TIMER_1_read_sensor+0xf4>)
    428a:	4798      	blx	r3
    428c:	b280      	uxth	r0, r0
    428e:	8028      	strh	r0, [r5, #0]
			*barometer_temp__value = getBaroTemp();
    4290:	6b24      	ldr	r4, [r4, #48]	; 0x30
    4292:	4b29      	ldr	r3, [pc, #164]	; (4338 <TIMER_1_read_sensor+0xf8>)
    4294:	4798      	blx	r3
    4296:	b280      	uxth	r0, r0
    4298:	8020      	strh	r0, [r4, #0]
			break;
    429a:	bd38      	pop	{r3, r4, r5, pc}
	switch (*sensor__status){
    429c:	2b88      	cmp	r3, #136	; 0x88
    429e:	d00b      	beq.n	42b8 <TIMER_1_read_sensor+0x78>
    42a0:	2b90      	cmp	r3, #144	; 0x90
    42a2:	d13b      	bne.n	431c <TIMER_1_read_sensor+0xdc>
			readPR_USART();
    42a4:	4b25      	ldr	r3, [pc, #148]	; (433c <TIMER_1_read_sensor+0xfc>)
    42a6:	4798      	blx	r3
			break;
    42a8:	bd38      	pop	{r3, r4, r5, pc}
			*resistive_sensor__value	= readPR();
    42aa:	4b1f      	ldr	r3, [pc, #124]	; (4328 <TIMER_1_read_sensor+0xe8>)
    42ac:	689c      	ldr	r4, [r3, #8]
    42ae:	4b24      	ldr	r3, [pc, #144]	; (4340 <TIMER_1_read_sensor+0x100>)
    42b0:	4798      	blx	r3
    42b2:	b280      	uxth	r0, r0
    42b4:	8020      	strh	r0, [r4, #0]
			break;
    42b6:	bd38      	pop	{r3, r4, r5, pc}
			readPE_USART();
    42b8:	4b22      	ldr	r3, [pc, #136]	; (4344 <TIMER_1_read_sensor+0x104>)
    42ba:	4798      	blx	r3
			break;
    42bc:	bd38      	pop	{r3, r4, r5, pc}
			*capacitive_sensor__x_p = readCap_xp();
    42be:	4c1a      	ldr	r4, [pc, #104]	; (4328 <TIMER_1_read_sensor+0xe8>)
    42c0:	6925      	ldr	r5, [r4, #16]
    42c2:	4b21      	ldr	r3, [pc, #132]	; (4348 <TIMER_1_read_sensor+0x108>)
    42c4:	4798      	blx	r3
    42c6:	b280      	uxth	r0, r0
    42c8:	8028      	strh	r0, [r5, #0]
			*capacitive_sensor__x_n = readCap_xn();
    42ca:	6965      	ldr	r5, [r4, #20]
    42cc:	4b1f      	ldr	r3, [pc, #124]	; (434c <TIMER_1_read_sensor+0x10c>)
    42ce:	4798      	blx	r3
    42d0:	b280      	uxth	r0, r0
    42d2:	8028      	strh	r0, [r5, #0]
			*capacitive_sensor__y_p = readCap_yp();
    42d4:	69a5      	ldr	r5, [r4, #24]
    42d6:	4b1e      	ldr	r3, [pc, #120]	; (4350 <TIMER_1_read_sensor+0x110>)
    42d8:	4798      	blx	r3
    42da:	b280      	uxth	r0, r0
    42dc:	8028      	strh	r0, [r5, #0]
			*capacitive_sensor__y_n = readCap_yn();
    42de:	69e4      	ldr	r4, [r4, #28]
    42e0:	4b1c      	ldr	r3, [pc, #112]	; (4354 <TIMER_1_read_sensor+0x114>)
    42e2:	4798      	blx	r3
    42e4:	b280      	uxth	r0, r0
    42e6:	8020      	strh	r0, [r4, #0]
			break;
    42e8:	bd38      	pop	{r3, r4, r5, pc}
			readCap_USART();
    42ea:	4b1b      	ldr	r3, [pc, #108]	; (4358 <TIMER_1_read_sensor+0x118>)
    42ec:	4798      	blx	r3
			break;
    42ee:	bd38      	pop	{r3, r4, r5, pc}
			readHall();
    42f0:	4b1a      	ldr	r3, [pc, #104]	; (435c <TIMER_1_read_sensor+0x11c>)
    42f2:	4798      	blx	r3
			*hall_sensor__x	= getHall_x();
    42f4:	4c0c      	ldr	r4, [pc, #48]	; (4328 <TIMER_1_read_sensor+0xe8>)
    42f6:	6a25      	ldr	r5, [r4, #32]
    42f8:	4b19      	ldr	r3, [pc, #100]	; (4360 <TIMER_1_read_sensor+0x120>)
    42fa:	4798      	blx	r3
    42fc:	b280      	uxth	r0, r0
    42fe:	8028      	strh	r0, [r5, #0]
			*hall_sensor__y	= getHall_y();
    4300:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4302:	4b18      	ldr	r3, [pc, #96]	; (4364 <TIMER_1_read_sensor+0x124>)
    4304:	4798      	blx	r3
    4306:	b280      	uxth	r0, r0
    4308:	8028      	strh	r0, [r5, #0]
			*hall_sensor__z	= getHall_z();
    430a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    430c:	4b16      	ldr	r3, [pc, #88]	; (4368 <TIMER_1_read_sensor+0x128>)
    430e:	4798      	blx	r3
    4310:	b280      	uxth	r0, r0
    4312:	8020      	strh	r0, [r4, #0]
			break;
    4314:	bd38      	pop	{r3, r4, r5, pc}
			readBaro_USART();
    4316:	4b15      	ldr	r3, [pc, #84]	; (436c <TIMER_1_read_sensor+0x12c>)
    4318:	4798      	blx	r3
			break;
    431a:	bd38      	pop	{r3, r4, r5, pc}
			*mu_controller__status = 0xF;
    431c:	4b02      	ldr	r3, [pc, #8]	; (4328 <TIMER_1_read_sensor+0xe8>)
    431e:	681b      	ldr	r3, [r3, #0]
    4320:	220f      	movs	r2, #15
    4322:	701a      	strb	r2, [r3, #0]
    4324:	bd38      	pop	{r3, r4, r5, pc}
    4326:	bf00      	nop
    4328:	20000074 	.word	0x20000074
    432c:	00005095 	.word	0x00005095
    4330:	00004c8d 	.word	0x00004c8d
    4334:	0000469d 	.word	0x0000469d
    4338:	00004691 	.word	0x00004691
    433c:	00004da1 	.word	0x00004da1
    4340:	00004d5d 	.word	0x00004d5d
    4344:	00004cc9 	.word	0x00004cc9
    4348:	00004bcd 	.word	0x00004bcd
    434c:	00004c21 	.word	0x00004c21
    4350:	00004c2d 	.word	0x00004c2d
    4354:	00004c81 	.word	0x00004c81
    4358:	00004a51 	.word	0x00004a51
    435c:	0000519d 	.word	0x0000519d
    4360:	00005261 	.word	0x00005261
    4364:	0000526d 	.word	0x0000526d
    4368:	00005255 	.word	0x00005255
    436c:	00004759 	.word	0x00004759

00004370 <USART_EDBG_init>:
}

void USART_EDBG_init(void)
{
    4370:	b510      	push	{r4, lr}
	usart_sync_get_io_descriptor(&USART_0, &USART_io);
    4372:	4c04      	ldr	r4, [pc, #16]	; (4384 <USART_EDBG_init+0x14>)
    4374:	4904      	ldr	r1, [pc, #16]	; (4388 <USART_EDBG_init+0x18>)
    4376:	4620      	mov	r0, r4
    4378:	4b04      	ldr	r3, [pc, #16]	; (438c <USART_EDBG_init+0x1c>)
    437a:	4798      	blx	r3
	usart_sync_enable(&USART_0);
    437c:	4620      	mov	r0, r4
    437e:	4b04      	ldr	r3, [pc, #16]	; (4390 <USART_EDBG_init+0x20>)
    4380:	4798      	blx	r3
    4382:	bd10      	pop	{r4, pc}
    4384:	200005b0 	.word	0x200005b0
    4388:	20000b90 	.word	0x20000b90
    438c:	00002321 	.word	0x00002321
    4390:	000022f5 	.word	0x000022f5

00004394 <TIMER_1ms_init>:
}


void TIMER_1ms_init(void)
{
    4394:	b570      	push	{r4, r5, r6, lr}
	TIMER_task1.interval = 2;
    4396:	4c0d      	ldr	r4, [pc, #52]	; (43cc <TIMER_1ms_init+0x38>)
    4398:	2302      	movs	r3, #2
    439a:	60e3      	str	r3, [r4, #12]
	TIMER_task1.cb       = TIMER_1_read_sensor;
    439c:	4b0c      	ldr	r3, [pc, #48]	; (43d0 <TIMER_1ms_init+0x3c>)
    439e:	6123      	str	r3, [r4, #16]
	TIMER_task1.mode     = TIMER_TASK_REPEAT; //TIMER_TASK_ONE_SHOT;
    43a0:	2301      	movs	r3, #1
    43a2:	7523      	strb	r3, [r4, #20]

	TIMER_task2.interval = 10;
    43a4:	220a      	movs	r2, #10
    43a6:	6222      	str	r2, [r4, #32]
	TIMER_task2.cb       = TIMER_1_counter;
    43a8:	4a0a      	ldr	r2, [pc, #40]	; (43d4 <TIMER_1ms_init+0x40>)
    43aa:	6262      	str	r2, [r4, #36]	; 0x24
	TIMER_task2.mode     = TIMER_TASK_REPEAT; //TIMER_TASK_ONE_SHOT;
    43ac:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

	timer_add_task(&TIMER_1, &TIMER_task1);
    43b0:	4d09      	ldr	r5, [pc, #36]	; (43d8 <TIMER_1ms_init+0x44>)
    43b2:	1d21      	adds	r1, r4, #4
    43b4:	4628      	mov	r0, r5
    43b6:	4e09      	ldr	r6, [pc, #36]	; (43dc <TIMER_1ms_init+0x48>)
    43b8:	47b0      	blx	r6
	timer_add_task(&TIMER_1, &TIMER_task2);
    43ba:	f104 0118 	add.w	r1, r4, #24
    43be:	4628      	mov	r0, r5
    43c0:	47b0      	blx	r6
	timer_start(&TIMER_1);
    43c2:	4628      	mov	r0, r5
    43c4:	4b06      	ldr	r3, [pc, #24]	; (43e0 <TIMER_1ms_init+0x4c>)
    43c6:	4798      	blx	r3
    43c8:	bd70      	pop	{r4, r5, r6, pc}
    43ca:	bf00      	nop
    43cc:	2000045c 	.word	0x2000045c
    43d0:	00004241 	.word	0x00004241
    43d4:	00004219 	.word	0x00004219
    43d8:	20000564 	.word	0x20000564
    43dc:	00002131 	.word	0x00002131
    43e0:	000020f5 	.word	0x000020f5

000043e4 <main>:
}

int main(void)
{
    43e4:	b508      	push	{r3, lr}
	/* Initialize
	 MCU, drivers and middleware */
	*sensor__status=0b10000010; //INITIALIZE FOR (USART_en,free,free,res,PE,cap,hall,baro)
    43e6:	4c23      	ldr	r4, [pc, #140]	; (4474 <main+0x90>)
    43e8:	6863      	ldr	r3, [r4, #4]
    43ea:	2282      	movs	r2, #130	; 0x82
    43ec:	701a      	strb	r2, [r3, #0]
	
	atmel_start_init();
    43ee:	4b22      	ldr	r3, [pc, #136]	; (4478 <main+0x94>)
    43f0:	4798      	blx	r3
	usart_en = *sensor__status >>7;
    43f2:	6863      	ldr	r3, [r4, #4]
    43f4:	781b      	ldrb	r3, [r3, #0]
    43f6:	09db      	lsrs	r3, r3, #7
    43f8:	4a20      	ldr	r2, [pc, #128]	; (447c <main+0x98>)
    43fa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
	if (usart_en == 0x01){
    43fe:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
    4402:	b2db      	uxtb	r3, r3
    4404:	2b01      	cmp	r3, #1
    4406:	d012      	beq.n	442e <main+0x4a>
		USART_EDBG_init();
	}
	else{
		configure_ethercat_dma_descriptors();
    4408:	4b1d      	ldr	r3, [pc, #116]	; (4480 <main+0x9c>)
    440a:	4798      	blx	r3
	}
	switch (*sensor__status){
    440c:	4b19      	ldr	r3, [pc, #100]	; (4474 <main+0x90>)
    440e:	685b      	ldr	r3, [r3, #4]
    4410:	781b      	ldrb	r3, [r3, #0]
    4412:	b2db      	uxtb	r3, r3
    4414:	2b10      	cmp	r3, #16
    4416:	d022      	beq.n	445e <main+0x7a>
    4418:	d90c      	bls.n	4434 <main+0x50>
    441a:	2b84      	cmp	r3, #132	; 0x84
    441c:	d024      	beq.n	4468 <main+0x84>
    441e:	d81a      	bhi.n	4456 <main+0x72>
    4420:	2b81      	cmp	r3, #129	; 0x81
    4422:	d024      	beq.n	446e <main+0x8a>
    4424:	2b82      	cmp	r3, #130	; 0x82
    4426:	d10a      	bne.n	443e <main+0x5a>
		case 0b10000100:
			initCap();
			break;
		case 0b00000010: //hall
		case 0b10000010:
			initHall();
    4428:	4b16      	ldr	r3, [pc, #88]	; (4484 <main+0xa0>)
    442a:	4798      	blx	r3
		break;
    442c:	e019      	b.n	4462 <main+0x7e>
		USART_EDBG_init();
    442e:	4b16      	ldr	r3, [pc, #88]	; (4488 <main+0xa4>)
    4430:	4798      	blx	r3
    4432:	e7eb      	b.n	440c <main+0x28>
	switch (*sensor__status){
    4434:	2b02      	cmp	r3, #2
    4436:	d0f7      	beq.n	4428 <main+0x44>
    4438:	d806      	bhi.n	4448 <main+0x64>
    443a:	2b01      	cmp	r3, #1
    443c:	d017      	beq.n	446e <main+0x8a>
		case 0b00000001: //Baro
		case 0b10000001:
		initBaro();
		break;
		default:
		  *mu_controller__status = 0xF;
    443e:	4b0d      	ldr	r3, [pc, #52]	; (4474 <main+0x90>)
    4440:	681b      	ldr	r3, [r3, #0]
    4442:	220f      	movs	r2, #15
    4444:	701a      	strb	r2, [r3, #0]
		  break;
    4446:	e00c      	b.n	4462 <main+0x7e>
	switch (*sensor__status){
    4448:	2b04      	cmp	r3, #4
    444a:	d00d      	beq.n	4468 <main+0x84>
    444c:	2b08      	cmp	r3, #8
    444e:	d1f6      	bne.n	443e <main+0x5a>
		  InitPE();
    4450:	4b0e      	ldr	r3, [pc, #56]	; (448c <main+0xa8>)
    4452:	4798      	blx	r3
		  break;
    4454:	e005      	b.n	4462 <main+0x7e>
	switch (*sensor__status){
    4456:	2b88      	cmp	r3, #136	; 0x88
    4458:	d0fa      	beq.n	4450 <main+0x6c>
    445a:	2b90      	cmp	r3, #144	; 0x90
    445c:	d1ef      	bne.n	443e <main+0x5a>
		  InitPR();
    445e:	4b0c      	ldr	r3, [pc, #48]	; (4490 <main+0xac>)
    4460:	4798      	blx	r3
	}
	
	TIMER_1ms_init();
    4462:	4b0c      	ldr	r3, [pc, #48]	; (4494 <main+0xb0>)
    4464:	4798      	blx	r3
    4466:	e7fe      	b.n	4466 <main+0x82>
			initCap();
    4468:	4b0b      	ldr	r3, [pc, #44]	; (4498 <main+0xb4>)
    446a:	4798      	blx	r3
			break;
    446c:	e7f9      	b.n	4462 <main+0x7e>
		initBaro();
    446e:	4b0b      	ldr	r3, [pc, #44]	; (449c <main+0xb8>)
    4470:	4798      	blx	r3
		break;
    4472:	e7f6      	b.n	4462 <main+0x7e>
    4474:	20000074 	.word	0x20000074
    4478:	000002d1 	.word	0x000002d1
    447c:	2000045c 	.word	0x2000045c
    4480:	0000163d 	.word	0x0000163d
    4484:	00004e69 	.word	0x00004e69
    4488:	00004371 	.word	0x00004371
    448c:	00004dfd 	.word	0x00004dfd
    4490:	00004d51 	.word	0x00004d51
    4494:	00004395 	.word	0x00004395
    4498:	00004851 	.word	0x00004851
    449c:	00004539 	.word	0x00004539

000044a0 <convert_cb_ADC>:
	io_write(USART_io, &Data_Streamer_buf_2, 4);
}


static void convert_cb_ADC(const struct adc_async_descriptor *const descr, const uint8_t channel)
{
    44a0:	4770      	bx	lr
	...

000044a4 <bar_reg_write>:
{
    44a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44a8:	b082      	sub	sp, #8
    44aa:	9200      	str	r2, [sp, #0]
    44ac:	4698      	mov	r8, r3
    44ae:	ab02      	add	r3, sp, #8
    44b0:	f803 1d01 	strb.w	r1, [r3, #-1]!
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    44b4:	4c0a      	ldr	r4, [pc, #40]	; (44e0 <bar_reg_write+0x3c>)
    44b6:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    44ba:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&reg_addr,1);
    44be:	4f09      	ldr	r7, [pc, #36]	; (44e4 <bar_reg_write+0x40>)
    44c0:	2201      	movs	r2, #1
    44c2:	4619      	mov	r1, r3
    44c4:	6838      	ldr	r0, [r7, #0]
    44c6:	4e08      	ldr	r6, [pc, #32]	; (44e8 <bar_reg_write+0x44>)
    44c8:	47b0      	blx	r6
	io_write(SPI_io,&reg_data,length);
    44ca:	4642      	mov	r2, r8
    44cc:	4669      	mov	r1, sp
    44ce:	6838      	ldr	r0, [r7, #0]
    44d0:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    44d2:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
}
    44d6:	2000      	movs	r0, #0
    44d8:	b002      	add	sp, #8
    44da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44de:	bf00      	nop
    44e0:	41008000 	.word	0x41008000
    44e4:	20000c10 	.word	0x20000c10
    44e8:	00001d25 	.word	0x00001d25

000044ec <bar_reg_read>:
{
    44ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44f0:	b082      	sub	sp, #8
    44f2:	4617      	mov	r7, r2
    44f4:	4698      	mov	r8, r3
    44f6:	ab02      	add	r3, sp, #8
    44f8:	f803 1d01 	strb.w	r1, [r3, #-1]!
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    44fc:	4c0a      	ldr	r4, [pc, #40]	; (4528 <bar_reg_read+0x3c>)
    44fe:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    4502:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&reg_addr,1);
    4506:	4e09      	ldr	r6, [pc, #36]	; (452c <bar_reg_read+0x40>)
    4508:	2201      	movs	r2, #1
    450a:	4619      	mov	r1, r3
    450c:	6830      	ldr	r0, [r6, #0]
    450e:	4b08      	ldr	r3, [pc, #32]	; (4530 <bar_reg_read+0x44>)
    4510:	4798      	blx	r3
	io_read(SPI_io,reg_data,length);
    4512:	4642      	mov	r2, r8
    4514:	4639      	mov	r1, r7
    4516:	6830      	ldr	r0, [r6, #0]
    4518:	4b06      	ldr	r3, [pc, #24]	; (4534 <bar_reg_read+0x48>)
    451a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    451c:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
}
    4520:	2000      	movs	r0, #0
    4522:	b002      	add	sp, #8
    4524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4528:	41008000 	.word	0x41008000
    452c:	20000c10 	.word	0x20000c10
    4530:	00001d25 	.word	0x00001d25
    4534:	00001d59 	.word	0x00001d59

00004538 <initBaro>:
{
    4538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	spi_m_sync_get_io_descriptor(&SPI_1, &SPI_io);
    453c:	4e42      	ldr	r6, [pc, #264]	; (4648 <initBaro+0x110>)
    453e:	4c43      	ldr	r4, [pc, #268]	; (464c <initBaro+0x114>)
    4540:	4631      	mov	r1, r6
    4542:	4620      	mov	r0, r4
    4544:	4b42      	ldr	r3, [pc, #264]	; (4650 <initBaro+0x118>)
    4546:	4798      	blx	r3
	spi_m_sync_enable(&SPI_1);
    4548:	4620      	mov	r0, r4
    454a:	4b42      	ldr	r3, [pc, #264]	; (4654 <initBaro+0x11c>)
    454c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    454e:	4c42      	ldr	r4, [pc, #264]	; (4658 <initBaro+0x120>)
    4550:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    4554:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&bar_read_chip_id,1);
    4558:	f8df a124 	ldr.w	sl, [pc, #292]	; 4680 <initBaro+0x148>
    455c:	2201      	movs	r2, #1
    455e:	4651      	mov	r1, sl
    4560:	6830      	ldr	r0, [r6, #0]
    4562:	f8df 8120 	ldr.w	r8, [pc, #288]	; 4684 <initBaro+0x14c>
    4566:	47c0      	blx	r8
	io_read(SPI_io,&buffer_Read_reg,1);
    4568:	2201      	movs	r2, #1
    456a:	493c      	ldr	r1, [pc, #240]	; (465c <initBaro+0x124>)
    456c:	6830      	ldr	r0, [r6, #0]
    456e:	4b3c      	ldr	r3, [pc, #240]	; (4660 <initBaro+0x128>)
    4570:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4572:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	chipID = buffer_Read_reg[0];
    4576:	4b39      	ldr	r3, [pc, #228]	; (465c <initBaro+0x124>)
    4578:	781b      	ldrb	r3, [r3, #0]
    457a:	4a38      	ldr	r2, [pc, #224]	; (465c <initBaro+0x124>)
    457c:	70d3      	strb	r3, [r2, #3]
	bmp.dev_id = TS_SPI_SS_1;
    457e:	4f39      	ldr	r7, [pc, #228]	; (4664 <initBaro+0x12c>)
    4580:	234e      	movs	r3, #78	; 0x4e
    4582:	707b      	strb	r3, [r7, #1]
	bmp.read = bar_reg_read;
    4584:	4b38      	ldr	r3, [pc, #224]	; (4668 <initBaro+0x130>)
    4586:	607b      	str	r3, [r7, #4]
	bmp.write = bar_reg_write;
    4588:	4b38      	ldr	r3, [pc, #224]	; (466c <initBaro+0x134>)
    458a:	60bb      	str	r3, [r7, #8]
	bmp.intf = BMP280_SPI_INTF;
    458c:	f04f 0300 	mov.w	r3, #0
    4590:	70bb      	strb	r3, [r7, #2]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4592:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
    io_write(SPI_io,&bar_reset,2);
    4596:	2202      	movs	r2, #2
    4598:	f10a 0104 	add.w	r1, sl, #4
    459c:	6830      	ldr	r0, [r6, #0]
    459e:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    45a0:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    bmp.delay_ms = delay_ms;
    45a4:	4b32      	ldr	r3, [pc, #200]	; (4670 <initBaro+0x138>)
    45a6:	60fb      	str	r3, [r7, #12]
    rslt = bmp280_init(&bmp);
    45a8:	4638      	mov	r0, r7
    45aa:	4b32      	ldr	r3, [pc, #200]	; (4674 <initBaro+0x13c>)
    45ac:	4798      	blx	r3
    45ae:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 4688 <initBaro+0x150>
    45b2:	f88b 0000 	strb.w	r0, [fp]
    rslt = bmp280_get_config(&conf, &bmp);
    45b6:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 468c <initBaro+0x154>
    45ba:	4639      	mov	r1, r7
    45bc:	4648      	mov	r0, r9
    45be:	4b2e      	ldr	r3, [pc, #184]	; (4678 <initBaro+0x140>)
    45c0:	4798      	blx	r3
    45c2:	f88b 0000 	strb.w	r0, [fp]
    conf.filter = BMP280_FILTER_OFF;
    45c6:	f04f 0300 	mov.w	r3, #0
    45ca:	f889 3003 	strb.w	r3, [r9, #3]
    conf.os_temp = BMP280_OS_16X;
    45ce:	2305      	movs	r3, #5
    45d0:	f889 3000 	strb.w	r3, [r9]
    conf.os_pres = BMP280_OS_16X;
    45d4:	f889 3001 	strb.w	r3, [r9, #1]
    conf.odr = BMP280_ODR_1000_MS;
    45d8:	f889 3002 	strb.w	r3, [r9, #2]
    rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
    45dc:	4639      	mov	r1, r7
    45de:	2003      	movs	r0, #3
    45e0:	4b26      	ldr	r3, [pc, #152]	; (467c <initBaro+0x144>)
    45e2:	4798      	blx	r3
    45e4:	f88b 0000 	strb.w	r0, [fp]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    45e8:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	       io_write(SPI_io,&bar_reset,2);
    45ec:	2202      	movs	r2, #2
    45ee:	f10a 0104 	add.w	r1, sl, #4
    45f2:	6830      	ldr	r0, [r6, #0]
    45f4:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    45f6:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    45fa:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	       io_write(SPI_io,&bar_read_ctrl_meas,1);
    45fe:	f10a 0706 	add.w	r7, sl, #6
    4602:	2201      	movs	r2, #1
    4604:	4639      	mov	r1, r7
    4606:	6830      	ldr	r0, [r6, #0]
    4608:	47c0      	blx	r8
	       io_read(SPI_io,&buffer_Read_reg,1);
    460a:	2201      	movs	r2, #1
    460c:	4913      	ldr	r1, [pc, #76]	; (465c <initBaro+0x124>)
    460e:	6830      	ldr	r0, [r6, #0]
    4610:	4b13      	ldr	r3, [pc, #76]	; (4660 <initBaro+0x128>)
    4612:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4614:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4618:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
       	io_write(SPI_io,&bar_write_ctrl_meas,2);
    461c:	2202      	movs	r2, #2
    461e:	f10a 0108 	add.w	r1, sl, #8
    4622:	6830      	ldr	r0, [r6, #0]
    4624:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4626:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    462a:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
       	io_write(SPI_io,&bar_read_ctrl_meas,1);
    462e:	2201      	movs	r2, #1
    4630:	4639      	mov	r1, r7
    4632:	6830      	ldr	r0, [r6, #0]
    4634:	47c0      	blx	r8
       	io_read(SPI_io,&buffer_Read_reg,1);
    4636:	2201      	movs	r2, #1
    4638:	4908      	ldr	r1, [pc, #32]	; (465c <initBaro+0x124>)
    463a:	6830      	ldr	r0, [r6, #0]
    463c:	4b08      	ldr	r3, [pc, #32]	; (4660 <initBaro+0x128>)
    463e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4640:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    4644:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4648:	20000c10 	.word	0x20000c10
    464c:	20000508 	.word	0x20000508
    4650:	00001fd1 	.word	0x00001fd1
    4654:	00001eed 	.word	0x00001eed
    4658:	41008000 	.word	0x41008000
    465c:	20000494 	.word	0x20000494
    4660:	00001d59 	.word	0x00001d59
    4664:	20000ba8 	.word	0x20000ba8
    4668:	000044ed 	.word	0x000044ed
    466c:	000044a5 	.word	0x000044a5
    4670:	00001bf1 	.word	0x00001bf1
    4674:	00000669 	.word	0x00000669
    4678:	000006e9 	.word	0x000006e9
    467c:	0000075d 	.word	0x0000075d
    4680:	20000124 	.word	0x20000124
    4684:	00001d25 	.word	0x00001d25
    4688:	20000bdc 	.word	0x20000bdc
    468c:	20000ba0 	.word	0x20000ba0

00004690 <getBaroTemp>:
}
    4690:	4b01      	ldr	r3, [pc, #4]	; (4698 <getBaroTemp+0x8>)
    4692:	8818      	ldrh	r0, [r3, #0]
    4694:	4770      	bx	lr
    4696:	bf00      	nop
    4698:	20000c0c 	.word	0x20000c0c

0000469c <readBaro>:
{
    469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
    46a0:	4e1e      	ldr	r6, [pc, #120]	; (471c <readBaro+0x80>)
    46a2:	4d1f      	ldr	r5, [pc, #124]	; (4720 <readBaro+0x84>)
    46a4:	4631      	mov	r1, r6
    46a6:	4628      	mov	r0, r5
    46a8:	4b1e      	ldr	r3, [pc, #120]	; (4724 <readBaro+0x88>)
    46aa:	4798      	blx	r3
    46ac:	4c1e      	ldr	r4, [pc, #120]	; (4728 <readBaro+0x8c>)
    46ae:	7020      	strb	r0, [r4, #0]
rslt = bmp280_get_comp_pres_32bit(&pres32, ucomp_data.uncomp_press, &bmp);
    46b0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 4754 <readBaro+0xb8>
    46b4:	4632      	mov	r2, r6
    46b6:	6869      	ldr	r1, [r5, #4]
    46b8:	4640      	mov	r0, r8
    46ba:	4b1c      	ldr	r3, [pc, #112]	; (472c <readBaro+0x90>)
    46bc:	4798      	blx	r3
    46be:	7020      	strb	r0, [r4, #0]
rslt = bmp280_get_comp_pres_64bit(&pres64, ucomp_data.uncomp_press, &bmp);
    46c0:	4632      	mov	r2, r6
    46c2:	6869      	ldr	r1, [r5, #4]
    46c4:	481a      	ldr	r0, [pc, #104]	; (4730 <readBaro+0x94>)
    46c6:	4b1b      	ldr	r3, [pc, #108]	; (4734 <readBaro+0x98>)
    46c8:	4798      	blx	r3
    46ca:	7020      	strb	r0, [r4, #0]
rslt = bmp280_get_comp_pres_double(&pres, ucomp_data.uncomp_press, &bmp);
    46cc:	4632      	mov	r2, r6
    46ce:	6869      	ldr	r1, [r5, #4]
    46d0:	4819      	ldr	r0, [pc, #100]	; (4738 <readBaro+0x9c>)
    46d2:	4b1a      	ldr	r3, [pc, #104]	; (473c <readBaro+0xa0>)
    46d4:	4798      	blx	r3
    46d6:	7020      	strb	r0, [r4, #0]
rslt = bmp280_get_comp_temp_32bit(&temp32, ucomp_data.uncomp_temp, &bmp);
    46d8:	4f19      	ldr	r7, [pc, #100]	; (4740 <readBaro+0xa4>)
    46da:	4632      	mov	r2, r6
    46dc:	6829      	ldr	r1, [r5, #0]
    46de:	4638      	mov	r0, r7
    46e0:	4b18      	ldr	r3, [pc, #96]	; (4744 <readBaro+0xa8>)
    46e2:	4798      	blx	r3
    46e4:	7020      	strb	r0, [r4, #0]
bar_pressure[0] = (pres32 & 0x000000ff);
    46e6:	f8d8 0000 	ldr.w	r0, [r8]
    46ea:	4b17      	ldr	r3, [pc, #92]	; (4748 <readBaro+0xac>)
    46ec:	7018      	strb	r0, [r3, #0]
bar_pressure[1] = (pres32 & 0x0000ff00) >> 8;
    46ee:	0a02      	lsrs	r2, r0, #8
    46f0:	705a      	strb	r2, [r3, #1]
bar_pressure[2] = (pres32 & 0x00ff0000) >> 16;
    46f2:	0c02      	lsrs	r2, r0, #16
    46f4:	709a      	strb	r2, [r3, #2]
bar_pressure[3] = (pres32 & 0xff000000) >> 24;
    46f6:	0e02      	lsrs	r2, r0, #24
    46f8:	70da      	strb	r2, [r3, #3]
bar_temperature[0] = (temp32 & 0x000000ff);
    46fa:	683b      	ldr	r3, [r7, #0]
    46fc:	4a13      	ldr	r2, [pc, #76]	; (474c <readBaro+0xb0>)
    46fe:	7013      	strb	r3, [r2, #0]
bar_temperature[1] = (temp32 & 0x0000ff00) >> 8;
    4700:	1219      	asrs	r1, r3, #8
    4702:	7051      	strb	r1, [r2, #1]
bar_temperature[2] = (temp32 & 0x00ff0000) >> 16;
    4704:	1419      	asrs	r1, r3, #16
    4706:	7091      	strb	r1, [r2, #2]
bar_temperature[3] = (temp32 & 0xff000000) >> 24;
    4708:	0e1b      	lsrs	r3, r3, #24
    470a:	70d3      	strb	r3, [r2, #3]
return (uint16_t*)pres32+bar_shift;
    470c:	4b10      	ldr	r3, [pc, #64]	; (4750 <readBaro+0xb4>)
    470e:	895b      	ldrh	r3, [r3, #10]
    4710:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
    4714:	b280      	uxth	r0, r0
    4716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    471a:	bf00      	nop
    471c:	20000ba8 	.word	0x20000ba8
    4720:	20000c00 	.word	0x20000c00
    4724:	00000789 	.word	0x00000789
    4728:	20000bdc 	.word	0x20000bdc
    472c:	0000089d 	.word	0x0000089d
    4730:	20000c08 	.word	0x20000c08
    4734:	000009f5 	.word	0x000009f5
    4738:	20000b98 	.word	0x20000b98
    473c:	00000c51 	.word	0x00000c51
    4740:	20000c0c 	.word	0x20000c0c
    4744:	00000809 	.word	0x00000809
    4748:	20000be4 	.word	0x20000be4
    474c:	20000be0 	.word	0x20000be0
    4750:	20000124 	.word	0x20000124
    4754:	20000be8 	.word	0x20000be8

00004758 <readBaro_USART>:
{
    4758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
    475c:	4e2b      	ldr	r6, [pc, #172]	; (480c <readBaro_USART+0xb4>)
    475e:	4d2c      	ldr	r5, [pc, #176]	; (4810 <readBaro_USART+0xb8>)
    4760:	4631      	mov	r1, r6
    4762:	4628      	mov	r0, r5
    4764:	4b2b      	ldr	r3, [pc, #172]	; (4814 <readBaro_USART+0xbc>)
    4766:	4798      	blx	r3
    4768:	4c2b      	ldr	r4, [pc, #172]	; (4818 <readBaro_USART+0xc0>)
    476a:	7020      	strb	r0, [r4, #0]
	rslt = bmp280_get_comp_pres_32bit(&pres32, ucomp_data.uncomp_press, &bmp);
    476c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 484c <readBaro_USART+0xf4>
    4770:	4632      	mov	r2, r6
    4772:	6869      	ldr	r1, [r5, #4]
    4774:	4640      	mov	r0, r8
    4776:	4b29      	ldr	r3, [pc, #164]	; (481c <readBaro_USART+0xc4>)
    4778:	4798      	blx	r3
    477a:	7020      	strb	r0, [r4, #0]
	rslt = bmp280_get_comp_pres_64bit(&pres64, ucomp_data.uncomp_press, &bmp);
    477c:	4632      	mov	r2, r6
    477e:	6869      	ldr	r1, [r5, #4]
    4780:	4827      	ldr	r0, [pc, #156]	; (4820 <readBaro_USART+0xc8>)
    4782:	4b28      	ldr	r3, [pc, #160]	; (4824 <readBaro_USART+0xcc>)
    4784:	4798      	blx	r3
    4786:	7020      	strb	r0, [r4, #0]
	rslt = bmp280_get_comp_pres_double(&pres, ucomp_data.uncomp_press, &bmp);
    4788:	4632      	mov	r2, r6
    478a:	6869      	ldr	r1, [r5, #4]
    478c:	4826      	ldr	r0, [pc, #152]	; (4828 <readBaro_USART+0xd0>)
    478e:	4b27      	ldr	r3, [pc, #156]	; (482c <readBaro_USART+0xd4>)
    4790:	4798      	blx	r3
    4792:	7020      	strb	r0, [r4, #0]
	rslt = bmp280_get_comp_temp_32bit(&temp32, ucomp_data.uncomp_temp, &bmp);
    4794:	4f26      	ldr	r7, [pc, #152]	; (4830 <readBaro_USART+0xd8>)
    4796:	4632      	mov	r2, r6
    4798:	6829      	ldr	r1, [r5, #0]
    479a:	4638      	mov	r0, r7
    479c:	4b25      	ldr	r3, [pc, #148]	; (4834 <readBaro_USART+0xdc>)
    479e:	4798      	blx	r3
    47a0:	7020      	strb	r0, [r4, #0]
	pres32 = pres32+bar_shift;
    47a2:	4925      	ldr	r1, [pc, #148]	; (4838 <readBaro_USART+0xe0>)
    47a4:	894b      	ldrh	r3, [r1, #10]
    47a6:	f8d8 2000 	ldr.w	r2, [r8]
    47aa:	4413      	add	r3, r2
    47ac:	f8c8 3000 	str.w	r3, [r8]
	bar_pressure[0] = (pres32 & 0x000000ff);
    47b0:	fa5f f883 	uxtb.w	r8, r3
    47b4:	4a21      	ldr	r2, [pc, #132]	; (483c <readBaro_USART+0xe4>)
    47b6:	f882 8000 	strb.w	r8, [r2]
	bar_pressure[1] = (pres32 & 0x0000ff00) >> 8;
    47ba:	f3c3 2c07 	ubfx	ip, r3, #8, #8
    47be:	f882 c001 	strb.w	ip, [r2, #1]
	bar_pressure[2] = (pres32 & 0x00ff0000) >> 16;
    47c2:	f3c3 4e07 	ubfx	lr, r3, #16, #8
    47c6:	f882 e002 	strb.w	lr, [r2, #2]
	bar_pressure[3] = (pres32 & 0xff000000) >> 24;
    47ca:	0e1b      	lsrs	r3, r3, #24
    47cc:	70d3      	strb	r3, [r2, #3]
	bar_temperature[0] = (temp32 & 0x000000ff);
    47ce:	683a      	ldr	r2, [r7, #0]
    47d0:	b2d6      	uxtb	r6, r2
    47d2:	481b      	ldr	r0, [pc, #108]	; (4840 <readBaro_USART+0xe8>)
    47d4:	7006      	strb	r6, [r0, #0]
	bar_temperature[1] = (temp32 & 0x0000ff00) >> 8;
    47d6:	f3c2 2507 	ubfx	r5, r2, #8, #8
    47da:	7045      	strb	r5, [r0, #1]
	bar_temperature[2] = (temp32 & 0x00ff0000) >> 16;
    47dc:	f3c2 4407 	ubfx	r4, r2, #16, #8
    47e0:	7084      	strb	r4, [r0, #2]
	bar_temperature[3] = (temp32 & 0xff000000) >> 24;
    47e2:	0e12      	lsrs	r2, r2, #24
    47e4:	70c2      	strb	r2, [r0, #3]
	Data_Streamer_buf_8[1] = bar_pressure[0];
    47e6:	f881 800d 	strb.w	r8, [r1, #13]
	Data_Streamer_buf_8[2] = bar_pressure[1];
    47ea:	f881 c00e 	strb.w	ip, [r1, #14]
	Data_Streamer_buf_8[3] = bar_pressure[2];
    47ee:	f881 e00f 	strb.w	lr, [r1, #15]
	Data_Streamer_buf_8[4] = bar_pressure[3];
    47f2:	740b      	strb	r3, [r1, #16]
	Data_Streamer_buf_8[5] = bar_temperature[0];
    47f4:	744e      	strb	r6, [r1, #17]
	Data_Streamer_buf_8[6] = bar_temperature[1];
    47f6:	748d      	strb	r5, [r1, #18]
	Data_Streamer_buf_8[7] = bar_temperature[2];
    47f8:	74cc      	strb	r4, [r1, #19]
	Data_Streamer_buf_8[8] = bar_temperature[3];
    47fa:	750a      	strb	r2, [r1, #20]
	io_write(USART_io,&Data_Streamer_buf_8,10);
    47fc:	220a      	movs	r2, #10
    47fe:	310c      	adds	r1, #12
    4800:	4b10      	ldr	r3, [pc, #64]	; (4844 <readBaro_USART+0xec>)
    4802:	6818      	ldr	r0, [r3, #0]
    4804:	4b10      	ldr	r3, [pc, #64]	; (4848 <readBaro_USART+0xf0>)
    4806:	4798      	blx	r3
    4808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    480c:	20000ba8 	.word	0x20000ba8
    4810:	20000c00 	.word	0x20000c00
    4814:	00000789 	.word	0x00000789
    4818:	20000bdc 	.word	0x20000bdc
    481c:	0000089d 	.word	0x0000089d
    4820:	20000c08 	.word	0x20000c08
    4824:	000009f5 	.word	0x000009f5
    4828:	20000b98 	.word	0x20000b98
    482c:	00000c51 	.word	0x00000c51
    4830:	20000c0c 	.word	0x20000c0c
    4834:	00000809 	.word	0x00000809
    4838:	20000124 	.word	0x20000124
    483c:	20000be4 	.word	0x20000be4
    4840:	20000be0 	.word	0x20000be0
    4844:	20000b90 	.word	0x20000b90
    4848:	00001d25 	.word	0x00001d25
    484c:	20000be8 	.word	0x20000be8

00004850 <initCap>:
{
    4850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	spi_m_sync_get_io_descriptor(&SPI_1, &SPI_io);
    4854:	4e75      	ldr	r6, [pc, #468]	; (4a2c <initCap+0x1dc>)
    4856:	4c76      	ldr	r4, [pc, #472]	; (4a30 <initCap+0x1e0>)
    4858:	4631      	mov	r1, r6
    485a:	4620      	mov	r0, r4
    485c:	4b75      	ldr	r3, [pc, #468]	; (4a34 <initCap+0x1e4>)
    485e:	4798      	blx	r3
	spi_m_sync_enable(&SPI_1);
    4860:	4620      	mov	r0, r4
    4862:	4b75      	ldr	r3, [pc, #468]	; (4a38 <initCap+0x1e8>)
    4864:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4866:	4c75      	ldr	r4, [pc, #468]	; (4a3c <initCap+0x1ec>)
    4868:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    486c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S0CONF0,4);
    4870:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 4a44 <initCap+0x1f4>
    4874:	2204      	movs	r2, #4
    4876:	f108 0118 	add.w	r1, r8, #24
    487a:	6830      	ldr	r0, [r6, #0]
    487c:	4f70      	ldr	r7, [pc, #448]	; (4a40 <initCap+0x1f0>)
    487e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4880:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4884:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_read_S0CONF0,2);
    4888:	2202      	movs	r2, #2
    488a:	f108 011c 	add.w	r1, r8, #28
    488e:	6830      	ldr	r0, [r6, #0]
    4890:	47b8      	blx	r7
	io_read(SPI_io,&buffer,2);
    4892:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 4a48 <initCap+0x1f8>
    4896:	2202      	movs	r2, #2
    4898:	4651      	mov	r1, sl
    489a:	6830      	ldr	r0, [r6, #0]
    489c:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 4a4c <initCap+0x1fc>
    48a0:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    48a2:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    48a6:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S0CONF1,4);
    48aa:	2204      	movs	r2, #4
    48ac:	f108 0120 	add.w	r1, r8, #32
    48b0:	6830      	ldr	r0, [r6, #0]
    48b2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    48b4:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    48b8:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_read_S0CONF1,2);
    48bc:	2202      	movs	r2, #2
    48be:	f108 0124 	add.w	r1, r8, #36	; 0x24
    48c2:	6830      	ldr	r0, [r6, #0]
    48c4:	47b8      	blx	r7
	io_read(SPI_io,&buffer,2);
    48c6:	2202      	movs	r2, #2
    48c8:	4651      	mov	r1, sl
    48ca:	6830      	ldr	r0, [r6, #0]
    48cc:	47c8      	blx	r9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    48ce:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    48d2:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S0CONF2,4);
    48d6:	2204      	movs	r2, #4
    48d8:	f108 0128 	add.w	r1, r8, #40	; 0x28
    48dc:	6830      	ldr	r0, [r6, #0]
    48de:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    48e0:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    48e4:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S0CONF3,4);
    48e8:	f108 092c 	add.w	r9, r8, #44	; 0x2c
    48ec:	2204      	movs	r2, #4
    48ee:	4649      	mov	r1, r9
    48f0:	6830      	ldr	r0, [r6, #0]
    48f2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    48f4:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    48f8:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S1CONF0,4);
    48fc:	2204      	movs	r2, #4
    48fe:	f108 0130 	add.w	r1, r8, #48	; 0x30
    4902:	6830      	ldr	r0, [r6, #0]
    4904:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4906:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    490a:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S1CONF1,4);
    490e:	2204      	movs	r2, #4
    4910:	f108 0134 	add.w	r1, r8, #52	; 0x34
    4914:	6830      	ldr	r0, [r6, #0]
    4916:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4918:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    491c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S2CONF2,4);
    4920:	f108 0a38 	add.w	sl, r8, #56	; 0x38
    4924:	2204      	movs	r2, #4
    4926:	4651      	mov	r1, sl
    4928:	6830      	ldr	r0, [r6, #0]
    492a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    492c:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4930:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S1CONF3,4);
    4934:	2204      	movs	r2, #4
    4936:	f108 013c 	add.w	r1, r8, #60	; 0x3c
    493a:	6830      	ldr	r0, [r6, #0]
    493c:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    493e:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4942:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S2CONF0,4);
    4946:	2204      	movs	r2, #4
    4948:	f108 0140 	add.w	r1, r8, #64	; 0x40
    494c:	6830      	ldr	r0, [r6, #0]
    494e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4950:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4954:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S2CONF1,4);
    4958:	2204      	movs	r2, #4
    495a:	f108 0144 	add.w	r1, r8, #68	; 0x44
    495e:	6830      	ldr	r0, [r6, #0]
    4960:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4962:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4966:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S2CONF2,4);
    496a:	2204      	movs	r2, #4
    496c:	4651      	mov	r1, sl
    496e:	6830      	ldr	r0, [r6, #0]
    4970:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4972:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4976:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S2CONF3,4);
    497a:	2204      	movs	r2, #4
    497c:	f108 0148 	add.w	r1, r8, #72	; 0x48
    4980:	6830      	ldr	r0, [r6, #0]
    4982:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4984:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4988:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S3CONF0,4);
    498c:	2204      	movs	r2, #4
    498e:	f108 014c 	add.w	r1, r8, #76	; 0x4c
    4992:	6830      	ldr	r0, [r6, #0]
    4994:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4996:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    499a:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S3CONF1,4);
    499e:	2204      	movs	r2, #4
    49a0:	f108 0150 	add.w	r1, r8, #80	; 0x50
    49a4:	6830      	ldr	r0, [r6, #0]
    49a6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    49a8:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    49ac:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S3CONF2,4);
    49b0:	2204      	movs	r2, #4
    49b2:	f108 0154 	add.w	r1, r8, #84	; 0x54
    49b6:	6830      	ldr	r0, [r6, #0]
    49b8:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    49ba:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    49be:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_S0CONF3,4);
    49c2:	2204      	movs	r2, #4
    49c4:	4649      	mov	r1, r9
    49c6:	6830      	ldr	r0, [r6, #0]
    49c8:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    49ca:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    49ce:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_SETUPCONTR,4);
    49d2:	2204      	movs	r2, #4
    49d4:	f108 0158 	add.w	r1, r8, #88	; 0x58
    49d8:	6830      	ldr	r0, [r6, #0]
    49da:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    49dc:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    49e0:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_CALNSET0,4);
    49e4:	2204      	movs	r2, #4
    49e6:	f108 015c 	add.w	r1, r8, #92	; 0x5c
    49ea:	6830      	ldr	r0, [r6, #0]
    49ec:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    49ee:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    49f2:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_CALNSET1,4);
    49f6:	2204      	movs	r2, #4
    49f8:	f108 0160 	add.w	r1, r8, #96	; 0x60
    49fc:	6830      	ldr	r0, [r6, #0]
    49fe:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4a00:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4a04:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_CALNSET2,4);
    4a08:	2204      	movs	r2, #4
    4a0a:	f108 0164 	add.w	r1, r8, #100	; 0x64
    4a0e:	6830      	ldr	r0, [r6, #0]
    4a10:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4a12:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4a16:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
	io_write(SPI_io,&spi_write_CALNSET3,4);
    4a1a:	2204      	movs	r2, #4
    4a1c:	f108 0168 	add.w	r1, r8, #104	; 0x68
    4a20:	6830      	ldr	r0, [r6, #0]
    4a22:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4a24:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
    4a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4a2c:	20000c10 	.word	0x20000c10
    4a30:	20000508 	.word	0x20000508
    4a34:	00001fd1 	.word	0x00001fd1
    4a38:	00001eed 	.word	0x00001eed
    4a3c:	41008000 	.word	0x41008000
    4a40:	00001d25 	.word	0x00001d25
    4a44:	20000124 	.word	0x20000124
    4a48:	20000bf8 	.word	0x20000bf8
    4a4c:	00001d59 	.word	0x00001d59

00004a50 <readCap_USART>:
{
    4a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4a54:	4f54      	ldr	r7, [pc, #336]	; (4ba8 <readCap_USART+0x158>)
    4a56:	f44f 4880 	mov.w	r8, #16384	; 0x4000
    4a5a:	f8c7 8114 	str.w	r8, [r7, #276]	; 0x114
	io_write(SPI_io,&spi_read_S1CONF0,2);
    4a5e:	4e53      	ldr	r6, [pc, #332]	; (4bac <readCap_USART+0x15c>)
    4a60:	f8df 915c 	ldr.w	r9, [pc, #348]	; 4bc0 <readCap_USART+0x170>
    4a64:	2202      	movs	r2, #2
    4a66:	f106 016c 	add.w	r1, r6, #108	; 0x6c
    4a6a:	f8d9 0000 	ldr.w	r0, [r9]
    4a6e:	f8df a154 	ldr.w	sl, [pc, #340]	; 4bc4 <readCap_USART+0x174>
    4a72:	47d0      	blx	sl
	io_read(SPI_io,&buffer,2);
    4a74:	4d4e      	ldr	r5, [pc, #312]	; (4bb0 <readCap_USART+0x160>)
    4a76:	2202      	movs	r2, #2
    4a78:	4629      	mov	r1, r5
    4a7a:	f8d9 0000 	ldr.w	r0, [r9]
    4a7e:	f8df b148 	ldr.w	fp, [pc, #328]	; 4bc8 <readCap_USART+0x178>
    4a82:	47d8      	blx	fp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4a84:	f8c7 8118 	str.w	r8, [r7, #280]	; 0x118
	reg81[0] = buffer[0];
    4a88:	782b      	ldrb	r3, [r5, #0]
    4a8a:	4c4a      	ldr	r4, [pc, #296]	; (4bb4 <readCap_USART+0x164>)
    4a8c:	7123      	strb	r3, [r4, #4]
	reg81[1] = buffer[1];
    4a8e:	786b      	ldrb	r3, [r5, #1]
    4a90:	7163      	strb	r3, [r4, #5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4a92:	f8c7 8114 	str.w	r8, [r7, #276]	; 0x114
	io_write(SPI_io,&spi_read_S0CONF1,2);
    4a96:	2202      	movs	r2, #2
    4a98:	f106 0124 	add.w	r1, r6, #36	; 0x24
    4a9c:	f8d9 0000 	ldr.w	r0, [r9]
    4aa0:	47d0      	blx	sl
	io_read(SPI_io,&buffer,2);
    4aa2:	2202      	movs	r2, #2
    4aa4:	4629      	mov	r1, r5
    4aa6:	f8d9 0000 	ldr.w	r0, [r9]
    4aaa:	47d8      	blx	fp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4aac:	f8c7 8118 	str.w	r8, [r7, #280]	; 0x118
	reg81[0] = buffer[0];
    4ab0:	782b      	ldrb	r3, [r5, #0]
    4ab2:	7123      	strb	r3, [r4, #4]
	reg81[1] = buffer[1];
    4ab4:	786b      	ldrb	r3, [r5, #1]
    4ab6:	7163      	strb	r3, [r4, #5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4ab8:	f8c7 8114 	str.w	r8, [r7, #276]	; 0x114
	io_write(SPI_io,&spi_read_S0_data,2);
    4abc:	2202      	movs	r2, #2
    4abe:	f106 0170 	add.w	r1, r6, #112	; 0x70
    4ac2:	f8d9 0000 	ldr.w	r0, [r9]
    4ac6:	47d0      	blx	sl
	io_read(SPI_io,&buffer,2);
    4ac8:	2202      	movs	r2, #2
    4aca:	4629      	mov	r1, r5
    4acc:	f8d9 0000 	ldr.w	r0, [r9]
    4ad0:	47d8      	blx	fp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4ad2:	f8c7 8118 	str.w	r8, [r7, #280]	; 0x118
	S0_conv[0] = buffer[0];
    4ad6:	782b      	ldrb	r3, [r5, #0]
    4ad8:	7223      	strb	r3, [r4, #8]
	S0_conv[1] = buffer[1];
    4ada:	786a      	ldrb	r2, [r5, #1]
    4adc:	7262      	strb	r2, [r4, #9]
	x_n =((uint16_t)buffer[1]) << 8 | ((uint16_t)buffer[0]);
    4ade:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4ae2:	8163      	strh	r3, [r4, #10]
	delay_ms(5);
    4ae4:	2005      	movs	r0, #5
    4ae6:	4b34      	ldr	r3, [pc, #208]	; (4bb8 <readCap_USART+0x168>)
    4ae8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4aea:	f8c7 8114 	str.w	r8, [r7, #276]	; 0x114
	io_write(SPI_io,&spi_read_S1_data,2);
    4aee:	2202      	movs	r2, #2
    4af0:	f106 0174 	add.w	r1, r6, #116	; 0x74
    4af4:	f8d9 0000 	ldr.w	r0, [r9]
    4af8:	47d0      	blx	sl
	io_read(SPI_io,&buffer,2);
    4afa:	2202      	movs	r2, #2
    4afc:	4629      	mov	r1, r5
    4afe:	f8d9 0000 	ldr.w	r0, [r9]
    4b02:	47d8      	blx	fp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4b04:	f8c7 8118 	str.w	r8, [r7, #280]	; 0x118
	S1_conv[0] = buffer[0];
    4b08:	782b      	ldrb	r3, [r5, #0]
    4b0a:	7323      	strb	r3, [r4, #12]
	S1_conv[1] = buffer[1];	
    4b0c:	786a      	ldrb	r2, [r5, #1]
    4b0e:	7362      	strb	r2, [r4, #13]
	x_p =((uint16_t)buffer[1]) << 8 | ((uint16_t)buffer[0]);
    4b10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4b14:	81e3      	strh	r3, [r4, #14]
	delay_ms(5);
    4b16:	2005      	movs	r0, #5
    4b18:	4b27      	ldr	r3, [pc, #156]	; (4bb8 <readCap_USART+0x168>)
    4b1a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4b1c:	f8c7 8114 	str.w	r8, [r7, #276]	; 0x114
	io_write(SPI_io,&spi_read_S2_data,2);
    4b20:	2202      	movs	r2, #2
    4b22:	f106 0178 	add.w	r1, r6, #120	; 0x78
    4b26:	f8d9 0000 	ldr.w	r0, [r9]
    4b2a:	47d0      	blx	sl
	io_read(SPI_io,&buffer,2);
    4b2c:	2202      	movs	r2, #2
    4b2e:	4629      	mov	r1, r5
    4b30:	f8d9 0000 	ldr.w	r0, [r9]
    4b34:	47d8      	blx	fp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4b36:	f8c7 8118 	str.w	r8, [r7, #280]	; 0x118
	S2_conv[0] = buffer[0];
    4b3a:	782b      	ldrb	r3, [r5, #0]
    4b3c:	7423      	strb	r3, [r4, #16]
	S2_conv[1] = buffer[1];
    4b3e:	786a      	ldrb	r2, [r5, #1]
    4b40:	7462      	strb	r2, [r4, #17]
	y_n =((uint16_t)buffer[1]) << 8 | ((uint16_t)buffer[0]);
    4b42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4b46:	8263      	strh	r3, [r4, #18]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4b48:	f8c7 8114 	str.w	r8, [r7, #276]	; 0x114
	io_write(SPI_io,&spi_read_S3_data,2);
    4b4c:	2202      	movs	r2, #2
    4b4e:	f106 017c 	add.w	r1, r6, #124	; 0x7c
    4b52:	f8d9 0000 	ldr.w	r0, [r9]
    4b56:	47d0      	blx	sl
	io_read(SPI_io,&buffer,2);
    4b58:	2202      	movs	r2, #2
    4b5a:	4629      	mov	r1, r5
    4b5c:	f8d9 0000 	ldr.w	r0, [r9]
    4b60:	47d8      	blx	fp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4b62:	f8c7 8118 	str.w	r8, [r7, #280]	; 0x118
	delay_ms(5);
    4b66:	2005      	movs	r0, #5
    4b68:	4b13      	ldr	r3, [pc, #76]	; (4bb8 <readCap_USART+0x168>)
    4b6a:	4798      	blx	r3
	S3_conv[0] = buffer[0];
    4b6c:	782b      	ldrb	r3, [r5, #0]
    4b6e:	7523      	strb	r3, [r4, #20]
	S3_conv[1] = buffer[1];
    4b70:	786a      	ldrb	r2, [r5, #1]
    4b72:	7562      	strb	r2, [r4, #21]
	y_p =((uint16_t)buffer[1]) << 8 | ((uint16_t)buffer[0]);
    4b74:	ea43 2102 	orr.w	r1, r3, r2, lsl #8
    4b78:	82e1      	strh	r1, [r4, #22]
	Data_Streamer_buf_8[1] = S0_conv[1];
    4b7a:	7a61      	ldrb	r1, [r4, #9]
    4b7c:	7371      	strb	r1, [r6, #13]
	Data_Streamer_buf_8[2] = S0_conv[0];
    4b7e:	7a21      	ldrb	r1, [r4, #8]
    4b80:	73b1      	strb	r1, [r6, #14]
	Data_Streamer_buf_8[3] = S1_conv[1];
    4b82:	7b61      	ldrb	r1, [r4, #13]
    4b84:	73f1      	strb	r1, [r6, #15]
	Data_Streamer_buf_8[4] = S1_conv[0];
    4b86:	7b21      	ldrb	r1, [r4, #12]
    4b88:	7431      	strb	r1, [r6, #16]
	Data_Streamer_buf_8[5] = S2_conv[1];
    4b8a:	7c61      	ldrb	r1, [r4, #17]
    4b8c:	7471      	strb	r1, [r6, #17]
	Data_Streamer_buf_8[6] = S2_conv[0];
    4b8e:	7c21      	ldrb	r1, [r4, #16]
    4b90:	74b1      	strb	r1, [r6, #18]
	Data_Streamer_buf_8[7] = S3_conv[1];
    4b92:	74f2      	strb	r2, [r6, #19]
	Data_Streamer_buf_8[8] = S3_conv[0];
    4b94:	7533      	strb	r3, [r6, #20]
	io_write(USART_io,&Data_Streamer_buf_8,10);
    4b96:	220a      	movs	r2, #10
    4b98:	f106 010c 	add.w	r1, r6, #12
    4b9c:	4b07      	ldr	r3, [pc, #28]	; (4bbc <readCap_USART+0x16c>)
    4b9e:	6818      	ldr	r0, [r3, #0]
    4ba0:	47d0      	blx	sl
    4ba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ba6:	bf00      	nop
    4ba8:	41008000 	.word	0x41008000
    4bac:	20000124 	.word	0x20000124
    4bb0:	20000bf8 	.word	0x20000bf8
    4bb4:	20000494 	.word	0x20000494
    4bb8:	00001bf1 	.word	0x00001bf1
    4bbc:	20000b90 	.word	0x20000b90
    4bc0:	20000c10 	.word	0x20000c10
    4bc4:	00001d25 	.word	0x00001d25
    4bc8:	00001d59 	.word	0x00001d59

00004bcc <readCap_xp>:
{
    4bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4bce:	4d0d      	ldr	r5, [pc, #52]	; (4c04 <readCap_xp+0x38>)
    4bd0:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    4bd4:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
	io_write(SPI_io,&spi_read_S1_data,2);
    4bd8:	4f0b      	ldr	r7, [pc, #44]	; (4c08 <readCap_xp+0x3c>)
    4bda:	2202      	movs	r2, #2
    4bdc:	490b      	ldr	r1, [pc, #44]	; (4c0c <readCap_xp+0x40>)
    4bde:	6838      	ldr	r0, [r7, #0]
    4be0:	4b0b      	ldr	r3, [pc, #44]	; (4c10 <readCap_xp+0x44>)
    4be2:	4798      	blx	r3
	io_read(SPI_io,&buffer,2);
    4be4:	4c0b      	ldr	r4, [pc, #44]	; (4c14 <readCap_xp+0x48>)
    4be6:	2202      	movs	r2, #2
    4be8:	4621      	mov	r1, r4
    4bea:	6838      	ldr	r0, [r7, #0]
    4bec:	4b0a      	ldr	r3, [pc, #40]	; (4c18 <readCap_xp+0x4c>)
    4bee:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4bf0:	f8c5 6118 	str.w	r6, [r5, #280]	; 0x118
	x_p =((uint16_t)buffer[1]) << 8 | ((uint16_t)buffer[0]);
    4bf4:	7863      	ldrb	r3, [r4, #1]
    4bf6:	7820      	ldrb	r0, [r4, #0]
    4bf8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    4bfc:	4b07      	ldr	r3, [pc, #28]	; (4c1c <readCap_xp+0x50>)
    4bfe:	81d8      	strh	r0, [r3, #14]
}
    4c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c02:	bf00      	nop
    4c04:	41008000 	.word	0x41008000
    4c08:	20000c10 	.word	0x20000c10
    4c0c:	20000198 	.word	0x20000198
    4c10:	00001d25 	.word	0x00001d25
    4c14:	20000bf8 	.word	0x20000bf8
    4c18:	00001d59 	.word	0x00001d59
    4c1c:	20000494 	.word	0x20000494

00004c20 <readCap_xn>:
	x_n = 255;
    4c20:	20ff      	movs	r0, #255	; 0xff
    4c22:	4b01      	ldr	r3, [pc, #4]	; (4c28 <readCap_xn+0x8>)
    4c24:	8158      	strh	r0, [r3, #10]
}
    4c26:	4770      	bx	lr
    4c28:	20000494 	.word	0x20000494

00004c2c <readCap_yp>:
{
    4c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4c2e:	4d0d      	ldr	r5, [pc, #52]	; (4c64 <readCap_yp+0x38>)
    4c30:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    4c34:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
	io_write(SPI_io,&spi_read_S0_data,2);
    4c38:	4f0b      	ldr	r7, [pc, #44]	; (4c68 <readCap_yp+0x3c>)
    4c3a:	2202      	movs	r2, #2
    4c3c:	490b      	ldr	r1, [pc, #44]	; (4c6c <readCap_yp+0x40>)
    4c3e:	6838      	ldr	r0, [r7, #0]
    4c40:	4b0b      	ldr	r3, [pc, #44]	; (4c70 <readCap_yp+0x44>)
    4c42:	4798      	blx	r3
	io_read(SPI_io,&buffer,2);
    4c44:	4c0b      	ldr	r4, [pc, #44]	; (4c74 <readCap_yp+0x48>)
    4c46:	2202      	movs	r2, #2
    4c48:	4621      	mov	r1, r4
    4c4a:	6838      	ldr	r0, [r7, #0]
    4c4c:	4b0a      	ldr	r3, [pc, #40]	; (4c78 <readCap_yp+0x4c>)
    4c4e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4c50:	f8c5 6118 	str.w	r6, [r5, #280]	; 0x118
	y_p =((uint16_t)buffer[1]) << 8 | ((uint16_t)buffer[0]);
    4c54:	7863      	ldrb	r3, [r4, #1]
    4c56:	7820      	ldrb	r0, [r4, #0]
    4c58:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    4c5c:	4b07      	ldr	r3, [pc, #28]	; (4c7c <readCap_yp+0x50>)
    4c5e:	82d8      	strh	r0, [r3, #22]
}
    4c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c62:	bf00      	nop
    4c64:	41008000 	.word	0x41008000
    4c68:	20000c10 	.word	0x20000c10
    4c6c:	20000194 	.word	0x20000194
    4c70:	00001d25 	.word	0x00001d25
    4c74:	20000bf8 	.word	0x20000bf8
    4c78:	00001d59 	.word	0x00001d59
    4c7c:	20000494 	.word	0x20000494

00004c80 <readCap_yn>:
	y_n = 255;
    4c80:	20ff      	movs	r0, #255	; 0xff
    4c82:	4b01      	ldr	r3, [pc, #4]	; (4c88 <readCap_yn+0x8>)
    4c84:	8258      	strh	r0, [r3, #18]
}
    4c86:	4770      	bx	lr
    4c88:	20000494 	.word	0x20000494

00004c8c <readPE>:
{
    4c8c:	b538      	push	{r3, r4, r5, lr}
	adc_async_start_conversion(&ADC_0);
    4c8e:	4d09      	ldr	r5, [pc, #36]	; (4cb4 <readPE+0x28>)
    4c90:	4628      	mov	r0, r5
    4c92:	4b09      	ldr	r3, [pc, #36]	; (4cb8 <readPE+0x2c>)
    4c94:	4798      	blx	r3
	adc_async_read_channel(&ADC_0,0,buffer,2);
    4c96:	4c09      	ldr	r4, [pc, #36]	; (4cbc <readPE+0x30>)
    4c98:	2302      	movs	r3, #2
    4c9a:	4622      	mov	r2, r4
    4c9c:	2100      	movs	r1, #0
    4c9e:	4628      	mov	r0, r5
    4ca0:	4d07      	ldr	r5, [pc, #28]	; (4cc0 <readPE+0x34>)
    4ca2:	47a8      	blx	r5
	ADC_result=((uint16_t)buffer[1]) << 8 | ((uint16_t)buffer[0]);
    4ca4:	7863      	ldrb	r3, [r4, #1]
    4ca6:	7820      	ldrb	r0, [r4, #0]
    4ca8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    4cac:	4b05      	ldr	r3, [pc, #20]	; (4cc4 <readPE+0x38>)
    4cae:	8318      	strh	r0, [r3, #24]
}
    4cb0:	bd38      	pop	{r3, r4, r5, pc}
    4cb2:	bf00      	nop
    4cb4:	20000520 	.word	0x20000520
    4cb8:	00001b99 	.word	0x00001b99
    4cbc:	20000bf8 	.word	0x20000bf8
    4cc0:	00001ac9 	.word	0x00001ac9
    4cc4:	20000494 	.word	0x20000494

00004cc8 <readPE_USART>:
{
    4cc8:	b538      	push	{r3, r4, r5, lr}
	adc_async_start_conversion(&ADC_0);
    4cca:	4d0d      	ldr	r5, [pc, #52]	; (4d00 <readPE_USART+0x38>)
    4ccc:	4628      	mov	r0, r5
    4cce:	4b0d      	ldr	r3, [pc, #52]	; (4d04 <readPE_USART+0x3c>)
    4cd0:	4798      	blx	r3
	adc_async_read_channel(&ADC_0,0,buffer,2);
    4cd2:	4c0d      	ldr	r4, [pc, #52]	; (4d08 <readPE_USART+0x40>)
    4cd4:	2302      	movs	r3, #2
    4cd6:	4622      	mov	r2, r4
    4cd8:	2100      	movs	r1, #0
    4cda:	4628      	mov	r0, r5
    4cdc:	4d0b      	ldr	r5, [pc, #44]	; (4d0c <readPE_USART+0x44>)
    4cde:	47a8      	blx	r5
	Data_Streamer_buf_2[1] = buffer[0];
    4ce0:	7823      	ldrb	r3, [r4, #0]
    4ce2:	490b      	ldr	r1, [pc, #44]	; (4d10 <readPE_USART+0x48>)
    4ce4:	f881 3081 	strb.w	r3, [r1, #129]	; 0x81
	Data_Streamer_buf_2[2] = buffer[1]+0x7F;
    4ce8:	7863      	ldrb	r3, [r4, #1]
    4cea:	337f      	adds	r3, #127	; 0x7f
    4cec:	f881 3082 	strb.w	r3, [r1, #130]	; 0x82
	io_write(USART_io, &Data_Streamer_buf_2, 4);
    4cf0:	2204      	movs	r2, #4
    4cf2:	3180      	adds	r1, #128	; 0x80
    4cf4:	4b07      	ldr	r3, [pc, #28]	; (4d14 <readPE_USART+0x4c>)
    4cf6:	6818      	ldr	r0, [r3, #0]
    4cf8:	4b07      	ldr	r3, [pc, #28]	; (4d18 <readPE_USART+0x50>)
    4cfa:	4798      	blx	r3
    4cfc:	bd38      	pop	{r3, r4, r5, pc}
    4cfe:	bf00      	nop
    4d00:	20000520 	.word	0x20000520
    4d04:	00001b99 	.word	0x00001b99
    4d08:	20000bf8 	.word	0x20000bf8
    4d0c:	00001ac9 	.word	0x00001ac9
    4d10:	20000124 	.word	0x20000124
    4d14:	20000b90 	.word	0x20000b90
    4d18:	00001d25 	.word	0x00001d25

00004d1c <ADC_MCP_Init>:
/**
 * Example of using ADC_0 to generate waveform.
 */

void ADC_MCP_Init(void)
{
    4d1c:	b538      	push	{r3, r4, r5, lr}
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC);
    4d1e:	4c07      	ldr	r4, [pc, #28]	; (4d3c <ADC_MCP_Init+0x20>)
    4d20:	4b07      	ldr	r3, [pc, #28]	; (4d40 <ADC_MCP_Init+0x24>)
    4d22:	2200      	movs	r2, #0
    4d24:	4611      	mov	r1, r2
    4d26:	4620      	mov	r0, r4
    4d28:	4d06      	ldr	r5, [pc, #24]	; (4d44 <ADC_MCP_Init+0x28>)
    4d2a:	47a8      	blx	r5
	adc_async_enable_channel(&ADC_0, 0);
    4d2c:	2100      	movs	r1, #0
    4d2e:	4620      	mov	r0, r4
    4d30:	4b05      	ldr	r3, [pc, #20]	; (4d48 <ADC_MCP_Init+0x2c>)
    4d32:	4798      	blx	r3
	adc_async_start_conversion(&ADC_0);
    4d34:	4620      	mov	r0, r4
    4d36:	4b05      	ldr	r3, [pc, #20]	; (4d4c <ADC_MCP_Init+0x30>)
    4d38:	4798      	blx	r3
    4d3a:	bd38      	pop	{r3, r4, r5, pc}
    4d3c:	20000520 	.word	0x20000520
    4d40:	000044a1 	.word	0x000044a1
    4d44:	00001a45 	.word	0x00001a45
    4d48:	00001a05 	.word	0x00001a05
    4d4c:	00001b99 	.word	0x00001b99

00004d50 <InitPR>:
{
    4d50:	b508      	push	{r3, lr}
	ADC_MCP_Init();
    4d52:	4b01      	ldr	r3, [pc, #4]	; (4d58 <InitPR+0x8>)
    4d54:	4798      	blx	r3
    4d56:	bd08      	pop	{r3, pc}
    4d58:	00004d1d 	.word	0x00004d1d

00004d5c <readPR>:
{
    4d5c:	b538      	push	{r3, r4, r5, lr}
	ADC_MCP_Init();
    4d5e:	4b0a      	ldr	r3, [pc, #40]	; (4d88 <readPR+0x2c>)
    4d60:	4798      	blx	r3
	adc_async_start_conversion(&ADC_0);
    4d62:	4d0a      	ldr	r5, [pc, #40]	; (4d8c <readPR+0x30>)
    4d64:	4628      	mov	r0, r5
    4d66:	4b0a      	ldr	r3, [pc, #40]	; (4d90 <readPR+0x34>)
    4d68:	4798      	blx	r3
	adc_async_read_channel(&ADC_0,0,buffer,2);
    4d6a:	4c0a      	ldr	r4, [pc, #40]	; (4d94 <readPR+0x38>)
    4d6c:	2302      	movs	r3, #2
    4d6e:	4622      	mov	r2, r4
    4d70:	2100      	movs	r1, #0
    4d72:	4628      	mov	r0, r5
    4d74:	4d08      	ldr	r5, [pc, #32]	; (4d98 <readPR+0x3c>)
    4d76:	47a8      	blx	r5
	ADC_result=((uint16_t)buffer[1]) << 8 | ((uint16_t)buffer[0]);
    4d78:	7863      	ldrb	r3, [r4, #1]
    4d7a:	7820      	ldrb	r0, [r4, #0]
    4d7c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    4d80:	4b06      	ldr	r3, [pc, #24]	; (4d9c <readPR+0x40>)
    4d82:	8318      	strh	r0, [r3, #24]
}
    4d84:	bd38      	pop	{r3, r4, r5, pc}
    4d86:	bf00      	nop
    4d88:	00004d1d 	.word	0x00004d1d
    4d8c:	20000520 	.word	0x20000520
    4d90:	00001b99 	.word	0x00001b99
    4d94:	20000bf8 	.word	0x20000bf8
    4d98:	00001ac9 	.word	0x00001ac9
    4d9c:	20000494 	.word	0x20000494

00004da0 <readPR_USART>:
{
    4da0:	b538      	push	{r3, r4, r5, lr}
	ADC_MCP_Init();
    4da2:	4b0e      	ldr	r3, [pc, #56]	; (4ddc <readPR_USART+0x3c>)
    4da4:	4798      	blx	r3
	adc_async_start_conversion(&ADC_0);
    4da6:	4d0e      	ldr	r5, [pc, #56]	; (4de0 <readPR_USART+0x40>)
    4da8:	4628      	mov	r0, r5
    4daa:	4b0e      	ldr	r3, [pc, #56]	; (4de4 <readPR_USART+0x44>)
    4dac:	4798      	blx	r3
	adc_async_read_channel(&ADC_0,0,buffer,2);
    4dae:	4c0e      	ldr	r4, [pc, #56]	; (4de8 <readPR_USART+0x48>)
    4db0:	2302      	movs	r3, #2
    4db2:	4622      	mov	r2, r4
    4db4:	2100      	movs	r1, #0
    4db6:	4628      	mov	r0, r5
    4db8:	4d0c      	ldr	r5, [pc, #48]	; (4dec <readPR_USART+0x4c>)
    4dba:	47a8      	blx	r5
	Data_Streamer_buf_2[1] = buffer[0];
    4dbc:	7823      	ldrb	r3, [r4, #0]
    4dbe:	490c      	ldr	r1, [pc, #48]	; (4df0 <readPR_USART+0x50>)
    4dc0:	f881 3081 	strb.w	r3, [r1, #129]	; 0x81
	Data_Streamer_buf_2[2] = buffer[1]+0x7F;
    4dc4:	7863      	ldrb	r3, [r4, #1]
    4dc6:	337f      	adds	r3, #127	; 0x7f
    4dc8:	f881 3082 	strb.w	r3, [r1, #130]	; 0x82
	io_write(USART_io, &Data_Streamer_buf_2, 4); //PROBLEMATIC CAUSES ERROR IN ETHERCAT TRANSMISSION
    4dcc:	2204      	movs	r2, #4
    4dce:	3180      	adds	r1, #128	; 0x80
    4dd0:	4b08      	ldr	r3, [pc, #32]	; (4df4 <readPR_USART+0x54>)
    4dd2:	6818      	ldr	r0, [r3, #0]
    4dd4:	4b08      	ldr	r3, [pc, #32]	; (4df8 <readPR_USART+0x58>)
    4dd6:	4798      	blx	r3
    4dd8:	bd38      	pop	{r3, r4, r5, pc}
    4dda:	bf00      	nop
    4ddc:	00004d1d 	.word	0x00004d1d
    4de0:	20000520 	.word	0x20000520
    4de4:	00001b99 	.word	0x00001b99
    4de8:	20000bf8 	.word	0x20000bf8
    4dec:	00001ac9 	.word	0x00001ac9
    4df0:	20000124 	.word	0x20000124
    4df4:	20000b90 	.word	0x20000b90
    4df8:	00001d25 	.word	0x00001d25

00004dfc <InitPE>:
{
    4dfc:	b570      	push	{r4, r5, r6, lr}
	ADC_MCP_Init();
    4dfe:	4b10      	ldr	r3, [pc, #64]	; (4e40 <InitPE+0x44>)
    4e00:	4798      	blx	r3
	i2c_m_sync_get_io_descriptor(&I2C_0, &I2C_io);
    4e02:	4e10      	ldr	r6, [pc, #64]	; (4e44 <InitPE+0x48>)
    4e04:	4c10      	ldr	r4, [pc, #64]	; (4e48 <InitPE+0x4c>)
    4e06:	4631      	mov	r1, r6
    4e08:	4620      	mov	r0, r4
    4e0a:	4b10      	ldr	r3, [pc, #64]	; (4e4c <InitPE+0x50>)
    4e0c:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_0);
    4e0e:	4620      	mov	r0, r4
    4e10:	4b0f      	ldr	r3, [pc, #60]	; (4e50 <InitPE+0x54>)
    4e12:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(&I2C_0, MCP_addr, I2C_M_SEVEN);
    4e14:	4d0f      	ldr	r5, [pc, #60]	; (4e54 <InitPE+0x58>)
    4e16:	f44f 6200 	mov.w	r2, #2048	; 0x800
    4e1a:	f895 1084 	ldrb.w	r1, [r5, #132]	; 0x84
    4e1e:	4620      	mov	r0, r4
    4e20:	4b0d      	ldr	r3, [pc, #52]	; (4e58 <InitPE+0x5c>)
    4e22:	4798      	blx	r3
	io_write(I2C_io, i2c_write_V0,2);
    4e24:	2202      	movs	r2, #2
    4e26:	f105 0188 	add.w	r1, r5, #136	; 0x88
    4e2a:	6830      	ldr	r0, [r6, #0]
    4e2c:	4b0b      	ldr	r3, [pc, #44]	; (4e5c <InitPE+0x60>)
    4e2e:	4798      	blx	r3
	i2c_m_sync_cmd_read(&I2C_0, i2c_read_V0, &buffer, 2);
    4e30:	2302      	movs	r3, #2
    4e32:	4a0b      	ldr	r2, [pc, #44]	; (4e60 <InitPE+0x64>)
    4e34:	f895 108a 	ldrb.w	r1, [r5, #138]	; 0x8a
    4e38:	4620      	mov	r0, r4
    4e3a:	4c0a      	ldr	r4, [pc, #40]	; (4e64 <InitPE+0x68>)
    4e3c:	47a0      	blx	r4
    4e3e:	bd70      	pop	{r4, r5, r6, pc}
    4e40:	00004d1d 	.word	0x00004d1d
    4e44:	20000bfc 	.word	0x20000bfc
    4e48:	200005bc 	.word	0x200005bc
    4e4c:	00001d1d 	.word	0x00001d1d
    4e50:	00001cb1 	.word	0x00001cb1
    4e54:	20000124 	.word	0x20000124
    4e58:	00001cbd 	.word	0x00001cbd
    4e5c:	00001d25 	.word	0x00001d25
    4e60:	20000bf8 	.word	0x20000bf8
    4e64:	00001ccd 	.word	0x00001ccd

00004e68 <initHall>:
}

void initHall()
{
    4e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e6c:	b085      	sub	sp, #20
	uint8_t hall_reg00_lsb = (hall_ZSER<<7) | (hall_GAINSEL<<4) | hall_HALLCONF;
    4e6e:	4c80      	ldr	r4, [pc, #512]	; (5070 <initHall+0x208>)
    4e70:	7ea2      	ldrb	r2, [r4, #26]
    4e72:	7ee3      	ldrb	r3, [r4, #27]
    4e74:	011b      	lsls	r3, r3, #4
    4e76:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    4e7a:	b25b      	sxtb	r3, r3
    4e7c:	7f22      	ldrb	r2, [r4, #28]
    4e7e:	4313      	orrs	r3, r2
	uint8_t hall_write_reg_00[4] = {0x60,0x00,hall_reg00_lsb,(0x00<<2)};
    4e80:	2260      	movs	r2, #96	; 0x60
    4e82:	f88d 200c 	strb.w	r2, [sp, #12]
    4e86:	2100      	movs	r1, #0
    4e88:	f88d 100d 	strb.w	r1, [sp, #13]
    4e8c:	f88d 300e 	strb.w	r3, [sp, #14]
    4e90:	f88d 100f 	strb.w	r1, [sp, #15]
	uint8_t hall_reg01_lsb = (hall_BURSTSEL_LSB<<6) | (hall_BURSTDATARATE);
    4e94:	7f63      	ldrb	r3, [r4, #29]
    4e96:	7fa1      	ldrb	r1, [r4, #30]
    4e98:	ea41 1183 	orr.w	r1, r1, r3, lsl #6
	uint8_t hall_reg01_msb = (hall_TRIGINT<<7) | (hall_COMMMODE<<5) | (hall_WOCDIFF<<4) | (hall_EXTTRIG<<3) |(hall_TCMPEN<<2)| hall_BURSTSEL_MSB;
    4e9c:	7fe0      	ldrb	r0, [r4, #31]
    4e9e:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 508c <initHall+0x224>
    4ea2:	f89a 308b 	ldrb.w	r3, [sl, #139]	; 0x8b
    4ea6:	015b      	lsls	r3, r3, #5
    4ea8:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
    4eac:	b25b      	sxtb	r3, r3
    4eae:	f894 0020 	ldrb.w	r0, [r4, #32]
    4eb2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    4eb6:	b25b      	sxtb	r3, r3
    4eb8:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    4ebc:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
    4ec0:	b25b      	sxtb	r3, r3
    4ec2:	f89a 008c 	ldrb.w	r0, [sl, #140]	; 0x8c
    4ec6:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    4eca:	b25b      	sxtb	r3, r3
    4ecc:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    4ed0:	4303      	orrs	r3, r0
	uint8_t hall_write_reg_01[4] = {0x60,hall_reg01_msb,hall_reg01_lsb,(0x01<<2)};
    4ed2:	f88d 2008 	strb.w	r2, [sp, #8]
    4ed6:	f88d 3009 	strb.w	r3, [sp, #9]
    4eda:	f88d 100a 	strb.w	r1, [sp, #10]
    4ede:	f04f 0304 	mov.w	r3, #4
    4ee2:	f88d 300b 	strb.w	r3, [sp, #11]
	uint8_t hall_reg02_lsb = (hall_RESY_LSB<<5) |(hall_RESX<<5) |(hall_DIFFILT<<2) | (hall_OSR);
    4ee6:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    4eea:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    4eee:	015b      	lsls	r3, r3, #5
    4ef0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    4ef4:	b25b      	sxtb	r3, r3
    4ef6:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    4efa:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    4efe:	b25b      	sxtb	r3, r3
    4f00:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    4f04:	430b      	orrs	r3, r1
	uint8_t hall_reg02_msb = 0X00 | (hall_OSR2<<3) |(hall_RESZ<<1)| hall_RESY_MSB;
    4f06:	f89a 008d 	ldrb.w	r0, [sl, #141]	; 0x8d
    4f0a:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
    4f0e:	0049      	lsls	r1, r1, #1
    4f10:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
    4f14:	b249      	sxtb	r1, r1
    4f16:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    4f1a:	4301      	orrs	r1, r0
	uint8_t hall_write_reg_02[4] = {0x60,hall_reg02_msb,hall_reg02_lsb,(0x02<<2)};
    4f1c:	f88d 2004 	strb.w	r2, [sp, #4]
    4f20:	f88d 1005 	strb.w	r1, [sp, #5]
    4f24:	f88d 3006 	strb.w	r3, [sp, #6]
    4f28:	2308      	movs	r3, #8
    4f2a:	f88d 3007 	strb.w	r3, [sp, #7]
	//uint8_t hall_write_reg_02[4] = {0x60,0x10,0x0D,(0x02<<2)};
	
	spi_m_sync_get_io_descriptor(&SPI_1, &SPI_io);
    4f2e:	4d51      	ldr	r5, [pc, #324]	; (5074 <initHall+0x20c>)
    4f30:	4e51      	ldr	r6, [pc, #324]	; (5078 <initHall+0x210>)
    4f32:	4629      	mov	r1, r5
    4f34:	4630      	mov	r0, r6
    4f36:	4b51      	ldr	r3, [pc, #324]	; (507c <initHall+0x214>)
    4f38:	4798      	blx	r3
	spi_m_sync_enable(&SPI_1);
    4f3a:	4630      	mov	r0, r6
    4f3c:	4b50      	ldr	r3, [pc, #320]	; (5080 <initHall+0x218>)
    4f3e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4f40:	4e50      	ldr	r6, [pc, #320]	; (5084 <initHall+0x21c>)
    4f42:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    4f46:	f8c6 7114 	str.w	r7, [r6, #276]	; 0x114
	
	gpio_set_pin_level(TS_SPI_SS_1,false);
	io_write(SPI_io,&hall_cmmd_exit,1);
    4f4a:	2201      	movs	r2, #1
    4f4c:	f10a 018e 	add.w	r1, sl, #142	; 0x8e
    4f50:	6828      	ldr	r0, [r5, #0]
    4f52:	f8df 913c 	ldr.w	r9, [pc, #316]	; 5090 <initHall+0x228>
    4f56:	47c8      	blx	r9
	io_read(SPI_io,&buffer_Read_data,1);
    4f58:	f104 082c 	add.w	r8, r4, #44	; 0x2c
    4f5c:	2201      	movs	r2, #1
    4f5e:	4641      	mov	r1, r8
    4f60:	6828      	ldr	r0, [r5, #0]
    4f62:	4c49      	ldr	r4, [pc, #292]	; (5088 <initHall+0x220>)
    4f64:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4f66:	f8c6 7118 	str.w	r7, [r6, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4f6a:	f8c6 7114 	str.w	r7, [r6, #276]	; 0x114
	gpio_set_pin_level(TS_SPI_SS_1,true);
	
	gpio_set_pin_level(TS_SPI_SS_1,false);
	io_write(SPI_io,&hall_cmmd_reset,1);
    4f6e:	2201      	movs	r2, #1
    4f70:	f10a 018f 	add.w	r1, sl, #143	; 0x8f
    4f74:	6828      	ldr	r0, [r5, #0]
    4f76:	47c8      	blx	r9
	io_read(SPI_io,&buffer_Read_data,1);
    4f78:	2201      	movs	r2, #1
    4f7a:	4641      	mov	r1, r8
    4f7c:	6828      	ldr	r0, [r5, #0]
    4f7e:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4f80:	f8c6 7118 	str.w	r7, [r6, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4f84:	f8c6 7114 	str.w	r7, [r6, #276]	; 0x114
	gpio_set_pin_level(TS_SPI_SS_1,true);
	
	gpio_set_pin_level(TS_SPI_SS_1,false);
	io_write(SPI_io,&hall_read_reg_00,2);
    4f88:	f10a 0b90 	add.w	fp, sl, #144	; 0x90
    4f8c:	2202      	movs	r2, #2
    4f8e:	4659      	mov	r1, fp
    4f90:	6828      	ldr	r0, [r5, #0]
    4f92:	47c8      	blx	r9
	io_read(SPI_io,&buffer_Read_data,3);
    4f94:	2203      	movs	r2, #3
    4f96:	4641      	mov	r1, r8
    4f98:	6828      	ldr	r0, [r5, #0]
    4f9a:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4f9c:	f8c6 7118 	str.w	r7, [r6, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4fa0:	f8c6 7114 	str.w	r7, [r6, #276]	; 0x114
	gpio_set_pin_level(TS_SPI_SS_1,true);
	
	gpio_set_pin_level(TS_SPI_SS_1,false);
	io_write(SPI_io,&hall_write_reg_00,4);
    4fa4:	2204      	movs	r2, #4
    4fa6:	a903      	add	r1, sp, #12
    4fa8:	6828      	ldr	r0, [r5, #0]
    4faa:	47c8      	blx	r9
	io_read(SPI_io,&buffer_Read_data,1);
    4fac:	2201      	movs	r2, #1
    4fae:	4641      	mov	r1, r8
    4fb0:	6828      	ldr	r0, [r5, #0]
    4fb2:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4fb4:	f8c6 7118 	str.w	r7, [r6, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4fb8:	f8c6 7114 	str.w	r7, [r6, #276]	; 0x114
	gpio_set_pin_level(TS_SPI_SS_1,true);
	
	gpio_set_pin_level(TS_SPI_SS_1,false);
	io_write(SPI_io,&hall_read_reg_00,2);
    4fbc:	2202      	movs	r2, #2
    4fbe:	4659      	mov	r1, fp
    4fc0:	6828      	ldr	r0, [r5, #0]
    4fc2:	47c8      	blx	r9
	io_read(SPI_io,&buffer_Read_data,3);
    4fc4:	2203      	movs	r2, #3
    4fc6:	4641      	mov	r1, r8
    4fc8:	6828      	ldr	r0, [r5, #0]
    4fca:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4fcc:	f8c6 7118 	str.w	r7, [r6, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4fd0:	f8c6 7114 	str.w	r7, [r6, #276]	; 0x114
	gpio_set_pin_level(TS_SPI_SS_1,true);
	
	gpio_set_pin_level(TS_SPI_SS_1,false);
	io_write(SPI_io,&hall_read_reg_02,2);
    4fd4:	f10a 0b94 	add.w	fp, sl, #148	; 0x94
    4fd8:	2202      	movs	r2, #2
    4fda:	4659      	mov	r1, fp
    4fdc:	6828      	ldr	r0, [r5, #0]
    4fde:	47c8      	blx	r9
	io_read(SPI_io,&buffer_Read_data,3);
    4fe0:	2203      	movs	r2, #3
    4fe2:	4641      	mov	r1, r8
    4fe4:	6828      	ldr	r0, [r5, #0]
    4fe6:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4fe8:	f8c6 7118 	str.w	r7, [r6, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4fec:	f8c6 7114 	str.w	r7, [r6, #276]	; 0x114
	gpio_set_pin_level(TS_SPI_SS_1,true);
	
	gpio_set_pin_level(TS_SPI_SS_1,false);
	io_write(SPI_io,&hall_write_reg_02,4);
    4ff0:	2204      	movs	r2, #4
    4ff2:	eb0d 0102 	add.w	r1, sp, r2
    4ff6:	6828      	ldr	r0, [r5, #0]
    4ff8:	47c8      	blx	r9
	io_read(SPI_io,&buffer_Read_data,1);
    4ffa:	2201      	movs	r2, #1
    4ffc:	4641      	mov	r1, r8
    4ffe:	6828      	ldr	r0, [r5, #0]
    5000:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5002:	f8c6 7118 	str.w	r7, [r6, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5006:	f8c6 7114 	str.w	r7, [r6, #276]	; 0x114
	gpio_set_pin_level(TS_SPI_SS_1,true);
	
	gpio_set_pin_level(TS_SPI_SS_1,false);
	io_write(SPI_io,&hall_read_reg_02,2);
    500a:	2202      	movs	r2, #2
    500c:	4659      	mov	r1, fp
    500e:	6828      	ldr	r0, [r5, #0]
    5010:	47c8      	blx	r9
	io_read(SPI_io,&buffer_Read_data,3);
    5012:	2203      	movs	r2, #3
    5014:	4641      	mov	r1, r8
    5016:	6828      	ldr	r0, [r5, #0]
    5018:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    501a:	f8c6 7118 	str.w	r7, [r6, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    501e:	f8c6 7114 	str.w	r7, [r6, #276]	; 0x114
	gpio_set_pin_level(TS_SPI_SS_1,true);

	gpio_set_pin_level(TS_SPI_SS_1,false);
	io_write(SPI_io,&hall_read_reg_01,2);
    5022:	f10a 0a98 	add.w	sl, sl, #152	; 0x98
    5026:	2202      	movs	r2, #2
    5028:	4651      	mov	r1, sl
    502a:	6828      	ldr	r0, [r5, #0]
    502c:	47c8      	blx	r9
	io_read(SPI_io,&buffer_Read_data,3);
    502e:	2203      	movs	r2, #3
    5030:	4641      	mov	r1, r8
    5032:	6828      	ldr	r0, [r5, #0]
    5034:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5036:	f8c6 7118 	str.w	r7, [r6, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    503a:	f8c6 7114 	str.w	r7, [r6, #276]	; 0x114
	gpio_set_pin_level(TS_SPI_SS_1,true);

	gpio_set_pin_level(TS_SPI_SS_1,false);
	io_write(SPI_io,&hall_write_reg_01,4);
    503e:	2204      	movs	r2, #4
    5040:	a902      	add	r1, sp, #8
    5042:	6828      	ldr	r0, [r5, #0]
    5044:	47c8      	blx	r9
	io_read(SPI_io,&buffer_Read_data,3);
    5046:	2203      	movs	r2, #3
    5048:	4641      	mov	r1, r8
    504a:	6828      	ldr	r0, [r5, #0]
    504c:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    504e:	f8c6 7118 	str.w	r7, [r6, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5052:	f8c6 7114 	str.w	r7, [r6, #276]	; 0x114
	gpio_set_pin_level(TS_SPI_SS_1,true);

	gpio_set_pin_level(TS_SPI_SS_1,false);
	io_write(SPI_io,&hall_read_reg_01,2);
    5056:	2202      	movs	r2, #2
    5058:	4651      	mov	r1, sl
    505a:	6828      	ldr	r0, [r5, #0]
    505c:	47c8      	blx	r9
	io_read(SPI_io,&buffer_Read_data,3);
    505e:	2203      	movs	r2, #3
    5060:	4641      	mov	r1, r8
    5062:	6828      	ldr	r0, [r5, #0]
    5064:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5066:	f8c6 7118 	str.w	r7, [r6, #280]	; 0x118
	gpio_set_pin_level(TS_SPI_SS_1,true);
}
    506a:	b005      	add	sp, #20
    506c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5070:	20000494 	.word	0x20000494
    5074:	20000c10 	.word	0x20000c10
    5078:	20000508 	.word	0x20000508
    507c:	00001fd1 	.word	0x00001fd1
    5080:	00001eed 	.word	0x00001eed
    5084:	41008000 	.word	0x41008000
    5088:	00001d59 	.word	0x00001d59
    508c:	20000124 	.word	0x20000124
    5090:	00001d25 	.word	0x00001d25

00005094 <readHall_USART>:

void readHall_USART(void) ///Only for Data Vizualizer
{
    5094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5098:	4e38      	ldr	r6, [pc, #224]	; (517c <readHall_USART+0xe8>)
    509a:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    509e:	f8c6 7114 	str.w	r7, [r6, #276]	; 0x114
	//io_write(USART_io,&hall_cmmd_measure, 1);
	gpio_set_pin_level(TS_SPI_SS_1,false);
	io_write(SPI_io,&hall_cmmd_measure,1);
    50a2:	4d37      	ldr	r5, [pc, #220]	; (5180 <readHall_USART+0xec>)
    50a4:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 5190 <readHall_USART+0xfc>
    50a8:	2201      	movs	r2, #1
    50aa:	f105 019a 	add.w	r1, r5, #154	; 0x9a
    50ae:	f8d8 0000 	ldr.w	r0, [r8]
    50b2:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 5194 <readHall_USART+0x100>
    50b6:	47c8      	blx	r9
	io_read(SPI_io,&buffer_Read_data,1);
    50b8:	4c32      	ldr	r4, [pc, #200]	; (5184 <readHall_USART+0xf0>)
    50ba:	f104 0b2c 	add.w	fp, r4, #44	; 0x2c
    50be:	2201      	movs	r2, #1
    50c0:	4659      	mov	r1, fp
    50c2:	f8d8 0000 	ldr.w	r0, [r8]
    50c6:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 5198 <readHall_USART+0x104>
    50ca:	47d0      	blx	sl
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    50cc:	f8c6 7118 	str.w	r7, [r6, #280]	; 0x118
	gpio_set_pin_level(TS_SPI_SS_1,true);
	
	hall_status[0] = buffer_Read_data[0];
    50d0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    50d4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	
	//io_write(USART_io, &buffer_Read_data, 1);
	delay_ms(5);
    50d8:	2005      	movs	r0, #5
    50da:	4b2b      	ldr	r3, [pc, #172]	; (5188 <readHall_USART+0xf4>)
    50dc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    50de:	f8c6 7114 	str.w	r7, [r6, #276]	; 0x114
	
	//io_write(USART_io,&spi_cmmd_read, 1);
	gpio_set_pin_level(TS_SPI_SS_1,false);
	io_write(SPI_io,&hall_cmmd_read,1);
    50e2:	2201      	movs	r2, #1
    50e4:	f105 019b 	add.w	r1, r5, #155	; 0x9b
    50e8:	f8d8 0000 	ldr.w	r0, [r8]
    50ec:	47c8      	blx	r9
	io_read(SPI_io,&buffer_Read_data,9);
    50ee:	2209      	movs	r2, #9
    50f0:	4659      	mov	r1, fp
    50f2:	f8d8 0000 	ldr.w	r0, [r8]
    50f6:	47d0      	blx	sl
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    50f8:	f8c6 7118 	str.w	r7, [r6, #280]	; 0x118
	gpio_set_pin_level(TS_SPI_SS_1,true);
	//io_write(USART_io, &hall_Read_data, 9);

	
	hall_status[0] = buffer_Read_data[0];
    50fc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    5100:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	
	hall_temp[0] = buffer_Read_data[2];
    5104:	f894 802e 	ldrb.w	r8, [r4, #46]	; 0x2e
    5108:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
	hall_temp[1] = buffer_Read_data[1];
    510c:	f894 c02d 	ldrb.w	ip, [r4, #45]	; 0x2d
    5110:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
	
	hall_x[0] = buffer_Read_data[4];
    5114:	f894 e030 	ldrb.w	lr, [r4, #48]	; 0x30
    5118:	f884 e040 	strb.w	lr, [r4, #64]	; 0x40
	hall_x[1] = buffer_Read_data[3];
    511c:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    5120:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
	
	hall_y[0] = buffer_Read_data[6];
    5124:	f894 6032 	ldrb.w	r6, [r4, #50]	; 0x32
    5128:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
	hall_y[1] = buffer_Read_data[5];
    512c:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
    5130:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
	
	hall_z[0] = buffer_Read_data[8];
    5134:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    5138:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
	hall_z[1] = buffer_Read_data[7];
    513c:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    5140:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
	
	Data_Streamer_buf_12[1] = hall_status[0];
    5144:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
	Data_Streamer_buf_12[2] = hall_status[0];
    5148:	f885 309e 	strb.w	r3, [r5, #158]	; 0x9e
	Data_Streamer_buf_12[3] = hall_temp[0];
    514c:	f885 809f 	strb.w	r8, [r5, #159]	; 0x9f
	Data_Streamer_buf_12[4] = hall_temp[1];
    5150:	f885 c0a0 	strb.w	ip, [r5, #160]	; 0xa0
	Data_Streamer_buf_12[5] = hall_x[0];
    5154:	f885 e0a1 	strb.w	lr, [r5, #161]	; 0xa1
	Data_Streamer_buf_12[6] = hall_x[1];
    5158:	f885 70a2 	strb.w	r7, [r5, #162]	; 0xa2
	Data_Streamer_buf_12[7] = hall_y[0];
    515c:	f885 60a3 	strb.w	r6, [r5, #163]	; 0xa3
	Data_Streamer_buf_12[8] = hall_y[1];
    5160:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	Data_Streamer_buf_12[9] = hall_z[0];
    5164:	f885 10a5 	strb.w	r1, [r5, #165]	; 0xa5
	Data_Streamer_buf_12[10] = hall_z[1];
    5168:	f885 20a6 	strb.w	r2, [r5, #166]	; 0xa6
	
	io_write(USART_io, Data_Streamer_buf_12, 12);
    516c:	220c      	movs	r2, #12
    516e:	f105 019c 	add.w	r1, r5, #156	; 0x9c
    5172:	4b06      	ldr	r3, [pc, #24]	; (518c <readHall_USART+0xf8>)
    5174:	6818      	ldr	r0, [r3, #0]
    5176:	47c8      	blx	r9
    5178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    517c:	41008000 	.word	0x41008000
    5180:	20000124 	.word	0x20000124
    5184:	20000494 	.word	0x20000494
    5188:	00001bf1 	.word	0x00001bf1
    518c:	20000b90 	.word	0x20000b90
    5190:	20000c10 	.word	0x20000c10
    5194:	00001d25 	.word	0x00001d25
    5198:	00001d59 	.word	0x00001d59

0000519c <readHall>:
}

void readHall(void) ///Only for Data Vizualizer
{
    519c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    51a0:	4d25      	ldr	r5, [pc, #148]	; (5238 <readHall+0x9c>)
    51a2:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    51a6:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
	//io_write(USART_io,&hall_cmmd_measure, 1);
	gpio_set_pin_level(TS_SPI_SS_1,false);
	io_write(SPI_io,&hall_cmmd_measure,1);
    51aa:	f8df b09c 	ldr.w	fp, [pc, #156]	; 5248 <readHall+0xac>
    51ae:	4f23      	ldr	r7, [pc, #140]	; (523c <readHall+0xa0>)
    51b0:	2201      	movs	r2, #1
    51b2:	f10b 019a 	add.w	r1, fp, #154	; 0x9a
    51b6:	6838      	ldr	r0, [r7, #0]
    51b8:	f8df a090 	ldr.w	sl, [pc, #144]	; 524c <readHall+0xb0>
    51bc:	47d0      	blx	sl
	io_read(SPI_io,&buffer_Read_data,1);
    51be:	4c20      	ldr	r4, [pc, #128]	; (5240 <readHall+0xa4>)
    51c0:	f104 092c 	add.w	r9, r4, #44	; 0x2c
    51c4:	2201      	movs	r2, #1
    51c6:	4649      	mov	r1, r9
    51c8:	6838      	ldr	r0, [r7, #0]
    51ca:	f8df 8084 	ldr.w	r8, [pc, #132]	; 5250 <readHall+0xb4>
    51ce:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    51d0:	f8c5 6118 	str.w	r6, [r5, #280]	; 0x118
	gpio_set_pin_level(TS_SPI_SS_1,true);
	
	delay_ms(2);
    51d4:	2002      	movs	r0, #2
    51d6:	4b1b      	ldr	r3, [pc, #108]	; (5244 <readHall+0xa8>)
    51d8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    51da:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
	
	gpio_set_pin_level(TS_SPI_SS_1,false);
	io_write(SPI_io,&hall_cmmd_read,1);
    51de:	2201      	movs	r2, #1
    51e0:	f10b 019b 	add.w	r1, fp, #155	; 0x9b
    51e4:	6838      	ldr	r0, [r7, #0]
    51e6:	47d0      	blx	sl
	io_read(SPI_io,&buffer_Read_data,9);
    51e8:	2209      	movs	r2, #9
    51ea:	4649      	mov	r1, r9
    51ec:	6838      	ldr	r0, [r7, #0]
    51ee:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    51f0:	f8c5 6118 	str.w	r6, [r5, #280]	; 0x118
	gpio_set_pin_level(TS_SPI_SS_1,true);
	
	hall_x_16 = ((uint16_t)buffer_Read_data[3]) << 8 | ((uint16_t)buffer_Read_data[4]);
    51f4:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    51f8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    51fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5200:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
	
	hall_y_16 = ((uint16_t)buffer_Read_data[5]) << 8 | ((uint16_t)buffer_Read_data[6]);
    5204:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    5208:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    520c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5210:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	
	hall_z_16 = ((uint16_t)buffer_Read_data[7]) << 8 | ((uint16_t)buffer_Read_data[8]);
    5214:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    5218:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    521c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5220:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
	
	hall_temp_16 = ((uint16_t)buffer_Read_data[1]) << 8 | ((uint16_t)buffer_Read_data[2]);
    5224:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    5228:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    522c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5230:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    5234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5238:	41008000 	.word	0x41008000
    523c:	20000c10 	.word	0x20000c10
    5240:	20000494 	.word	0x20000494
    5244:	00001bf1 	.word	0x00001bf1
    5248:	20000124 	.word	0x20000124
    524c:	00001d25 	.word	0x00001d25
    5250:	00001d59 	.word	0x00001d59

00005254 <getHall_z>:
}

uint16_t getHall_z(void)
{
	return hall_z_16;
}
    5254:	4b01      	ldr	r3, [pc, #4]	; (525c <getHall_z+0x8>)
    5256:	f8b3 004e 	ldrh.w	r0, [r3, #78]	; 0x4e
    525a:	4770      	bx	lr
    525c:	20000494 	.word	0x20000494

00005260 <getHall_x>:

uint16_t getHall_x(void)
{
	return hall_x_16;
}
    5260:	4b01      	ldr	r3, [pc, #4]	; (5268 <getHall_x+0x8>)
    5262:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
    5266:	4770      	bx	lr
    5268:	20000494 	.word	0x20000494

0000526c <getHall_y>:

uint16_t getHall_y(void)
{
	return hall_y_16;
}
    526c:	4b01      	ldr	r3, [pc, #4]	; (5274 <getHall_y+0x8>)
    526e:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
    5272:	4770      	bx	lr
    5274:	20000494 	.word	0x20000494

00005278 <__aeabi_drsub>:
    5278:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    527c:	e002      	b.n	5284 <__adddf3>
    527e:	bf00      	nop

00005280 <__aeabi_dsub>:
    5280:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00005284 <__adddf3>:
    5284:	b530      	push	{r4, r5, lr}
    5286:	ea4f 0441 	mov.w	r4, r1, lsl #1
    528a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    528e:	ea94 0f05 	teq	r4, r5
    5292:	bf08      	it	eq
    5294:	ea90 0f02 	teqeq	r0, r2
    5298:	bf1f      	itttt	ne
    529a:	ea54 0c00 	orrsne.w	ip, r4, r0
    529e:	ea55 0c02 	orrsne.w	ip, r5, r2
    52a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    52a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    52aa:	f000 80e2 	beq.w	5472 <__adddf3+0x1ee>
    52ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
    52b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    52b6:	bfb8      	it	lt
    52b8:	426d      	neglt	r5, r5
    52ba:	dd0c      	ble.n	52d6 <__adddf3+0x52>
    52bc:	442c      	add	r4, r5
    52be:	ea80 0202 	eor.w	r2, r0, r2
    52c2:	ea81 0303 	eor.w	r3, r1, r3
    52c6:	ea82 0000 	eor.w	r0, r2, r0
    52ca:	ea83 0101 	eor.w	r1, r3, r1
    52ce:	ea80 0202 	eor.w	r2, r0, r2
    52d2:	ea81 0303 	eor.w	r3, r1, r3
    52d6:	2d36      	cmp	r5, #54	; 0x36
    52d8:	bf88      	it	hi
    52da:	bd30      	pophi	{r4, r5, pc}
    52dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    52e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    52e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    52e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    52ec:	d002      	beq.n	52f4 <__adddf3+0x70>
    52ee:	4240      	negs	r0, r0
    52f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    52f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    52f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    52fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    5300:	d002      	beq.n	5308 <__adddf3+0x84>
    5302:	4252      	negs	r2, r2
    5304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5308:	ea94 0f05 	teq	r4, r5
    530c:	f000 80a7 	beq.w	545e <__adddf3+0x1da>
    5310:	f1a4 0401 	sub.w	r4, r4, #1
    5314:	f1d5 0e20 	rsbs	lr, r5, #32
    5318:	db0d      	blt.n	5336 <__adddf3+0xb2>
    531a:	fa02 fc0e 	lsl.w	ip, r2, lr
    531e:	fa22 f205 	lsr.w	r2, r2, r5
    5322:	1880      	adds	r0, r0, r2
    5324:	f141 0100 	adc.w	r1, r1, #0
    5328:	fa03 f20e 	lsl.w	r2, r3, lr
    532c:	1880      	adds	r0, r0, r2
    532e:	fa43 f305 	asr.w	r3, r3, r5
    5332:	4159      	adcs	r1, r3
    5334:	e00e      	b.n	5354 <__adddf3+0xd0>
    5336:	f1a5 0520 	sub.w	r5, r5, #32
    533a:	f10e 0e20 	add.w	lr, lr, #32
    533e:	2a01      	cmp	r2, #1
    5340:	fa03 fc0e 	lsl.w	ip, r3, lr
    5344:	bf28      	it	cs
    5346:	f04c 0c02 	orrcs.w	ip, ip, #2
    534a:	fa43 f305 	asr.w	r3, r3, r5
    534e:	18c0      	adds	r0, r0, r3
    5350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    5354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    5358:	d507      	bpl.n	536a <__adddf3+0xe6>
    535a:	f04f 0e00 	mov.w	lr, #0
    535e:	f1dc 0c00 	rsbs	ip, ip, #0
    5362:	eb7e 0000 	sbcs.w	r0, lr, r0
    5366:	eb6e 0101 	sbc.w	r1, lr, r1
    536a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    536e:	d31b      	bcc.n	53a8 <__adddf3+0x124>
    5370:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    5374:	d30c      	bcc.n	5390 <__adddf3+0x10c>
    5376:	0849      	lsrs	r1, r1, #1
    5378:	ea5f 0030 	movs.w	r0, r0, rrx
    537c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    5380:	f104 0401 	add.w	r4, r4, #1
    5384:	ea4f 5244 	mov.w	r2, r4, lsl #21
    5388:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    538c:	f080 809a 	bcs.w	54c4 <__adddf3+0x240>
    5390:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    5394:	bf08      	it	eq
    5396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    539a:	f150 0000 	adcs.w	r0, r0, #0
    539e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    53a2:	ea41 0105 	orr.w	r1, r1, r5
    53a6:	bd30      	pop	{r4, r5, pc}
    53a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    53ac:	4140      	adcs	r0, r0
    53ae:	eb41 0101 	adc.w	r1, r1, r1
    53b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    53b6:	f1a4 0401 	sub.w	r4, r4, #1
    53ba:	d1e9      	bne.n	5390 <__adddf3+0x10c>
    53bc:	f091 0f00 	teq	r1, #0
    53c0:	bf04      	itt	eq
    53c2:	4601      	moveq	r1, r0
    53c4:	2000      	moveq	r0, #0
    53c6:	fab1 f381 	clz	r3, r1
    53ca:	bf08      	it	eq
    53cc:	3320      	addeq	r3, #32
    53ce:	f1a3 030b 	sub.w	r3, r3, #11
    53d2:	f1b3 0220 	subs.w	r2, r3, #32
    53d6:	da0c      	bge.n	53f2 <__adddf3+0x16e>
    53d8:	320c      	adds	r2, #12
    53da:	dd08      	ble.n	53ee <__adddf3+0x16a>
    53dc:	f102 0c14 	add.w	ip, r2, #20
    53e0:	f1c2 020c 	rsb	r2, r2, #12
    53e4:	fa01 f00c 	lsl.w	r0, r1, ip
    53e8:	fa21 f102 	lsr.w	r1, r1, r2
    53ec:	e00c      	b.n	5408 <__adddf3+0x184>
    53ee:	f102 0214 	add.w	r2, r2, #20
    53f2:	bfd8      	it	le
    53f4:	f1c2 0c20 	rsble	ip, r2, #32
    53f8:	fa01 f102 	lsl.w	r1, r1, r2
    53fc:	fa20 fc0c 	lsr.w	ip, r0, ip
    5400:	bfdc      	itt	le
    5402:	ea41 010c 	orrle.w	r1, r1, ip
    5406:	4090      	lslle	r0, r2
    5408:	1ae4      	subs	r4, r4, r3
    540a:	bfa2      	ittt	ge
    540c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    5410:	4329      	orrge	r1, r5
    5412:	bd30      	popge	{r4, r5, pc}
    5414:	ea6f 0404 	mvn.w	r4, r4
    5418:	3c1f      	subs	r4, #31
    541a:	da1c      	bge.n	5456 <__adddf3+0x1d2>
    541c:	340c      	adds	r4, #12
    541e:	dc0e      	bgt.n	543e <__adddf3+0x1ba>
    5420:	f104 0414 	add.w	r4, r4, #20
    5424:	f1c4 0220 	rsb	r2, r4, #32
    5428:	fa20 f004 	lsr.w	r0, r0, r4
    542c:	fa01 f302 	lsl.w	r3, r1, r2
    5430:	ea40 0003 	orr.w	r0, r0, r3
    5434:	fa21 f304 	lsr.w	r3, r1, r4
    5438:	ea45 0103 	orr.w	r1, r5, r3
    543c:	bd30      	pop	{r4, r5, pc}
    543e:	f1c4 040c 	rsb	r4, r4, #12
    5442:	f1c4 0220 	rsb	r2, r4, #32
    5446:	fa20 f002 	lsr.w	r0, r0, r2
    544a:	fa01 f304 	lsl.w	r3, r1, r4
    544e:	ea40 0003 	orr.w	r0, r0, r3
    5452:	4629      	mov	r1, r5
    5454:	bd30      	pop	{r4, r5, pc}
    5456:	fa21 f004 	lsr.w	r0, r1, r4
    545a:	4629      	mov	r1, r5
    545c:	bd30      	pop	{r4, r5, pc}
    545e:	f094 0f00 	teq	r4, #0
    5462:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    5466:	bf06      	itte	eq
    5468:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    546c:	3401      	addeq	r4, #1
    546e:	3d01      	subne	r5, #1
    5470:	e74e      	b.n	5310 <__adddf3+0x8c>
    5472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    5476:	bf18      	it	ne
    5478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    547c:	d029      	beq.n	54d2 <__adddf3+0x24e>
    547e:	ea94 0f05 	teq	r4, r5
    5482:	bf08      	it	eq
    5484:	ea90 0f02 	teqeq	r0, r2
    5488:	d005      	beq.n	5496 <__adddf3+0x212>
    548a:	ea54 0c00 	orrs.w	ip, r4, r0
    548e:	bf04      	itt	eq
    5490:	4619      	moveq	r1, r3
    5492:	4610      	moveq	r0, r2
    5494:	bd30      	pop	{r4, r5, pc}
    5496:	ea91 0f03 	teq	r1, r3
    549a:	bf1e      	ittt	ne
    549c:	2100      	movne	r1, #0
    549e:	2000      	movne	r0, #0
    54a0:	bd30      	popne	{r4, r5, pc}
    54a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    54a6:	d105      	bne.n	54b4 <__adddf3+0x230>
    54a8:	0040      	lsls	r0, r0, #1
    54aa:	4149      	adcs	r1, r1
    54ac:	bf28      	it	cs
    54ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    54b2:	bd30      	pop	{r4, r5, pc}
    54b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    54b8:	bf3c      	itt	cc
    54ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    54be:	bd30      	popcc	{r4, r5, pc}
    54c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    54c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    54c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    54cc:	f04f 0000 	mov.w	r0, #0
    54d0:	bd30      	pop	{r4, r5, pc}
    54d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    54d6:	bf1a      	itte	ne
    54d8:	4619      	movne	r1, r3
    54da:	4610      	movne	r0, r2
    54dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    54e0:	bf1c      	itt	ne
    54e2:	460b      	movne	r3, r1
    54e4:	4602      	movne	r2, r0
    54e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    54ea:	bf06      	itte	eq
    54ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    54f0:	ea91 0f03 	teqeq	r1, r3
    54f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    54f8:	bd30      	pop	{r4, r5, pc}
    54fa:	bf00      	nop

000054fc <__aeabi_ui2d>:
    54fc:	f090 0f00 	teq	r0, #0
    5500:	bf04      	itt	eq
    5502:	2100      	moveq	r1, #0
    5504:	4770      	bxeq	lr
    5506:	b530      	push	{r4, r5, lr}
    5508:	f44f 6480 	mov.w	r4, #1024	; 0x400
    550c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    5510:	f04f 0500 	mov.w	r5, #0
    5514:	f04f 0100 	mov.w	r1, #0
    5518:	e750      	b.n	53bc <__adddf3+0x138>
    551a:	bf00      	nop

0000551c <__aeabi_i2d>:
    551c:	f090 0f00 	teq	r0, #0
    5520:	bf04      	itt	eq
    5522:	2100      	moveq	r1, #0
    5524:	4770      	bxeq	lr
    5526:	b530      	push	{r4, r5, lr}
    5528:	f44f 6480 	mov.w	r4, #1024	; 0x400
    552c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    5530:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    5534:	bf48      	it	mi
    5536:	4240      	negmi	r0, r0
    5538:	f04f 0100 	mov.w	r1, #0
    553c:	e73e      	b.n	53bc <__adddf3+0x138>
    553e:	bf00      	nop

00005540 <__aeabi_f2d>:
    5540:	0042      	lsls	r2, r0, #1
    5542:	ea4f 01e2 	mov.w	r1, r2, asr #3
    5546:	ea4f 0131 	mov.w	r1, r1, rrx
    554a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    554e:	bf1f      	itttt	ne
    5550:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    5554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    5558:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    555c:	4770      	bxne	lr
    555e:	f092 0f00 	teq	r2, #0
    5562:	bf14      	ite	ne
    5564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    5568:	4770      	bxeq	lr
    556a:	b530      	push	{r4, r5, lr}
    556c:	f44f 7460 	mov.w	r4, #896	; 0x380
    5570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    5574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    5578:	e720      	b.n	53bc <__adddf3+0x138>
    557a:	bf00      	nop

0000557c <__aeabi_ul2d>:
    557c:	ea50 0201 	orrs.w	r2, r0, r1
    5580:	bf08      	it	eq
    5582:	4770      	bxeq	lr
    5584:	b530      	push	{r4, r5, lr}
    5586:	f04f 0500 	mov.w	r5, #0
    558a:	e00a      	b.n	55a2 <__aeabi_l2d+0x16>

0000558c <__aeabi_l2d>:
    558c:	ea50 0201 	orrs.w	r2, r0, r1
    5590:	bf08      	it	eq
    5592:	4770      	bxeq	lr
    5594:	b530      	push	{r4, r5, lr}
    5596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    559a:	d502      	bpl.n	55a2 <__aeabi_l2d+0x16>
    559c:	4240      	negs	r0, r0
    559e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    55a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    55a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    55aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    55ae:	f43f aedc 	beq.w	536a <__adddf3+0xe6>
    55b2:	f04f 0203 	mov.w	r2, #3
    55b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    55ba:	bf18      	it	ne
    55bc:	3203      	addne	r2, #3
    55be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    55c2:	bf18      	it	ne
    55c4:	3203      	addne	r2, #3
    55c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    55ca:	f1c2 0320 	rsb	r3, r2, #32
    55ce:	fa00 fc03 	lsl.w	ip, r0, r3
    55d2:	fa20 f002 	lsr.w	r0, r0, r2
    55d6:	fa01 fe03 	lsl.w	lr, r1, r3
    55da:	ea40 000e 	orr.w	r0, r0, lr
    55de:	fa21 f102 	lsr.w	r1, r1, r2
    55e2:	4414      	add	r4, r2
    55e4:	e6c1      	b.n	536a <__adddf3+0xe6>
    55e6:	bf00      	nop

000055e8 <__aeabi_dmul>:
    55e8:	b570      	push	{r4, r5, r6, lr}
    55ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
    55ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    55f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    55f6:	bf1d      	ittte	ne
    55f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    55fc:	ea94 0f0c 	teqne	r4, ip
    5600:	ea95 0f0c 	teqne	r5, ip
    5604:	f000 f8de 	bleq	57c4 <__aeabi_dmul+0x1dc>
    5608:	442c      	add	r4, r5
    560a:	ea81 0603 	eor.w	r6, r1, r3
    560e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    5612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    5616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    561a:	bf18      	it	ne
    561c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    5620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    5624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    5628:	d038      	beq.n	569c <__aeabi_dmul+0xb4>
    562a:	fba0 ce02 	umull	ip, lr, r0, r2
    562e:	f04f 0500 	mov.w	r5, #0
    5632:	fbe1 e502 	umlal	lr, r5, r1, r2
    5636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    563a:	fbe0 e503 	umlal	lr, r5, r0, r3
    563e:	f04f 0600 	mov.w	r6, #0
    5642:	fbe1 5603 	umlal	r5, r6, r1, r3
    5646:	f09c 0f00 	teq	ip, #0
    564a:	bf18      	it	ne
    564c:	f04e 0e01 	orrne.w	lr, lr, #1
    5650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    5654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    5658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    565c:	d204      	bcs.n	5668 <__aeabi_dmul+0x80>
    565e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    5662:	416d      	adcs	r5, r5
    5664:	eb46 0606 	adc.w	r6, r6, r6
    5668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    566c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    5670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    5674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    5678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    567c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    5680:	bf88      	it	hi
    5682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    5686:	d81e      	bhi.n	56c6 <__aeabi_dmul+0xde>
    5688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    568c:	bf08      	it	eq
    568e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    5692:	f150 0000 	adcs.w	r0, r0, #0
    5696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    569a:	bd70      	pop	{r4, r5, r6, pc}
    569c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    56a0:	ea46 0101 	orr.w	r1, r6, r1
    56a4:	ea40 0002 	orr.w	r0, r0, r2
    56a8:	ea81 0103 	eor.w	r1, r1, r3
    56ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    56b0:	bfc2      	ittt	gt
    56b2:	ebd4 050c 	rsbsgt	r5, r4, ip
    56b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    56ba:	bd70      	popgt	{r4, r5, r6, pc}
    56bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    56c0:	f04f 0e00 	mov.w	lr, #0
    56c4:	3c01      	subs	r4, #1
    56c6:	f300 80ab 	bgt.w	5820 <__aeabi_dmul+0x238>
    56ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
    56ce:	bfde      	ittt	le
    56d0:	2000      	movle	r0, #0
    56d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    56d6:	bd70      	pople	{r4, r5, r6, pc}
    56d8:	f1c4 0400 	rsb	r4, r4, #0
    56dc:	3c20      	subs	r4, #32
    56de:	da35      	bge.n	574c <__aeabi_dmul+0x164>
    56e0:	340c      	adds	r4, #12
    56e2:	dc1b      	bgt.n	571c <__aeabi_dmul+0x134>
    56e4:	f104 0414 	add.w	r4, r4, #20
    56e8:	f1c4 0520 	rsb	r5, r4, #32
    56ec:	fa00 f305 	lsl.w	r3, r0, r5
    56f0:	fa20 f004 	lsr.w	r0, r0, r4
    56f4:	fa01 f205 	lsl.w	r2, r1, r5
    56f8:	ea40 0002 	orr.w	r0, r0, r2
    56fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    5700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    5704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    5708:	fa21 f604 	lsr.w	r6, r1, r4
    570c:	eb42 0106 	adc.w	r1, r2, r6
    5710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    5714:	bf08      	it	eq
    5716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    571a:	bd70      	pop	{r4, r5, r6, pc}
    571c:	f1c4 040c 	rsb	r4, r4, #12
    5720:	f1c4 0520 	rsb	r5, r4, #32
    5724:	fa00 f304 	lsl.w	r3, r0, r4
    5728:	fa20 f005 	lsr.w	r0, r0, r5
    572c:	fa01 f204 	lsl.w	r2, r1, r4
    5730:	ea40 0002 	orr.w	r0, r0, r2
    5734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    573c:	f141 0100 	adc.w	r1, r1, #0
    5740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    5744:	bf08      	it	eq
    5746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    574a:	bd70      	pop	{r4, r5, r6, pc}
    574c:	f1c4 0520 	rsb	r5, r4, #32
    5750:	fa00 f205 	lsl.w	r2, r0, r5
    5754:	ea4e 0e02 	orr.w	lr, lr, r2
    5758:	fa20 f304 	lsr.w	r3, r0, r4
    575c:	fa01 f205 	lsl.w	r2, r1, r5
    5760:	ea43 0302 	orr.w	r3, r3, r2
    5764:	fa21 f004 	lsr.w	r0, r1, r4
    5768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    576c:	fa21 f204 	lsr.w	r2, r1, r4
    5770:	ea20 0002 	bic.w	r0, r0, r2
    5774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    5778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    577c:	bf08      	it	eq
    577e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    5782:	bd70      	pop	{r4, r5, r6, pc}
    5784:	f094 0f00 	teq	r4, #0
    5788:	d10f      	bne.n	57aa <__aeabi_dmul+0x1c2>
    578a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    578e:	0040      	lsls	r0, r0, #1
    5790:	eb41 0101 	adc.w	r1, r1, r1
    5794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5798:	bf08      	it	eq
    579a:	3c01      	subeq	r4, #1
    579c:	d0f7      	beq.n	578e <__aeabi_dmul+0x1a6>
    579e:	ea41 0106 	orr.w	r1, r1, r6
    57a2:	f095 0f00 	teq	r5, #0
    57a6:	bf18      	it	ne
    57a8:	4770      	bxne	lr
    57aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    57ae:	0052      	lsls	r2, r2, #1
    57b0:	eb43 0303 	adc.w	r3, r3, r3
    57b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    57b8:	bf08      	it	eq
    57ba:	3d01      	subeq	r5, #1
    57bc:	d0f7      	beq.n	57ae <__aeabi_dmul+0x1c6>
    57be:	ea43 0306 	orr.w	r3, r3, r6
    57c2:	4770      	bx	lr
    57c4:	ea94 0f0c 	teq	r4, ip
    57c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    57cc:	bf18      	it	ne
    57ce:	ea95 0f0c 	teqne	r5, ip
    57d2:	d00c      	beq.n	57ee <__aeabi_dmul+0x206>
    57d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    57d8:	bf18      	it	ne
    57da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    57de:	d1d1      	bne.n	5784 <__aeabi_dmul+0x19c>
    57e0:	ea81 0103 	eor.w	r1, r1, r3
    57e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    57e8:	f04f 0000 	mov.w	r0, #0
    57ec:	bd70      	pop	{r4, r5, r6, pc}
    57ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    57f2:	bf06      	itte	eq
    57f4:	4610      	moveq	r0, r2
    57f6:	4619      	moveq	r1, r3
    57f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    57fc:	d019      	beq.n	5832 <__aeabi_dmul+0x24a>
    57fe:	ea94 0f0c 	teq	r4, ip
    5802:	d102      	bne.n	580a <__aeabi_dmul+0x222>
    5804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    5808:	d113      	bne.n	5832 <__aeabi_dmul+0x24a>
    580a:	ea95 0f0c 	teq	r5, ip
    580e:	d105      	bne.n	581c <__aeabi_dmul+0x234>
    5810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    5814:	bf1c      	itt	ne
    5816:	4610      	movne	r0, r2
    5818:	4619      	movne	r1, r3
    581a:	d10a      	bne.n	5832 <__aeabi_dmul+0x24a>
    581c:	ea81 0103 	eor.w	r1, r1, r3
    5820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    5828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    582c:	f04f 0000 	mov.w	r0, #0
    5830:	bd70      	pop	{r4, r5, r6, pc}
    5832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    5836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    583a:	bd70      	pop	{r4, r5, r6, pc}

0000583c <__aeabi_ddiv>:
    583c:	b570      	push	{r4, r5, r6, lr}
    583e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    5842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    5846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    584a:	bf1d      	ittte	ne
    584c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    5850:	ea94 0f0c 	teqne	r4, ip
    5854:	ea95 0f0c 	teqne	r5, ip
    5858:	f000 f8a7 	bleq	59aa <__aeabi_ddiv+0x16e>
    585c:	eba4 0405 	sub.w	r4, r4, r5
    5860:	ea81 0e03 	eor.w	lr, r1, r3
    5864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    5868:	ea4f 3101 	mov.w	r1, r1, lsl #12
    586c:	f000 8088 	beq.w	5980 <__aeabi_ddiv+0x144>
    5870:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    5878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    587c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    5880:	ea4f 2202 	mov.w	r2, r2, lsl #8
    5884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    5888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    588c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    5890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    5894:	429d      	cmp	r5, r3
    5896:	bf08      	it	eq
    5898:	4296      	cmpeq	r6, r2
    589a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    589e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    58a2:	d202      	bcs.n	58aa <__aeabi_ddiv+0x6e>
    58a4:	085b      	lsrs	r3, r3, #1
    58a6:	ea4f 0232 	mov.w	r2, r2, rrx
    58aa:	1ab6      	subs	r6, r6, r2
    58ac:	eb65 0503 	sbc.w	r5, r5, r3
    58b0:	085b      	lsrs	r3, r3, #1
    58b2:	ea4f 0232 	mov.w	r2, r2, rrx
    58b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    58ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    58be:	ebb6 0e02 	subs.w	lr, r6, r2
    58c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    58c6:	bf22      	ittt	cs
    58c8:	1ab6      	subcs	r6, r6, r2
    58ca:	4675      	movcs	r5, lr
    58cc:	ea40 000c 	orrcs.w	r0, r0, ip
    58d0:	085b      	lsrs	r3, r3, #1
    58d2:	ea4f 0232 	mov.w	r2, r2, rrx
    58d6:	ebb6 0e02 	subs.w	lr, r6, r2
    58da:	eb75 0e03 	sbcs.w	lr, r5, r3
    58de:	bf22      	ittt	cs
    58e0:	1ab6      	subcs	r6, r6, r2
    58e2:	4675      	movcs	r5, lr
    58e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    58e8:	085b      	lsrs	r3, r3, #1
    58ea:	ea4f 0232 	mov.w	r2, r2, rrx
    58ee:	ebb6 0e02 	subs.w	lr, r6, r2
    58f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    58f6:	bf22      	ittt	cs
    58f8:	1ab6      	subcs	r6, r6, r2
    58fa:	4675      	movcs	r5, lr
    58fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    5900:	085b      	lsrs	r3, r3, #1
    5902:	ea4f 0232 	mov.w	r2, r2, rrx
    5906:	ebb6 0e02 	subs.w	lr, r6, r2
    590a:	eb75 0e03 	sbcs.w	lr, r5, r3
    590e:	bf22      	ittt	cs
    5910:	1ab6      	subcs	r6, r6, r2
    5912:	4675      	movcs	r5, lr
    5914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    5918:	ea55 0e06 	orrs.w	lr, r5, r6
    591c:	d018      	beq.n	5950 <__aeabi_ddiv+0x114>
    591e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    5922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    5926:	ea4f 1606 	mov.w	r6, r6, lsl #4
    592a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    592e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    5932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    5936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    593a:	d1c0      	bne.n	58be <__aeabi_ddiv+0x82>
    593c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5940:	d10b      	bne.n	595a <__aeabi_ddiv+0x11e>
    5942:	ea41 0100 	orr.w	r1, r1, r0
    5946:	f04f 0000 	mov.w	r0, #0
    594a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    594e:	e7b6      	b.n	58be <__aeabi_ddiv+0x82>
    5950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5954:	bf04      	itt	eq
    5956:	4301      	orreq	r1, r0
    5958:	2000      	moveq	r0, #0
    595a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    595e:	bf88      	it	hi
    5960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    5964:	f63f aeaf 	bhi.w	56c6 <__aeabi_dmul+0xde>
    5968:	ebb5 0c03 	subs.w	ip, r5, r3
    596c:	bf04      	itt	eq
    596e:	ebb6 0c02 	subseq.w	ip, r6, r2
    5972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    5976:	f150 0000 	adcs.w	r0, r0, #0
    597a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    597e:	bd70      	pop	{r4, r5, r6, pc}
    5980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    5984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    5988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    598c:	bfc2      	ittt	gt
    598e:	ebd4 050c 	rsbsgt	r5, r4, ip
    5992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    5996:	bd70      	popgt	{r4, r5, r6, pc}
    5998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    599c:	f04f 0e00 	mov.w	lr, #0
    59a0:	3c01      	subs	r4, #1
    59a2:	e690      	b.n	56c6 <__aeabi_dmul+0xde>
    59a4:	ea45 0e06 	orr.w	lr, r5, r6
    59a8:	e68d      	b.n	56c6 <__aeabi_dmul+0xde>
    59aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    59ae:	ea94 0f0c 	teq	r4, ip
    59b2:	bf08      	it	eq
    59b4:	ea95 0f0c 	teqeq	r5, ip
    59b8:	f43f af3b 	beq.w	5832 <__aeabi_dmul+0x24a>
    59bc:	ea94 0f0c 	teq	r4, ip
    59c0:	d10a      	bne.n	59d8 <__aeabi_ddiv+0x19c>
    59c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    59c6:	f47f af34 	bne.w	5832 <__aeabi_dmul+0x24a>
    59ca:	ea95 0f0c 	teq	r5, ip
    59ce:	f47f af25 	bne.w	581c <__aeabi_dmul+0x234>
    59d2:	4610      	mov	r0, r2
    59d4:	4619      	mov	r1, r3
    59d6:	e72c      	b.n	5832 <__aeabi_dmul+0x24a>
    59d8:	ea95 0f0c 	teq	r5, ip
    59dc:	d106      	bne.n	59ec <__aeabi_ddiv+0x1b0>
    59de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    59e2:	f43f aefd 	beq.w	57e0 <__aeabi_dmul+0x1f8>
    59e6:	4610      	mov	r0, r2
    59e8:	4619      	mov	r1, r3
    59ea:	e722      	b.n	5832 <__aeabi_dmul+0x24a>
    59ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    59f0:	bf18      	it	ne
    59f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    59f6:	f47f aec5 	bne.w	5784 <__aeabi_dmul+0x19c>
    59fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    59fe:	f47f af0d 	bne.w	581c <__aeabi_dmul+0x234>
    5a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    5a06:	f47f aeeb 	bne.w	57e0 <__aeabi_dmul+0x1f8>
    5a0a:	e712      	b.n	5832 <__aeabi_dmul+0x24a>

00005a0c <__gedf2>:
    5a0c:	f04f 3cff 	mov.w	ip, #4294967295
    5a10:	e006      	b.n	5a20 <__cmpdf2+0x4>
    5a12:	bf00      	nop

00005a14 <__ledf2>:
    5a14:	f04f 0c01 	mov.w	ip, #1
    5a18:	e002      	b.n	5a20 <__cmpdf2+0x4>
    5a1a:	bf00      	nop

00005a1c <__cmpdf2>:
    5a1c:	f04f 0c01 	mov.w	ip, #1
    5a20:	f84d cd04 	str.w	ip, [sp, #-4]!
    5a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    5a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    5a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5a30:	bf18      	it	ne
    5a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    5a36:	d01b      	beq.n	5a70 <__cmpdf2+0x54>
    5a38:	b001      	add	sp, #4
    5a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    5a3e:	bf0c      	ite	eq
    5a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    5a44:	ea91 0f03 	teqne	r1, r3
    5a48:	bf02      	ittt	eq
    5a4a:	ea90 0f02 	teqeq	r0, r2
    5a4e:	2000      	moveq	r0, #0
    5a50:	4770      	bxeq	lr
    5a52:	f110 0f00 	cmn.w	r0, #0
    5a56:	ea91 0f03 	teq	r1, r3
    5a5a:	bf58      	it	pl
    5a5c:	4299      	cmppl	r1, r3
    5a5e:	bf08      	it	eq
    5a60:	4290      	cmpeq	r0, r2
    5a62:	bf2c      	ite	cs
    5a64:	17d8      	asrcs	r0, r3, #31
    5a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    5a6a:	f040 0001 	orr.w	r0, r0, #1
    5a6e:	4770      	bx	lr
    5a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    5a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    5a78:	d102      	bne.n	5a80 <__cmpdf2+0x64>
    5a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    5a7e:	d107      	bne.n	5a90 <__cmpdf2+0x74>
    5a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    5a88:	d1d6      	bne.n	5a38 <__cmpdf2+0x1c>
    5a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    5a8e:	d0d3      	beq.n	5a38 <__cmpdf2+0x1c>
    5a90:	f85d 0b04 	ldr.w	r0, [sp], #4
    5a94:	4770      	bx	lr
    5a96:	bf00      	nop

00005a98 <__aeabi_cdrcmple>:
    5a98:	4684      	mov	ip, r0
    5a9a:	4610      	mov	r0, r2
    5a9c:	4662      	mov	r2, ip
    5a9e:	468c      	mov	ip, r1
    5aa0:	4619      	mov	r1, r3
    5aa2:	4663      	mov	r3, ip
    5aa4:	e000      	b.n	5aa8 <__aeabi_cdcmpeq>
    5aa6:	bf00      	nop

00005aa8 <__aeabi_cdcmpeq>:
    5aa8:	b501      	push	{r0, lr}
    5aaa:	f7ff ffb7 	bl	5a1c <__cmpdf2>
    5aae:	2800      	cmp	r0, #0
    5ab0:	bf48      	it	mi
    5ab2:	f110 0f00 	cmnmi.w	r0, #0
    5ab6:	bd01      	pop	{r0, pc}

00005ab8 <__aeabi_dcmpeq>:
    5ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
    5abc:	f7ff fff4 	bl	5aa8 <__aeabi_cdcmpeq>
    5ac0:	bf0c      	ite	eq
    5ac2:	2001      	moveq	r0, #1
    5ac4:	2000      	movne	r0, #0
    5ac6:	f85d fb08 	ldr.w	pc, [sp], #8
    5aca:	bf00      	nop

00005acc <__aeabi_dcmplt>:
    5acc:	f84d ed08 	str.w	lr, [sp, #-8]!
    5ad0:	f7ff ffea 	bl	5aa8 <__aeabi_cdcmpeq>
    5ad4:	bf34      	ite	cc
    5ad6:	2001      	movcc	r0, #1
    5ad8:	2000      	movcs	r0, #0
    5ada:	f85d fb08 	ldr.w	pc, [sp], #8
    5ade:	bf00      	nop

00005ae0 <__aeabi_dcmple>:
    5ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
    5ae4:	f7ff ffe0 	bl	5aa8 <__aeabi_cdcmpeq>
    5ae8:	bf94      	ite	ls
    5aea:	2001      	movls	r0, #1
    5aec:	2000      	movhi	r0, #0
    5aee:	f85d fb08 	ldr.w	pc, [sp], #8
    5af2:	bf00      	nop

00005af4 <__aeabi_dcmpge>:
    5af4:	f84d ed08 	str.w	lr, [sp, #-8]!
    5af8:	f7ff ffce 	bl	5a98 <__aeabi_cdrcmple>
    5afc:	bf94      	ite	ls
    5afe:	2001      	movls	r0, #1
    5b00:	2000      	movhi	r0, #0
    5b02:	f85d fb08 	ldr.w	pc, [sp], #8
    5b06:	bf00      	nop

00005b08 <__aeabi_dcmpgt>:
    5b08:	f84d ed08 	str.w	lr, [sp, #-8]!
    5b0c:	f7ff ffc4 	bl	5a98 <__aeabi_cdrcmple>
    5b10:	bf34      	ite	cc
    5b12:	2001      	movcc	r0, #1
    5b14:	2000      	movcs	r0, #0
    5b16:	f85d fb08 	ldr.w	pc, [sp], #8
    5b1a:	bf00      	nop

00005b1c <__aeabi_dcmpun>:
    5b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    5b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    5b24:	d102      	bne.n	5b2c <__aeabi_dcmpun+0x10>
    5b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    5b2a:	d10a      	bne.n	5b42 <__aeabi_dcmpun+0x26>
    5b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    5b34:	d102      	bne.n	5b3c <__aeabi_dcmpun+0x20>
    5b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    5b3a:	d102      	bne.n	5b42 <__aeabi_dcmpun+0x26>
    5b3c:	f04f 0000 	mov.w	r0, #0
    5b40:	4770      	bx	lr
    5b42:	f04f 0001 	mov.w	r0, #1
    5b46:	4770      	bx	lr

00005b48 <__aeabi_ldivmod>:
    5b48:	b97b      	cbnz	r3, 5b6a <__aeabi_ldivmod+0x22>
    5b4a:	b972      	cbnz	r2, 5b6a <__aeabi_ldivmod+0x22>
    5b4c:	2900      	cmp	r1, #0
    5b4e:	bfbe      	ittt	lt
    5b50:	2000      	movlt	r0, #0
    5b52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    5b56:	e006      	blt.n	5b66 <__aeabi_ldivmod+0x1e>
    5b58:	bf08      	it	eq
    5b5a:	2800      	cmpeq	r0, #0
    5b5c:	bf1c      	itt	ne
    5b5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    5b62:	f04f 30ff 	movne.w	r0, #4294967295
    5b66:	f000 b9ad 	b.w	5ec4 <__aeabi_idiv0>
    5b6a:	f1ad 0c08 	sub.w	ip, sp, #8
    5b6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    5b72:	2900      	cmp	r1, #0
    5b74:	db09      	blt.n	5b8a <__aeabi_ldivmod+0x42>
    5b76:	2b00      	cmp	r3, #0
    5b78:	db1a      	blt.n	5bb0 <__aeabi_ldivmod+0x68>
    5b7a:	f000 f835 	bl	5be8 <__udivmoddi4>
    5b7e:	f8dd e004 	ldr.w	lr, [sp, #4]
    5b82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5b86:	b004      	add	sp, #16
    5b88:	4770      	bx	lr
    5b8a:	4240      	negs	r0, r0
    5b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5b90:	2b00      	cmp	r3, #0
    5b92:	db1b      	blt.n	5bcc <__aeabi_ldivmod+0x84>
    5b94:	f000 f828 	bl	5be8 <__udivmoddi4>
    5b98:	f8dd e004 	ldr.w	lr, [sp, #4]
    5b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5ba0:	b004      	add	sp, #16
    5ba2:	4240      	negs	r0, r0
    5ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5ba8:	4252      	negs	r2, r2
    5baa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5bae:	4770      	bx	lr
    5bb0:	4252      	negs	r2, r2
    5bb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5bb6:	f000 f817 	bl	5be8 <__udivmoddi4>
    5bba:	f8dd e004 	ldr.w	lr, [sp, #4]
    5bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5bc2:	b004      	add	sp, #16
    5bc4:	4240      	negs	r0, r0
    5bc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5bca:	4770      	bx	lr
    5bcc:	4252      	negs	r2, r2
    5bce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5bd2:	f000 f809 	bl	5be8 <__udivmoddi4>
    5bd6:	f8dd e004 	ldr.w	lr, [sp, #4]
    5bda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5bde:	b004      	add	sp, #16
    5be0:	4252      	negs	r2, r2
    5be2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5be6:	4770      	bx	lr

00005be8 <__udivmoddi4>:
    5be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5bec:	468c      	mov	ip, r1
    5bee:	460d      	mov	r5, r1
    5bf0:	4604      	mov	r4, r0
    5bf2:	9e08      	ldr	r6, [sp, #32]
    5bf4:	2b00      	cmp	r3, #0
    5bf6:	d151      	bne.n	5c9c <__udivmoddi4+0xb4>
    5bf8:	428a      	cmp	r2, r1
    5bfa:	4617      	mov	r7, r2
    5bfc:	d96d      	bls.n	5cda <__udivmoddi4+0xf2>
    5bfe:	fab2 fe82 	clz	lr, r2
    5c02:	f1be 0f00 	cmp.w	lr, #0
    5c06:	d00b      	beq.n	5c20 <__udivmoddi4+0x38>
    5c08:	f1ce 0c20 	rsb	ip, lr, #32
    5c0c:	fa01 f50e 	lsl.w	r5, r1, lr
    5c10:	fa20 fc0c 	lsr.w	ip, r0, ip
    5c14:	fa02 f70e 	lsl.w	r7, r2, lr
    5c18:	ea4c 0c05 	orr.w	ip, ip, r5
    5c1c:	fa00 f40e 	lsl.w	r4, r0, lr
    5c20:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    5c24:	0c25      	lsrs	r5, r4, #16
    5c26:	fbbc f8fa 	udiv	r8, ip, sl
    5c2a:	fa1f f987 	uxth.w	r9, r7
    5c2e:	fb0a cc18 	mls	ip, sl, r8, ip
    5c32:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    5c36:	fb08 f309 	mul.w	r3, r8, r9
    5c3a:	42ab      	cmp	r3, r5
    5c3c:	d90a      	bls.n	5c54 <__udivmoddi4+0x6c>
    5c3e:	19ed      	adds	r5, r5, r7
    5c40:	f108 32ff 	add.w	r2, r8, #4294967295
    5c44:	f080 8123 	bcs.w	5e8e <__udivmoddi4+0x2a6>
    5c48:	42ab      	cmp	r3, r5
    5c4a:	f240 8120 	bls.w	5e8e <__udivmoddi4+0x2a6>
    5c4e:	f1a8 0802 	sub.w	r8, r8, #2
    5c52:	443d      	add	r5, r7
    5c54:	1aed      	subs	r5, r5, r3
    5c56:	b2a4      	uxth	r4, r4
    5c58:	fbb5 f0fa 	udiv	r0, r5, sl
    5c5c:	fb0a 5510 	mls	r5, sl, r0, r5
    5c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    5c64:	fb00 f909 	mul.w	r9, r0, r9
    5c68:	45a1      	cmp	r9, r4
    5c6a:	d909      	bls.n	5c80 <__udivmoddi4+0x98>
    5c6c:	19e4      	adds	r4, r4, r7
    5c6e:	f100 33ff 	add.w	r3, r0, #4294967295
    5c72:	f080 810a 	bcs.w	5e8a <__udivmoddi4+0x2a2>
    5c76:	45a1      	cmp	r9, r4
    5c78:	f240 8107 	bls.w	5e8a <__udivmoddi4+0x2a2>
    5c7c:	3802      	subs	r0, #2
    5c7e:	443c      	add	r4, r7
    5c80:	eba4 0409 	sub.w	r4, r4, r9
    5c84:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    5c88:	2100      	movs	r1, #0
    5c8a:	2e00      	cmp	r6, #0
    5c8c:	d061      	beq.n	5d52 <__udivmoddi4+0x16a>
    5c8e:	fa24 f40e 	lsr.w	r4, r4, lr
    5c92:	2300      	movs	r3, #0
    5c94:	6034      	str	r4, [r6, #0]
    5c96:	6073      	str	r3, [r6, #4]
    5c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c9c:	428b      	cmp	r3, r1
    5c9e:	d907      	bls.n	5cb0 <__udivmoddi4+0xc8>
    5ca0:	2e00      	cmp	r6, #0
    5ca2:	d054      	beq.n	5d4e <__udivmoddi4+0x166>
    5ca4:	2100      	movs	r1, #0
    5ca6:	e886 0021 	stmia.w	r6, {r0, r5}
    5caa:	4608      	mov	r0, r1
    5cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5cb0:	fab3 f183 	clz	r1, r3
    5cb4:	2900      	cmp	r1, #0
    5cb6:	f040 808e 	bne.w	5dd6 <__udivmoddi4+0x1ee>
    5cba:	42ab      	cmp	r3, r5
    5cbc:	d302      	bcc.n	5cc4 <__udivmoddi4+0xdc>
    5cbe:	4282      	cmp	r2, r0
    5cc0:	f200 80fa 	bhi.w	5eb8 <__udivmoddi4+0x2d0>
    5cc4:	1a84      	subs	r4, r0, r2
    5cc6:	eb65 0503 	sbc.w	r5, r5, r3
    5cca:	2001      	movs	r0, #1
    5ccc:	46ac      	mov	ip, r5
    5cce:	2e00      	cmp	r6, #0
    5cd0:	d03f      	beq.n	5d52 <__udivmoddi4+0x16a>
    5cd2:	e886 1010 	stmia.w	r6, {r4, ip}
    5cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5cda:	b912      	cbnz	r2, 5ce2 <__udivmoddi4+0xfa>
    5cdc:	2701      	movs	r7, #1
    5cde:	fbb7 f7f2 	udiv	r7, r7, r2
    5ce2:	fab7 fe87 	clz	lr, r7
    5ce6:	f1be 0f00 	cmp.w	lr, #0
    5cea:	d134      	bne.n	5d56 <__udivmoddi4+0x16e>
    5cec:	1beb      	subs	r3, r5, r7
    5cee:	0c3a      	lsrs	r2, r7, #16
    5cf0:	fa1f fc87 	uxth.w	ip, r7
    5cf4:	2101      	movs	r1, #1
    5cf6:	fbb3 f8f2 	udiv	r8, r3, r2
    5cfa:	0c25      	lsrs	r5, r4, #16
    5cfc:	fb02 3318 	mls	r3, r2, r8, r3
    5d00:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    5d04:	fb0c f308 	mul.w	r3, ip, r8
    5d08:	42ab      	cmp	r3, r5
    5d0a:	d907      	bls.n	5d1c <__udivmoddi4+0x134>
    5d0c:	19ed      	adds	r5, r5, r7
    5d0e:	f108 30ff 	add.w	r0, r8, #4294967295
    5d12:	d202      	bcs.n	5d1a <__udivmoddi4+0x132>
    5d14:	42ab      	cmp	r3, r5
    5d16:	f200 80d1 	bhi.w	5ebc <__udivmoddi4+0x2d4>
    5d1a:	4680      	mov	r8, r0
    5d1c:	1aed      	subs	r5, r5, r3
    5d1e:	b2a3      	uxth	r3, r4
    5d20:	fbb5 f0f2 	udiv	r0, r5, r2
    5d24:	fb02 5510 	mls	r5, r2, r0, r5
    5d28:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    5d2c:	fb0c fc00 	mul.w	ip, ip, r0
    5d30:	45a4      	cmp	ip, r4
    5d32:	d907      	bls.n	5d44 <__udivmoddi4+0x15c>
    5d34:	19e4      	adds	r4, r4, r7
    5d36:	f100 33ff 	add.w	r3, r0, #4294967295
    5d3a:	d202      	bcs.n	5d42 <__udivmoddi4+0x15a>
    5d3c:	45a4      	cmp	ip, r4
    5d3e:	f200 80b8 	bhi.w	5eb2 <__udivmoddi4+0x2ca>
    5d42:	4618      	mov	r0, r3
    5d44:	eba4 040c 	sub.w	r4, r4, ip
    5d48:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    5d4c:	e79d      	b.n	5c8a <__udivmoddi4+0xa2>
    5d4e:	4631      	mov	r1, r6
    5d50:	4630      	mov	r0, r6
    5d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d56:	f1ce 0420 	rsb	r4, lr, #32
    5d5a:	fa05 f30e 	lsl.w	r3, r5, lr
    5d5e:	fa07 f70e 	lsl.w	r7, r7, lr
    5d62:	fa20 f804 	lsr.w	r8, r0, r4
    5d66:	0c3a      	lsrs	r2, r7, #16
    5d68:	fa25 f404 	lsr.w	r4, r5, r4
    5d6c:	ea48 0803 	orr.w	r8, r8, r3
    5d70:	fbb4 f1f2 	udiv	r1, r4, r2
    5d74:	ea4f 4518 	mov.w	r5, r8, lsr #16
    5d78:	fb02 4411 	mls	r4, r2, r1, r4
    5d7c:	fa1f fc87 	uxth.w	ip, r7
    5d80:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    5d84:	fb01 f30c 	mul.w	r3, r1, ip
    5d88:	42ab      	cmp	r3, r5
    5d8a:	fa00 f40e 	lsl.w	r4, r0, lr
    5d8e:	d909      	bls.n	5da4 <__udivmoddi4+0x1bc>
    5d90:	19ed      	adds	r5, r5, r7
    5d92:	f101 30ff 	add.w	r0, r1, #4294967295
    5d96:	f080 808a 	bcs.w	5eae <__udivmoddi4+0x2c6>
    5d9a:	42ab      	cmp	r3, r5
    5d9c:	f240 8087 	bls.w	5eae <__udivmoddi4+0x2c6>
    5da0:	3902      	subs	r1, #2
    5da2:	443d      	add	r5, r7
    5da4:	1aeb      	subs	r3, r5, r3
    5da6:	fa1f f588 	uxth.w	r5, r8
    5daa:	fbb3 f0f2 	udiv	r0, r3, r2
    5dae:	fb02 3310 	mls	r3, r2, r0, r3
    5db2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    5db6:	fb00 f30c 	mul.w	r3, r0, ip
    5dba:	42ab      	cmp	r3, r5
    5dbc:	d907      	bls.n	5dce <__udivmoddi4+0x1e6>
    5dbe:	19ed      	adds	r5, r5, r7
    5dc0:	f100 38ff 	add.w	r8, r0, #4294967295
    5dc4:	d26f      	bcs.n	5ea6 <__udivmoddi4+0x2be>
    5dc6:	42ab      	cmp	r3, r5
    5dc8:	d96d      	bls.n	5ea6 <__udivmoddi4+0x2be>
    5dca:	3802      	subs	r0, #2
    5dcc:	443d      	add	r5, r7
    5dce:	1aeb      	subs	r3, r5, r3
    5dd0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    5dd4:	e78f      	b.n	5cf6 <__udivmoddi4+0x10e>
    5dd6:	f1c1 0720 	rsb	r7, r1, #32
    5dda:	fa22 f807 	lsr.w	r8, r2, r7
    5dde:	408b      	lsls	r3, r1
    5de0:	fa05 f401 	lsl.w	r4, r5, r1
    5de4:	ea48 0303 	orr.w	r3, r8, r3
    5de8:	fa20 fe07 	lsr.w	lr, r0, r7
    5dec:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    5df0:	40fd      	lsrs	r5, r7
    5df2:	ea4e 0e04 	orr.w	lr, lr, r4
    5df6:	fbb5 f9fc 	udiv	r9, r5, ip
    5dfa:	ea4f 441e 	mov.w	r4, lr, lsr #16
    5dfe:	fb0c 5519 	mls	r5, ip, r9, r5
    5e02:	fa1f f883 	uxth.w	r8, r3
    5e06:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    5e0a:	fb09 f408 	mul.w	r4, r9, r8
    5e0e:	42ac      	cmp	r4, r5
    5e10:	fa02 f201 	lsl.w	r2, r2, r1
    5e14:	fa00 fa01 	lsl.w	sl, r0, r1
    5e18:	d908      	bls.n	5e2c <__udivmoddi4+0x244>
    5e1a:	18ed      	adds	r5, r5, r3
    5e1c:	f109 30ff 	add.w	r0, r9, #4294967295
    5e20:	d243      	bcs.n	5eaa <__udivmoddi4+0x2c2>
    5e22:	42ac      	cmp	r4, r5
    5e24:	d941      	bls.n	5eaa <__udivmoddi4+0x2c2>
    5e26:	f1a9 0902 	sub.w	r9, r9, #2
    5e2a:	441d      	add	r5, r3
    5e2c:	1b2d      	subs	r5, r5, r4
    5e2e:	fa1f fe8e 	uxth.w	lr, lr
    5e32:	fbb5 f0fc 	udiv	r0, r5, ip
    5e36:	fb0c 5510 	mls	r5, ip, r0, r5
    5e3a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    5e3e:	fb00 f808 	mul.w	r8, r0, r8
    5e42:	45a0      	cmp	r8, r4
    5e44:	d907      	bls.n	5e56 <__udivmoddi4+0x26e>
    5e46:	18e4      	adds	r4, r4, r3
    5e48:	f100 35ff 	add.w	r5, r0, #4294967295
    5e4c:	d229      	bcs.n	5ea2 <__udivmoddi4+0x2ba>
    5e4e:	45a0      	cmp	r8, r4
    5e50:	d927      	bls.n	5ea2 <__udivmoddi4+0x2ba>
    5e52:	3802      	subs	r0, #2
    5e54:	441c      	add	r4, r3
    5e56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    5e5a:	eba4 0408 	sub.w	r4, r4, r8
    5e5e:	fba0 8902 	umull	r8, r9, r0, r2
    5e62:	454c      	cmp	r4, r9
    5e64:	46c6      	mov	lr, r8
    5e66:	464d      	mov	r5, r9
    5e68:	d315      	bcc.n	5e96 <__udivmoddi4+0x2ae>
    5e6a:	d012      	beq.n	5e92 <__udivmoddi4+0x2aa>
    5e6c:	b156      	cbz	r6, 5e84 <__udivmoddi4+0x29c>
    5e6e:	ebba 030e 	subs.w	r3, sl, lr
    5e72:	eb64 0405 	sbc.w	r4, r4, r5
    5e76:	fa04 f707 	lsl.w	r7, r4, r7
    5e7a:	40cb      	lsrs	r3, r1
    5e7c:	431f      	orrs	r7, r3
    5e7e:	40cc      	lsrs	r4, r1
    5e80:	6037      	str	r7, [r6, #0]
    5e82:	6074      	str	r4, [r6, #4]
    5e84:	2100      	movs	r1, #0
    5e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e8a:	4618      	mov	r0, r3
    5e8c:	e6f8      	b.n	5c80 <__udivmoddi4+0x98>
    5e8e:	4690      	mov	r8, r2
    5e90:	e6e0      	b.n	5c54 <__udivmoddi4+0x6c>
    5e92:	45c2      	cmp	sl, r8
    5e94:	d2ea      	bcs.n	5e6c <__udivmoddi4+0x284>
    5e96:	ebb8 0e02 	subs.w	lr, r8, r2
    5e9a:	eb69 0503 	sbc.w	r5, r9, r3
    5e9e:	3801      	subs	r0, #1
    5ea0:	e7e4      	b.n	5e6c <__udivmoddi4+0x284>
    5ea2:	4628      	mov	r0, r5
    5ea4:	e7d7      	b.n	5e56 <__udivmoddi4+0x26e>
    5ea6:	4640      	mov	r0, r8
    5ea8:	e791      	b.n	5dce <__udivmoddi4+0x1e6>
    5eaa:	4681      	mov	r9, r0
    5eac:	e7be      	b.n	5e2c <__udivmoddi4+0x244>
    5eae:	4601      	mov	r1, r0
    5eb0:	e778      	b.n	5da4 <__udivmoddi4+0x1bc>
    5eb2:	3802      	subs	r0, #2
    5eb4:	443c      	add	r4, r7
    5eb6:	e745      	b.n	5d44 <__udivmoddi4+0x15c>
    5eb8:	4608      	mov	r0, r1
    5eba:	e708      	b.n	5cce <__udivmoddi4+0xe6>
    5ebc:	f1a8 0802 	sub.w	r8, r8, #2
    5ec0:	443d      	add	r5, r7
    5ec2:	e72b      	b.n	5d1c <__udivmoddi4+0x134>

00005ec4 <__aeabi_idiv0>:
    5ec4:	4770      	bx	lr
    5ec6:	bf00      	nop

00005ec8 <__libc_init_array>:
    5ec8:	b570      	push	{r4, r5, r6, lr}
    5eca:	4e0d      	ldr	r6, [pc, #52]	; (5f00 <__libc_init_array+0x38>)
    5ecc:	4c0d      	ldr	r4, [pc, #52]	; (5f04 <__libc_init_array+0x3c>)
    5ece:	1ba4      	subs	r4, r4, r6
    5ed0:	10a4      	asrs	r4, r4, #2
    5ed2:	2500      	movs	r5, #0
    5ed4:	42a5      	cmp	r5, r4
    5ed6:	d109      	bne.n	5eec <__libc_init_array+0x24>
    5ed8:	4e0b      	ldr	r6, [pc, #44]	; (5f08 <__libc_init_array+0x40>)
    5eda:	4c0c      	ldr	r4, [pc, #48]	; (5f0c <__libc_init_array+0x44>)
    5edc:	f000 f9ae 	bl	623c <_init>
    5ee0:	1ba4      	subs	r4, r4, r6
    5ee2:	10a4      	asrs	r4, r4, #2
    5ee4:	2500      	movs	r5, #0
    5ee6:	42a5      	cmp	r5, r4
    5ee8:	d105      	bne.n	5ef6 <__libc_init_array+0x2e>
    5eea:	bd70      	pop	{r4, r5, r6, pc}
    5eec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5ef0:	4798      	blx	r3
    5ef2:	3501      	adds	r5, #1
    5ef4:	e7ee      	b.n	5ed4 <__libc_init_array+0xc>
    5ef6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5efa:	4798      	blx	r3
    5efc:	3501      	adds	r5, #1
    5efe:	e7f2      	b.n	5ee6 <__libc_init_array+0x1e>
    5f00:	00006248 	.word	0x00006248
    5f04:	00006248 	.word	0x00006248
    5f08:	00006248 	.word	0x00006248
    5f0c:	0000624c 	.word	0x0000624c
    5f10:	0000f5f4 	.word	0x0000f5f4

00005f14 <dummy_register>:
    5f14:	20000008                                ... 

00005f18 <abort_fifo_start>:
    5f18:	20000012                                ... 

00005f1c <wr_pdram_start>:
    5f1c:	2000004e                                N.. 

00005f20 <cf_pdram_start>:
    5f20:	20000038                                8.. 

00005f24 <rd_pdram_start>:
    5f24:	2000004b 682f2e2e 732f6c61 682f6372     K.. ../hal/src/h
    5f34:	615f6c61 615f6364 636e7973 0000632e     al_adc_async.c..
    5f44:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    5f54:	6d5f6332 6e79735f 00632e63 682f2e2e     2c_m_sync.c.../h
    5f64:	732f6c61 682f6372 695f6c61 00632e6f     al/src/hal_io.c.
    5f74:	682f2e2e 732f6c61 682f6372 735f6c61     ../hal/src/hal_s
    5f84:	6d5f6970 616d645f 0000632e 682f2e2e     pi_m_dma.c..../h
    5f94:	732f6c61 682f6372 735f6c61 6d5f6970     al/src/hal_spi_m
    5fa4:	6e79735f 00632e63 682f2e2e 732f6c61     _sync.c.../hal/s
    5fb4:	682f6372 745f6c61 72656d69 0000632e     rc/hal_timer.c..
    5fc4:	682f2e2e 732f6c61 682f6372 755f6c61     ../hal/src/hal_u
    5fd4:	74726173 6e79735f 00632e63 682f2e2e     sart_sync.c.../h
    5fe4:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    5ff4:	6c5f736c 2e747369 00000063 682f2e2e     ls_list.c...../h
    6004:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    6014:	725f736c 62676e69 65666675 00632e72     ls_ringbuffer.c.

00006024 <_adcs>:
    6024:	04000001 00030000 00001806 00000000     ................
	...
    603c:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    604c:	632e6364 00000000                       dc.c....

00006054 <_cfgs>:
    6054:	00200e00 08100000 00200f00 14100000     .. ....... .....
	...
    6154:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    6164:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00006174 <_usarts>:
    6174:	00000002 40100004 00030000 00700002     .......@......p.
    6184:	0000fe6d 00000000                       m.......

0000618c <_i2cms>:
    618c:	00000003 00200014 00000100 000000ff     ...... .........
    619c:	00d70000 05f5e100                       ........

000061a4 <_i2css>:
	...

000061b4 <sercomspi_regs>:
    61b4:	0030000c 00020000 00000000 01ff0031     ..0.........1...
    61c4:	30010c05 02000030 00000000 0000fe00     ...00...........
    61d4:	00000600 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    61e4:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    61f4:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    6204:	42001400 42001800 43001400 43001800     ...B...B...C...C

00006214 <_tcs>:
    6214:	006b0000 00000308 00000000 0000007d     ..k.........}...
    6224:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    6234:	63745f6c 0000632e                       l_tc.c..

0000623c <_init>:
    623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    623e:	bf00      	nop
    6240:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6242:	bc08      	pop	{r3}
    6244:	469e      	mov	lr, r3
    6246:	4770      	bx	lr

00006248 <__init_array_start>:
    6248:	00000289 	.word	0x00000289

0000624c <_fini>:
    624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    624e:	bf00      	nop
    6250:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6252:	bc08      	pop	{r3}
    6254:	469e      	mov	lr, r3
    6256:	4770      	bx	lr

00006258 <__fini_array_start>:
    6258:	00000265 	.word	0x00000265
